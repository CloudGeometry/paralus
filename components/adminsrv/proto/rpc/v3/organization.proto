syntax = "proto3";
package rafay.dev.rpc.v3;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/types/systempb/v3/organization.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Organization Service"
    version: "3.0"
    contact: { name: "Rafay Dev" }
  }
  schemes: HTTPS
  consumes: "application/json"
  consumes: "application/yaml"
  produces: "application/json"
  produces: "application/yaml"
  security_definitions: {
    security: {
      key: "BasicAuth"
      value: { type: TYPE_BASIC }
    }
    security: {
      key: "ApiKeyAuth"
      value: { type: TYPE_API_KEY in: IN_HEADER name: "X-RAFAY-API-KEYID" }
    }
  }
  security: {
    security_requirement: {
      key: "BasicAuth"
      value: {}
    }
    security_requirement: {
      key: "ApiKeyAuth"
      value: {}
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Returned when the user does not have permission to access the resource."
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
      schema: { json_schema: { type: STRING } }
    }
  }
};

service Organization {
  rpc CreateOrganization(rafay.dev.types.system.v3.Organization)
      returns (rafay.dev.types.system.v3.Organization) {
    option (google.api.http) = {
      post : "/auth/v3/partner/{metadata.partner}/organization"
      body : "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses : {
        key : "201"
        value : {
          description : "Returned when organization is created successfully."
        }
      }
    };
  };

  rpc GetOrganizations(rafay.dev.types.system.v3.Organization)
      returns (rafay.dev.types.system.v3.OrganizationList) {
    option (google.api.http) = {
      get : "/auth/v3/partner/{metadata.partner}/organizations"
    };
  };

  rpc GetOrganization(rafay.dev.types.system.v3.Organization)
      returns (rafay.dev.types.system.v3.Organization) {
    option (google.api.http) = {
      get : "/auth/v3/partner/{metadata.partner}/organization/"
            "{metadata.name}"
    };
  };

  rpc UpdateOrganization(rafay.dev.types.system.v3.Organization)
      returns (rafay.dev.types.system.v3.Organization) {
    option (google.api.http) = {
      put : "/auth/v3/partner/{metadata.partner}/organization/"
            "{metadata.name}"
      body : "*"
    };
  };

  rpc DeleteOrganization(rafay.dev.types.system.v3.Organization)
      returns (rafay.dev.types.system.v3.Organization) {
    option (google.api.http) = {
      delete : "/auth/v3/partner/{metadata.partner}/organization/"
               "{metadata.name}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses : {
        key : "204"
        value : {
          description : "Returned when organization is deleted successfully."
        }
      }
    };
  };

}