// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: proto/rpc/config/override.proto

package config

import (
	v3 "github.com/RafaySystems/rcloud-base/components/common/proto/types/commonpb/v3"
	config "github.com/RafaySystems/rcloud-base/components/common/proto/types/config"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeleteOverrideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOverrideResponse) Reset() {
	*x = DeleteOverrideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_config_override_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOverrideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOverrideResponse) ProtoMessage() {}

func (x *DeleteOverrideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_config_override_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOverrideResponse.ProtoReflect.Descriptor instead.
func (*DeleteOverrideResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_config_override_proto_rawDescGZIP(), []int{0}
}

type ApplyOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector       string                    `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Type           string                    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	PartnerID      int64                     `protobuf:"zigzag64,3,opt,name=partnerID,proto3" json:"partnerID,omitempty"`
	OrganizationID int64                     `protobuf:"zigzag64,4,opt,name=organizationID,proto3" json:"organizationID,omitempty"`
	ProjectID      int64                     `protobuf:"zigzag64,5,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Namespace      *config.NamespaceTemplate `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SetNamespace   bool                      `protobuf:"varint,8,opt,name=setNamespace,proto3" json:"setNamespace,omitempty"`
	AtleastOne     bool                      `protobuf:"varint,9,opt,name=atleastOne,proto3" json:"atleastOne,omitempty"`
}

func (x *ApplyOverrideRequest) Reset() {
	*x = ApplyOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_config_override_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOverrideRequest) ProtoMessage() {}

func (x *ApplyOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_config_override_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOverrideRequest.ProtoReflect.Descriptor instead.
func (*ApplyOverrideRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_config_override_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyOverrideRequest) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *ApplyOverrideRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApplyOverrideRequest) GetPartnerID() int64 {
	if x != nil {
		return x.PartnerID
	}
	return 0
}

func (x *ApplyOverrideRequest) GetOrganizationID() int64 {
	if x != nil {
		return x.OrganizationID
	}
	return 0
}

func (x *ApplyOverrideRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ApplyOverrideRequest) GetNamespace() *config.NamespaceTemplate {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ApplyOverrideRequest) GetSetNamespace() bool {
	if x != nil {
		return x.SetNamespace
	}
	return false
}

func (x *ApplyOverrideRequest) GetAtleastOne() bool {
	if x != nil {
		return x.AtleastOne
	}
	return false
}

type ApplyOverrideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *config.NamespaceTemplate `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ApplyOverrideResponse) Reset() {
	*x = ApplyOverrideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_config_override_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOverrideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOverrideResponse) ProtoMessage() {}

func (x *ApplyOverrideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_config_override_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOverrideResponse.ProtoReflect.Descriptor instead.
func (*ApplyOverrideResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_config_override_proto_rawDescGZIP(), []int{2}
}

func (x *ApplyOverrideResponse) GetNamespace() *config.NamespaceTemplate {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpProxy              string `protobuf:"bytes,1,opt,name=httpProxy,proto3" json:"httpProxy,omitempty"`
	HttpsProxy             string `protobuf:"bytes,2,opt,name=httpsProxy,proto3" json:"httpsProxy,omitempty"`
	NoProxy                string `protobuf:"bytes,3,opt,name=noProxy,proto3" json:"noProxy,omitempty"`
	ProxyAuth              string `protobuf:"bytes,4,opt,name=proxyAuth,proto3" json:"proxyAuth,omitempty"`
	AllowInsecureBootstrap bool   `protobuf:"varint,5,opt,name=allowInsecureBootstrap,proto3" json:"allowInsecureBootstrap,omitempty"`
	Enabled                bool   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BootstrapCA            string `protobuf:"bytes,7,opt,name=bootstrapCA,proto3" json:"bootstrapCA,omitempty"`
}

func (x *ProxyConfig) Reset() {
	*x = ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_config_override_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyConfig) ProtoMessage() {}

func (x *ProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_config_override_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyConfig.ProtoReflect.Descriptor instead.
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return file_proto_rpc_config_override_proto_rawDescGZIP(), []int{3}
}

func (x *ProxyConfig) GetHttpProxy() string {
	if x != nil {
		return x.HttpProxy
	}
	return ""
}

func (x *ProxyConfig) GetHttpsProxy() string {
	if x != nil {
		return x.HttpsProxy
	}
	return ""
}

func (x *ProxyConfig) GetNoProxy() string {
	if x != nil {
		return x.NoProxy
	}
	return ""
}

func (x *ProxyConfig) GetProxyAuth() string {
	if x != nil {
		return x.ProxyAuth
	}
	return ""
}

func (x *ProxyConfig) GetAllowInsecureBootstrap() bool {
	if x != nil {
		return x.AllowInsecureBootstrap
	}
	return false
}

func (x *ProxyConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ProxyConfig) GetBootstrapCA() string {
	if x != nil {
		return x.BootstrapCA
	}
	return ""
}

type AddDefaultOverridesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName                    string       `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	PartnerID                      int64        `protobuf:"zigzag64,2,opt,name=partnerID,proto3" json:"partnerID,omitempty"`
	OrganizationID                 int64        `protobuf:"zigzag64,3,opt,name=organizationID,proto3" json:"organizationID,omitempty"`
	ProjectID                      int64        `protobuf:"zigzag64,4,opt,name=projectID,proto3" json:"projectID,omitempty"`
	PullSecret                     string       `protobuf:"bytes,5,opt,name=pullSecret,proto3" json:"pullSecret,omitempty"`
	ControlAddr                    string       `protobuf:"bytes,6,opt,name=controlAddr,proto3" json:"controlAddr,omitempty"`
	ApiAddr                        string       `protobuf:"bytes,7,opt,name=apiAddr,proto3" json:"apiAddr,omitempty"`
	Token                          string       `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	V1EdgeMetadata                 string       `protobuf:"bytes,9,opt,name=v1EdgeMetadata,proto3" json:"v1EdgeMetadata,omitempty"`
	V1CACert                       string       `protobuf:"bytes,10,opt,name=v1CACert,proto3" json:"v1CACert,omitempty"`
	V1WorkloadClientCert           string       `protobuf:"bytes,11,opt,name=v1WorkloadClientCert,proto3" json:"v1WorkloadClientCert,omitempty"`
	V1WorkloadClientKey            string       `protobuf:"bytes,12,opt,name=v1WorkloadClientKey,proto3" json:"v1WorkloadClientKey,omitempty"`
	V1PostgresPassword             string       `protobuf:"bytes,13,opt,name=v1PostgresPassword,proto3" json:"v1PostgresPassword,omitempty"`
	V1CryptoEdgeCert               string       `protobuf:"bytes,14,opt,name=v1CryptoEdgeCert,proto3" json:"v1CryptoEdgeCert,omitempty"`
	V1CryptoEdgeKey                string       `protobuf:"bytes,15,opt,name=v1CryptoEdgeKey,proto3" json:"v1CryptoEdgeKey,omitempty"`
	V1CrypotKMIKey                 string       `protobuf:"bytes,16,opt,name=v1CrypotKMIKey,proto3" json:"v1CrypotKMIKey,omitempty"`
	V1EdgeID                       string       `protobuf:"bytes,17,opt,name=v1EdgeID,proto3" json:"v1EdgeID,omitempty"`
	V1DebugCert                    string       `protobuf:"bytes,18,opt,name=v1DebugCert,proto3" json:"v1DebugCert,omitempty"`
	V1DebugKey                     string       `protobuf:"bytes,19,opt,name=v1DebugKey,proto3" json:"v1DebugKey,omitempty"`
	V1ConfigEdgeCert               string       `protobuf:"bytes,20,opt,name=v1ConfigEdgeCert,proto3" json:"v1ConfigEdgeCert,omitempty"`
	V1ConfigEdgeKey                string       `protobuf:"bytes,21,opt,name=v1ConfigEdgeKey,proto3" json:"v1ConfigEdgeKey,omitempty"`
	V1EdgeClientCert               string       `protobuf:"bytes,22,opt,name=v1EdgeClientCert,proto3" json:"v1EdgeClientCert,omitempty"`
	V1EdgeClientKey                string       `protobuf:"bytes,23,opt,name=v1EdgeClientKey,proto3" json:"v1EdgeClientKey,omitempty"`
	V1FluentdAggregatorAddr        string       `protobuf:"bytes,24,opt,name=v1FluentdAggregatorAddr,proto3" json:"v1FluentdAggregatorAddr,omitempty"`
	V1AlertManagerYaml             string       `protobuf:"bytes,25,opt,name=v1AlertManagerYaml,proto3" json:"v1AlertManagerYaml,omitempty"`
	V1DeploymentEnv                string       `protobuf:"bytes,26,opt,name=v1DeploymentEnv,proto3" json:"v1DeploymentEnv,omitempty"`
	V1InfluxDBFQDN                 string       `protobuf:"bytes,27,opt,name=v1InfluxDBFQDN,proto3" json:"v1InfluxDBFQDN,omitempty"`
	V1InfluxDBPassword             string       `protobuf:"bytes,28,opt,name=v1InfluxDBPassword,proto3" json:"v1InfluxDBPassword,omitempty"`
	V1PromethuesRelayFQDN          string       `protobuf:"bytes,29,opt,name=v1PromethuesRelayFQDN,proto3" json:"v1PromethuesRelayFQDN,omitempty"`
	V1EdgeDisplayName              string       `protobuf:"bytes,30,opt,name=v1EdgeDisplayName,proto3" json:"v1EdgeDisplayName,omitempty"`
	OrganizationHash               string       `protobuf:"bytes,31,opt,name=organizationHash,proto3" json:"organizationHash,omitempty"`
	PartnerHash                    string       `protobuf:"bytes,32,opt,name=partnerHash,proto3" json:"partnerHash,omitempty"`
	OrgDisplayName                 string       `protobuf:"bytes,33,opt,name=orgDisplayName,proto3" json:"orgDisplayName,omitempty"`
	PartnerDisplayName             string       `protobuf:"bytes,34,opt,name=partnerDisplayName,proto3" json:"partnerDisplayName,omitempty"`
	V2EventFrmwkCert               string       `protobuf:"bytes,35,opt,name=v2EventFrmwkCert,proto3" json:"v2EventFrmwkCert,omitempty"`
	V2EventFrmwkKey                string       `protobuf:"bytes,36,opt,name=v2EventFrmwkKey,proto3" json:"v2EventFrmwkKey,omitempty"`
	V2EventFrameworkFQDN           string       `protobuf:"bytes,37,opt,name=V2EventFrameworkFQDN,proto3" json:"V2EventFrameworkFQDN,omitempty"`
	ProxyConfig                    *ProxyConfig `protobuf:"bytes,38,opt,name=proxyConfig,proto3" json:"proxyConfig,omitempty"`
	ConnectorPodSpecOverride       string       `protobuf:"bytes,39,opt,name=connectorPodSpecOverride,proto3" json:"connectorPodSpecOverride,omitempty"`
	ConnectorContainerSpecOverride string       `protobuf:"bytes,40,opt,name=connectorContainerSpecOverride,proto3" json:"connectorContainerSpecOverride,omitempty"`
	IngressControllerOverride      string       `protobuf:"bytes,41,opt,name=ingressControllerOverride,proto3" json:"ingressControllerOverride,omitempty"`
	ClusterType                    string       `protobuf:"bytes,42,opt,name=clusterType,proto3" json:"clusterType,omitempty"`
	CniProvider                    string       `protobuf:"bytes,43,opt,name=cniProvider,proto3" json:"cniProvider,omitempty"`
}

func (x *AddDefaultOverridesRequest) Reset() {
	*x = AddDefaultOverridesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_config_override_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultOverridesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultOverridesRequest) ProtoMessage() {}

func (x *AddDefaultOverridesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_config_override_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultOverridesRequest.ProtoReflect.Descriptor instead.
func (*AddDefaultOverridesRequest) Descriptor() ([]byte, []int) {
	return file_proto_rpc_config_override_proto_rawDescGZIP(), []int{4}
}

func (x *AddDefaultOverridesRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetPartnerID() int64 {
	if x != nil {
		return x.PartnerID
	}
	return 0
}

func (x *AddDefaultOverridesRequest) GetOrganizationID() int64 {
	if x != nil {
		return x.OrganizationID
	}
	return 0
}

func (x *AddDefaultOverridesRequest) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *AddDefaultOverridesRequest) GetPullSecret() string {
	if x != nil {
		return x.PullSecret
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetControlAddr() string {
	if x != nil {
		return x.ControlAddr
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetApiAddr() string {
	if x != nil {
		return x.ApiAddr
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1EdgeMetadata() string {
	if x != nil {
		return x.V1EdgeMetadata
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1CACert() string {
	if x != nil {
		return x.V1CACert
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1WorkloadClientCert() string {
	if x != nil {
		return x.V1WorkloadClientCert
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1WorkloadClientKey() string {
	if x != nil {
		return x.V1WorkloadClientKey
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1PostgresPassword() string {
	if x != nil {
		return x.V1PostgresPassword
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1CryptoEdgeCert() string {
	if x != nil {
		return x.V1CryptoEdgeCert
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1CryptoEdgeKey() string {
	if x != nil {
		return x.V1CryptoEdgeKey
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1CrypotKMIKey() string {
	if x != nil {
		return x.V1CrypotKMIKey
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1EdgeID() string {
	if x != nil {
		return x.V1EdgeID
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1DebugCert() string {
	if x != nil {
		return x.V1DebugCert
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1DebugKey() string {
	if x != nil {
		return x.V1DebugKey
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1ConfigEdgeCert() string {
	if x != nil {
		return x.V1ConfigEdgeCert
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1ConfigEdgeKey() string {
	if x != nil {
		return x.V1ConfigEdgeKey
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1EdgeClientCert() string {
	if x != nil {
		return x.V1EdgeClientCert
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1EdgeClientKey() string {
	if x != nil {
		return x.V1EdgeClientKey
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1FluentdAggregatorAddr() string {
	if x != nil {
		return x.V1FluentdAggregatorAddr
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1AlertManagerYaml() string {
	if x != nil {
		return x.V1AlertManagerYaml
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1DeploymentEnv() string {
	if x != nil {
		return x.V1DeploymentEnv
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1InfluxDBFQDN() string {
	if x != nil {
		return x.V1InfluxDBFQDN
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1InfluxDBPassword() string {
	if x != nil {
		return x.V1InfluxDBPassword
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1PromethuesRelayFQDN() string {
	if x != nil {
		return x.V1PromethuesRelayFQDN
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV1EdgeDisplayName() string {
	if x != nil {
		return x.V1EdgeDisplayName
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetOrganizationHash() string {
	if x != nil {
		return x.OrganizationHash
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetPartnerHash() string {
	if x != nil {
		return x.PartnerHash
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetOrgDisplayName() string {
	if x != nil {
		return x.OrgDisplayName
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetPartnerDisplayName() string {
	if x != nil {
		return x.PartnerDisplayName
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV2EventFrmwkCert() string {
	if x != nil {
		return x.V2EventFrmwkCert
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV2EventFrmwkKey() string {
	if x != nil {
		return x.V2EventFrmwkKey
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetV2EventFrameworkFQDN() string {
	if x != nil {
		return x.V2EventFrameworkFQDN
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetProxyConfig() *ProxyConfig {
	if x != nil {
		return x.ProxyConfig
	}
	return nil
}

func (x *AddDefaultOverridesRequest) GetConnectorPodSpecOverride() string {
	if x != nil {
		return x.ConnectorPodSpecOverride
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetConnectorContainerSpecOverride() string {
	if x != nil {
		return x.ConnectorContainerSpecOverride
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetIngressControllerOverride() string {
	if x != nil {
		return x.IngressControllerOverride
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *AddDefaultOverridesRequest) GetCniProvider() string {
	if x != nil {
		return x.CniProvider
	}
	return ""
}

type AddDefaultOverridesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDefaultOverridesResponse) Reset() {
	*x = AddDefaultOverridesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rpc_config_override_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDefaultOverridesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDefaultOverridesResponse) ProtoMessage() {}

func (x *AddDefaultOverridesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rpc_config_override_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDefaultOverridesResponse.ProtoReflect.Descriptor instead.
func (*AddDefaultOverridesResponse) Descriptor() ([]byte, []int) {
	return file_proto_rpc_config_override_proto_rawDescGZIP(), []int{5}
}

var File_proto_rpc_config_override_proto protoreflect.FileDescriptor

var file_proto_rpc_config_override_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x74, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x74, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x22, 0x60, 0x0a, 0x15,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x43, 0x41, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x41, 0x22, 0xc1, 0x0e, 0x0a, 0x1a, 0x41, 0x64, 0x64,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x69, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x76, 0x31, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x31, 0x45, 0x64, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x31, 0x43, 0x41, 0x43,
	0x65, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x31, 0x43, 0x41, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x31, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x76, 0x31, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x31, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x31, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x31, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x31, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x31, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x31, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x45, 0x64, 0x67,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x31, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x31, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x76, 0x31, 0x43, 0x72, 0x79, 0x70, 0x6f, 0x74, 0x4b, 0x4d, 0x49, 0x4b, 0x65,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x31, 0x43, 0x72, 0x79, 0x70, 0x6f,
	0x74, 0x4b, 0x4d, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x31, 0x45, 0x64, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x31, 0x45, 0x64, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x65,
	0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x31, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x4b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x31, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x64, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x76, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x64, 0x67, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x64, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x31, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x76,
	0x31, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x31, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x31, 0x45, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x76, 0x31, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x17, 0x76, 0x31, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x64, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x76, 0x31, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x64, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x76,
	0x31, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x59, 0x61, 0x6d,
	0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x31, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x76,
	0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x31, 0x49, 0x6e, 0x66, 0x6c, 0x75,
	0x78, 0x44, 0x42, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76,
	0x31, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x44, 0x42, 0x46, 0x51, 0x44, 0x4e, 0x12, 0x2e, 0x0a,
	0x12, 0x76, 0x31, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x44, 0x42, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x31, 0x49, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x44, 0x42, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x76, 0x31, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x31,
	0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46,
	0x51, 0x44, 0x4e, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x31, 0x45, 0x64, 0x67, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x76, 0x31, 0x45, 0x64, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x32, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x72, 0x6d, 0x77, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x32, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6d, 0x77, 0x6b, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x32, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6d, 0x77, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x32,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6d, 0x77, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x14, 0x56, 0x32, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x56, 0x32, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x51, 0x44,
	0x4e, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6e,
	0x69, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x1b,
	0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd0, 0x09, 0x0a, 0x08,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x20, 0x2e,
	0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0x75, 0x92, 0x41, 0x39, 0x4a, 0x37, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x30, 0x0a, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x40, 0x12, 0x3e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x2e, 0x72,
	0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x75, 0x72, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x2a, 0x7d, 0x2f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61,
	0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x43, 0x1a, 0x3e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xe7, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61,
	0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x2c, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x92, 0x41, 0x3b, 0x4a,
	0x39, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12, 0x32, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40,
	0x2a, 0x3e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x2a, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0xaa, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x72, 0x61, 0x66, 0x61,
	0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x42, 0xd8,
	0x04, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0d, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x66, 0x61, 0x79, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0xa2, 0x02, 0x04, 0x52, 0x44, 0x43, 0x52, 0xaa, 0x02, 0x14, 0x52, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x70, 0x63, 0xca, 0x02, 0x14, 0x52, 0x61, 0x66, 0x61, 0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x20, 0x52, 0x61, 0x66, 0x61,
	0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x52, 0x70, 0x63,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x52,
	0x61, 0x66, 0x61, 0x79, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x92, 0x41, 0xdb, 0x02, 0x12, 0x24, 0x0a, 0x10, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x0b,
	0x0a, 0x09, 0x52, 0x61, 0x66, 0x61, 0x79, 0x20, 0x44, 0x65, 0x76, 0x32, 0x03, 0x32, 0x2e, 0x30,
	0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x79, 0x61, 0x6d, 0x6c, 0x52, 0x50, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x49, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x3b, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x5a, 0x38, 0x0a, 0x25, 0x0a, 0x0a,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x17, 0x08, 0x02, 0x1a, 0x11,
	0x58, 0x2d, 0x52, 0x41, 0x46, 0x41, 0x59, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b, 0x45, 0x59, 0x49,
	0x44, 0x20, 0x02, 0x0a, 0x0f, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x02, 0x08, 0x01, 0x62, 0x1f, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x0a, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x00, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xe0, 0xe2, 0x1e,
	0x01, 0xc0, 0xe3, 0x1e, 0x01, 0xc8, 0xe3, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_rpc_config_override_proto_rawDescOnce sync.Once
	file_proto_rpc_config_override_proto_rawDescData = file_proto_rpc_config_override_proto_rawDesc
)

func file_proto_rpc_config_override_proto_rawDescGZIP() []byte {
	file_proto_rpc_config_override_proto_rawDescOnce.Do(func() {
		file_proto_rpc_config_override_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_rpc_config_override_proto_rawDescData)
	})
	return file_proto_rpc_config_override_proto_rawDescData
}

var file_proto_rpc_config_override_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_rpc_config_override_proto_goTypes = []interface{}{
	(*DeleteOverrideResponse)(nil),      // 0: rafay.dev.config.rpc.DeleteOverrideResponse
	(*ApplyOverrideRequest)(nil),        // 1: rafay.dev.config.rpc.ApplyOverrideRequest
	(*ApplyOverrideResponse)(nil),       // 2: rafay.dev.config.rpc.ApplyOverrideResponse
	(*ProxyConfig)(nil),                 // 3: rafay.dev.config.rpc.ProxyConfig
	(*AddDefaultOverridesRequest)(nil),  // 4: rafay.dev.config.rpc.AddDefaultOverridesRequest
	(*AddDefaultOverridesResponse)(nil), // 5: rafay.dev.config.rpc.AddDefaultOverridesResponse
	(*config.NamespaceTemplate)(nil),    // 6: rafay.dev.types.config.NamespaceTemplate
	(*config.Override)(nil),             // 7: rafay.dev.types.config.Override
	(*v3.QueryOptions)(nil),             // 8: rafay.dev.types.common.v3.QueryOptions
	(*config.OverrideList)(nil),         // 9: rafay.dev.types.config.OverrideList
}
var file_proto_rpc_config_override_proto_depIdxs = []int32{
	6,  // 0: rafay.dev.config.rpc.ApplyOverrideRequest.namespace:type_name -> rafay.dev.types.config.NamespaceTemplate
	6,  // 1: rafay.dev.config.rpc.ApplyOverrideResponse.namespace:type_name -> rafay.dev.types.config.NamespaceTemplate
	3,  // 2: rafay.dev.config.rpc.AddDefaultOverridesRequest.proxyConfig:type_name -> rafay.dev.config.rpc.ProxyConfig
	7,  // 3: rafay.dev.config.rpc.Override.CreateOverride:input_type -> rafay.dev.types.config.Override
	7,  // 4: rafay.dev.config.rpc.Override.GetOverride:input_type -> rafay.dev.types.config.Override
	8,  // 5: rafay.dev.config.rpc.Override.GetOverrides:input_type -> rafay.dev.types.common.v3.QueryOptions
	7,  // 6: rafay.dev.config.rpc.Override.UpdateOverride:input_type -> rafay.dev.types.config.Override
	7,  // 7: rafay.dev.config.rpc.Override.DeleteOverride:input_type -> rafay.dev.types.config.Override
	1,  // 8: rafay.dev.config.rpc.Override.ApplyOverride:input_type -> rafay.dev.config.rpc.ApplyOverrideRequest
	4,  // 9: rafay.dev.config.rpc.Override.AddDefaultOverrides:input_type -> rafay.dev.config.rpc.AddDefaultOverridesRequest
	7,  // 10: rafay.dev.config.rpc.Override.CreateOverride:output_type -> rafay.dev.types.config.Override
	7,  // 11: rafay.dev.config.rpc.Override.GetOverride:output_type -> rafay.dev.types.config.Override
	9,  // 12: rafay.dev.config.rpc.Override.GetOverrides:output_type -> rafay.dev.types.config.OverrideList
	7,  // 13: rafay.dev.config.rpc.Override.UpdateOverride:output_type -> rafay.dev.types.config.Override
	0,  // 14: rafay.dev.config.rpc.Override.DeleteOverride:output_type -> rafay.dev.config.rpc.DeleteOverrideResponse
	2,  // 15: rafay.dev.config.rpc.Override.ApplyOverride:output_type -> rafay.dev.config.rpc.ApplyOverrideResponse
	5,  // 16: rafay.dev.config.rpc.Override.AddDefaultOverrides:output_type -> rafay.dev.config.rpc.AddDefaultOverridesResponse
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_proto_rpc_config_override_proto_init() }
func file_proto_rpc_config_override_proto_init() {
	if File_proto_rpc_config_override_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_rpc_config_override_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOverrideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_config_override_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_config_override_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOverrideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_config_override_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_config_override_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultOverridesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rpc_config_override_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDefaultOverridesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_rpc_config_override_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_rpc_config_override_proto_goTypes,
		DependencyIndexes: file_proto_rpc_config_override_proto_depIdxs,
		MessageInfos:      file_proto_rpc_config_override_proto_msgTypes,
	}.Build()
	File_proto_rpc_config_override_proto = out.File
	file_proto_rpc_config_override_proto_rawDesc = nil
	file_proto_rpc_config_override_proto_goTypes = nil
	file_proto_rpc_config_override_proto_depIdxs = nil
}
