syntax = "proto3";
package rafay.dev.sentry.rpc;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/types/commonpb/v3/common.proto";
import "proto/types/sentry/sentry.proto";
import "proto/types/controller/cluster_controller.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "Sentry Cluster Authorization Service"
    version : "2.0"
    contact : {name : "Rafay Dev"}
  }
  schemes : HTTPS
  consumes : "application/json"
  consumes : "application/yaml"
  produces : "application/json"
  produces : "application/yaml"
  security_definitions : {
    security : {
      key : "BasicAuth"
      value : {type : TYPE_BASIC}
    }
    security : {
      key : "ApiKeyAuth"
      value : {type : TYPE_API_KEY in : IN_HEADER name : "X-RAFAY-API-KEYID"}
    }
  }
  security : {
    security_requirement : {
      key : "BasicAuth"
      value : {}
    }
    security_requirement : {
      key : "ApiKeyAuth"
      value : {}
    }
  }
  responses : {
    key : "403"
    value : {
      description : "Returned when the user does not have permission to access "
                    "the resource."
    }
  }
  responses : {
    key : "404"
    value : {
      description : "Returned when the resource does not exist."
      schema : {json_schema : {type : STRING}}
    }
  }
};

message GetUserAuthorizationResponse {
  string userName = 1;
  rafay.dev.types.controller.StepObject serviceAccount = 2;
  repeated rafay.dev.types.controller.StepObject clusterRoles = 3;
  repeated rafay.dev.types.controller.StepObject clusterRoleBindings = 4;
  repeated rafay.dev.types.controller.StepObject roles = 5;
  repeated rafay.dev.types.controller.StepObject roleBindings = 6;
  repeated rafay.dev.types.controller.StepObject deleteClusterRoleBindings = 7;
  repeated rafay.dev.types.controller.StepObject deleteRoleBindings = 8;
  repeated rafay.dev.types.controller.StepObject namespaces = 9;
  string roleName = 10;
  bool isRead = 11;
  bool enforceOrgAdminOnlySecretAccess = 12;
  bool isOrgAdmin = 13;
}

message GetUserAuthorizationRequest {
  string userCN = 1;
  string clusterID = 2;
  int64 certIssueSeconds  = 3;
}

service ClusterAuthorization {
  rpc GetUserAuthorization(GetUserAuthorizationRequest)
      returns (GetUserAuthorizationResponse) {
    option (google.api.http) = {
      get : "/v2/sentry/authorization/user"
    };
  };
}
