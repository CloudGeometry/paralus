// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/rpc/sentry/bootstrap.proto

package sentry

import (
	context "context"
	v3 "github.com/RafaySystems/rcloud-base/components/common/proto/types/commonpb/v3"
	sentry "github.com/RafaySystems/rcloud-base/components/common/proto/types/sentry"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BootstrapClient is the client API for Bootstrap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapClient interface {
	PatchBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error)
	GetBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error)
	PatchBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplates(ctx context.Context, in *v3.QueryOptions, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplateList, error)
	RegisterBootstrapAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	GetBootstrapAgentConfig(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*v3.HttpBody, error)
	CreateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error)
	GetBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error)
	GetBootstrapAgents(ctx context.Context, in *GetBootstrapAgentsRequest, opts ...grpc.CallOption) (*sentry.BootstrapAgentList, error)
	DeleteBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*DeleteBootstrapAgentResponse, error)
	UpdateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error)
}

type bootstrapClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapClient(cc grpc.ClientConnInterface) BootstrapClient {
	return &bootstrapClient{cc}
}

func (c *bootstrapClient) PatchBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error) {
	out := new(sentry.BootstrapInfra)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/PatchBootstrapInfra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) GetBootstrapInfra(ctx context.Context, in *sentry.BootstrapInfra, opts ...grpc.CallOption) (*sentry.BootstrapInfra, error) {
	out := new(sentry.BootstrapInfra)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapInfra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) PatchBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error) {
	out := new(sentry.BootstrapAgentTemplate)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/PatchBootstrapAgentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) GetBootstrapAgentTemplate(ctx context.Context, in *sentry.BootstrapAgentTemplate, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplate, error) {
	out := new(sentry.BootstrapAgentTemplate)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) GetBootstrapAgentTemplates(ctx context.Context, in *v3.QueryOptions, opts ...grpc.CallOption) (*sentry.BootstrapAgentTemplateList, error) {
	out := new(sentry.BootstrapAgentTemplateList)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgentTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) RegisterBootstrapAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/RegisterBootstrapAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) GetBootstrapAgentConfig(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) CreateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error) {
	out := new(sentry.BootstrapAgent)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/CreateBootstrapAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) GetBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error) {
	out := new(sentry.BootstrapAgent)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) GetBootstrapAgents(ctx context.Context, in *GetBootstrapAgentsRequest, opts ...grpc.CallOption) (*sentry.BootstrapAgentList, error) {
	out := new(sentry.BootstrapAgentList)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) DeleteBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*DeleteBootstrapAgentResponse, error) {
	out := new(DeleteBootstrapAgentResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/DeleteBootstrapAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapClient) UpdateBootstrapAgent(ctx context.Context, in *sentry.BootstrapAgent, opts ...grpc.CallOption) (*sentry.BootstrapAgent, error) {
	out := new(sentry.BootstrapAgent)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.Bootstrap/UpdateBootstrapAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapServer is the server API for Bootstrap service.
// All implementations should embed UnimplementedBootstrapServer
// for forward compatibility
type BootstrapServer interface {
	PatchBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error)
	GetBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error)
	PatchBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error)
	GetBootstrapAgentTemplates(context.Context, *v3.QueryOptions) (*sentry.BootstrapAgentTemplateList, error)
	RegisterBootstrapAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	GetBootstrapAgentConfig(context.Context, *sentry.BootstrapAgent) (*v3.HttpBody, error)
	CreateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error)
	GetBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error)
	GetBootstrapAgents(context.Context, *GetBootstrapAgentsRequest) (*sentry.BootstrapAgentList, error)
	DeleteBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*DeleteBootstrapAgentResponse, error)
	UpdateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error)
}

// UnimplementedBootstrapServer should be embedded to have forward compatible implementations.
type UnimplementedBootstrapServer struct {
}

func (UnimplementedBootstrapServer) PatchBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBootstrapInfra not implemented")
}
func (UnimplementedBootstrapServer) GetBootstrapInfra(context.Context, *sentry.BootstrapInfra) (*sentry.BootstrapInfra, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapInfra not implemented")
}
func (UnimplementedBootstrapServer) PatchBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBootstrapAgentTemplate not implemented")
}
func (UnimplementedBootstrapServer) GetBootstrapAgentTemplate(context.Context, *sentry.BootstrapAgentTemplate) (*sentry.BootstrapAgentTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgentTemplate not implemented")
}
func (UnimplementedBootstrapServer) GetBootstrapAgentTemplates(context.Context, *v3.QueryOptions) (*sentry.BootstrapAgentTemplateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgentTemplates not implemented")
}
func (UnimplementedBootstrapServer) RegisterBootstrapAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServer) GetBootstrapAgentConfig(context.Context, *sentry.BootstrapAgent) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgentConfig not implemented")
}
func (UnimplementedBootstrapServer) CreateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServer) GetBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServer) GetBootstrapAgents(context.Context, *GetBootstrapAgentsRequest) (*sentry.BootstrapAgentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapAgents not implemented")
}
func (UnimplementedBootstrapServer) DeleteBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*DeleteBootstrapAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBootstrapAgent not implemented")
}
func (UnimplementedBootstrapServer) UpdateBootstrapAgent(context.Context, *sentry.BootstrapAgent) (*sentry.BootstrapAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBootstrapAgent not implemented")
}

// UnsafeBootstrapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServer will
// result in compilation errors.
type UnsafeBootstrapServer interface {
	mustEmbedUnimplementedBootstrapServer()
}

func RegisterBootstrapServer(s grpc.ServiceRegistrar, srv BootstrapServer) {
	s.RegisterService(&Bootstrap_ServiceDesc, srv)
}

func _Bootstrap_PatchBootstrapInfra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapInfra)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).PatchBootstrapInfra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/PatchBootstrapInfra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).PatchBootstrapInfra(ctx, req.(*sentry.BootstrapInfra))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_GetBootstrapInfra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapInfra)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).GetBootstrapInfra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapInfra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).GetBootstrapInfra(ctx, req.(*sentry.BootstrapInfra))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_PatchBootstrapAgentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgentTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).PatchBootstrapAgentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/PatchBootstrapAgentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).PatchBootstrapAgentTemplate(ctx, req.(*sentry.BootstrapAgentTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_GetBootstrapAgentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgentTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).GetBootstrapAgentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).GetBootstrapAgentTemplate(ctx, req.(*sentry.BootstrapAgentTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_GetBootstrapAgentTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.QueryOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).GetBootstrapAgentTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgentTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).GetBootstrapAgentTemplates(ctx, req.(*v3.QueryOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_RegisterBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).RegisterBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/RegisterBootstrapAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).RegisterBootstrapAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_GetBootstrapAgentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).GetBootstrapAgentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).GetBootstrapAgentConfig(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_CreateBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).CreateBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/CreateBootstrapAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).CreateBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_GetBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).GetBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).GetBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_GetBootstrapAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBootstrapAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).GetBootstrapAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/GetBootstrapAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).GetBootstrapAgents(ctx, req.(*GetBootstrapAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_DeleteBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).DeleteBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/DeleteBootstrapAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).DeleteBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrap_UpdateBootstrapAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sentry.BootstrapAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).UpdateBootstrapAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.Bootstrap/UpdateBootstrapAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).UpdateBootstrapAgent(ctx, req.(*sentry.BootstrapAgent))
	}
	return interceptor(ctx, in, info, handler)
}

// Bootstrap_ServiceDesc is the grpc.ServiceDesc for Bootstrap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bootstrap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rafay.dev.sentry.rpc.Bootstrap",
	HandlerType: (*BootstrapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PatchBootstrapInfra",
			Handler:    _Bootstrap_PatchBootstrapInfra_Handler,
		},
		{
			MethodName: "GetBootstrapInfra",
			Handler:    _Bootstrap_GetBootstrapInfra_Handler,
		},
		{
			MethodName: "PatchBootstrapAgentTemplate",
			Handler:    _Bootstrap_PatchBootstrapAgentTemplate_Handler,
		},
		{
			MethodName: "GetBootstrapAgentTemplate",
			Handler:    _Bootstrap_GetBootstrapAgentTemplate_Handler,
		},
		{
			MethodName: "GetBootstrapAgentTemplates",
			Handler:    _Bootstrap_GetBootstrapAgentTemplates_Handler,
		},
		{
			MethodName: "RegisterBootstrapAgent",
			Handler:    _Bootstrap_RegisterBootstrapAgent_Handler,
		},
		{
			MethodName: "GetBootstrapAgentConfig",
			Handler:    _Bootstrap_GetBootstrapAgentConfig_Handler,
		},
		{
			MethodName: "CreateBootstrapAgent",
			Handler:    _Bootstrap_CreateBootstrapAgent_Handler,
		},
		{
			MethodName: "GetBootstrapAgent",
			Handler:    _Bootstrap_GetBootstrapAgent_Handler,
		},
		{
			MethodName: "GetBootstrapAgents",
			Handler:    _Bootstrap_GetBootstrapAgents_Handler,
		},
		{
			MethodName: "DeleteBootstrapAgent",
			Handler:    _Bootstrap_DeleteBootstrapAgent_Handler,
		},
		{
			MethodName: "UpdateBootstrapAgent",
			Handler:    _Bootstrap_UpdateBootstrapAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/sentry/bootstrap.proto",
}
