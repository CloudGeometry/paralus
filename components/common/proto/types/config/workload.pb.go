// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: proto/types/config/workload.proto

package config

import (
	v3 "github.com/RafaySystems/rcloud-base/components/common/proto/types/commonpb/v3"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeploymentPlanType int32

const (
	DeploymentPlanType_DeploymentPlanNotSet     DeploymentPlanType = 0
	DeploymentPlanType_ParallelDeploymentPlan   DeploymentPlanType = 1
	DeploymentPlanType_CanaryDeploymentPlan     DeploymentPlanType = 2
	DeploymentPlanType_BlueGreenDeploymentPlan  DeploymentPlanType = 3
	DeploymentPlanType_DependencyDeploymentPlan DeploymentPlanType = 4
)

// Enum value maps for DeploymentPlanType.
var (
	DeploymentPlanType_name = map[int32]string{
		0: "DeploymentPlanNotSet",
		1: "ParallelDeploymentPlan",
		2: "CanaryDeploymentPlan",
		3: "BlueGreenDeploymentPlan",
		4: "DependencyDeploymentPlan",
	}
	DeploymentPlanType_value = map[string]int32{
		"DeploymentPlanNotSet":     0,
		"ParallelDeploymentPlan":   1,
		"CanaryDeploymentPlan":     2,
		"BlueGreenDeploymentPlan":  3,
		"DependencyDeploymentPlan": 4,
	}
)

func (x DeploymentPlanType) Enum() *DeploymentPlanType {
	p := new(DeploymentPlanType)
	*p = x
	return p
}

func (x DeploymentPlanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentPlanType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_workload_proto_enumTypes[0].Descriptor()
}

func (DeploymentPlanType) Type() protoreflect.EnumType {
	return &file_proto_types_config_workload_proto_enumTypes[0]
}

func (x DeploymentPlanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentPlanType.Descriptor instead.
func (DeploymentPlanType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{0}
}

type WorkloadSnapshotType int32

const (
	WorkloadSnapshotType_WorkloadSnapshotTypeNotSet WorkloadSnapshotType = 0
	WorkloadSnapshotType_RafayWizardWorkloadJSON    WorkloadSnapshotType = 1
	WorkloadSnapshotType_ZipArchive                 WorkloadSnapshotType = 2
)

// Enum value maps for WorkloadSnapshotType.
var (
	WorkloadSnapshotType_name = map[int32]string{
		0: "WorkloadSnapshotTypeNotSet",
		1: "RafayWizardWorkloadJSON",
		2: "ZipArchive",
	}
	WorkloadSnapshotType_value = map[string]int32{
		"WorkloadSnapshotTypeNotSet": 0,
		"RafayWizardWorkloadJSON":    1,
		"ZipArchive":                 2,
	}
)

func (x WorkloadSnapshotType) Enum() *WorkloadSnapshotType {
	p := new(WorkloadSnapshotType)
	*p = x
	return p
}

func (x WorkloadSnapshotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadSnapshotType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_workload_proto_enumTypes[1].Descriptor()
}

func (WorkloadSnapshotType) Type() protoreflect.EnumType {
	return &file_proto_types_config_workload_proto_enumTypes[1]
}

func (x WorkloadSnapshotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadSnapshotType.Descriptor instead.
func (WorkloadSnapshotType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{1}
}

// WorkloadSnapshotConditionType is the condition type of workload
// snapshot condition
type WorkloadSnapshotConditionType int32

const (
	WorkloadSnapshotConditionType_WorkloadSnapshotValidate           WorkloadSnapshotConditionType = 0
	WorkloadSnapshotConditionType_WorkloadSnapshotSchedule           WorkloadSnapshotConditionType = 1
	WorkloadSnapshotConditionType_WorkloadSnapshotUnschedule         WorkloadSnapshotConditionType = 2
	WorkloadSnapshotConditionType_WorkloadSnapshotClusterDeployed    WorkloadSnapshotConditionType = 3
	WorkloadSnapshotConditionType_WorkloadSnapshotClusterReady       WorkloadSnapshotConditionType = 4
	WorkloadSnapshotConditionType_WorkloadSnapshotClusterDrifted     WorkloadSnapshotConditionType = 5
	WorkloadSnapshotConditionType_WorkloadSnapshotUpdateRepoArtifact WorkloadSnapshotConditionType = 6
)

// Enum value maps for WorkloadSnapshotConditionType.
var (
	WorkloadSnapshotConditionType_name = map[int32]string{
		0: "WorkloadSnapshotValidate",
		1: "WorkloadSnapshotSchedule",
		2: "WorkloadSnapshotUnschedule",
		3: "WorkloadSnapshotClusterDeployed",
		4: "WorkloadSnapshotClusterReady",
		5: "WorkloadSnapshotClusterDrifted",
		6: "WorkloadSnapshotUpdateRepoArtifact",
	}
	WorkloadSnapshotConditionType_value = map[string]int32{
		"WorkloadSnapshotValidate":           0,
		"WorkloadSnapshotSchedule":           1,
		"WorkloadSnapshotUnschedule":         2,
		"WorkloadSnapshotClusterDeployed":    3,
		"WorkloadSnapshotClusterReady":       4,
		"WorkloadSnapshotClusterDrifted":     5,
		"WorkloadSnapshotUpdateRepoArtifact": 6,
	}
)

func (x WorkloadSnapshotConditionType) Enum() *WorkloadSnapshotConditionType {
	p := new(WorkloadSnapshotConditionType)
	*p = x
	return p
}

func (x WorkloadSnapshotConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadSnapshotConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_workload_proto_enumTypes[2].Descriptor()
}

func (WorkloadSnapshotConditionType) Type() protoreflect.EnumType {
	return &file_proto_types_config_workload_proto_enumTypes[2]
}

func (x WorkloadSnapshotConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadSnapshotConditionType.Descriptor instead.
func (WorkloadSnapshotConditionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{2}
}

type ParallelPlanSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxParallel int32 `protobuf:"zigzag32,1,opt,name=maxParallel,proto3" json:"maxParallel,omitempty"`
}

func (x *ParallelPlanSpec) Reset() {
	*x = ParallelPlanSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelPlanSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelPlanSpec) ProtoMessage() {}

func (x *ParallelPlanSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelPlanSpec.ProtoReflect.Descriptor instead.
func (*ParallelPlanSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{0}
}

func (x *ParallelPlanSpec) GetMaxParallel() int32 {
	if x != nil {
		return x.MaxParallel
	}
	return 0
}

type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependent    string   `protobuf:"bytes,1,opt,name=dependent,proto3" json:"dependent,omitempty"`
	Dependencies []string `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{1}
}

func (x *Dependency) GetDependent() string {
	if x != nil {
		return x.Dependent
	}
	return ""
}

func (x *Dependency) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type DependencyPlanSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxParallel  int32         `protobuf:"zigzag32,1,opt,name=maxParallel,proto3" json:"maxParallel,omitempty"`
	Dependencies []*Dependency `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *DependencyPlanSpec) Reset() {
	*x = DependencyPlanSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyPlanSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyPlanSpec) ProtoMessage() {}

func (x *DependencyPlanSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyPlanSpec.ProtoReflect.Descriptor instead.
func (*DependencyPlanSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{2}
}

func (x *DependencyPlanSpec) GetMaxParallel() int32 {
	if x != nil {
		return x.MaxParallel
	}
	return 0
}

func (x *DependencyPlanSpec) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type CanaryPlanSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CanaryPlanSpec) Reset() {
	*x = CanaryPlanSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanaryPlanSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanaryPlanSpec) ProtoMessage() {}

func (x *CanaryPlanSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanaryPlanSpec.ProtoReflect.Descriptor instead.
func (*CanaryPlanSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{3}
}

type BlueGreenPlanSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlueGreenPlanSpec) Reset() {
	*x = BlueGreenPlanSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlueGreenPlanSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueGreenPlanSpec) ProtoMessage() {}

func (x *BlueGreenPlanSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueGreenPlanSpec.ProtoReflect.Descriptor instead.
func (*BlueGreenPlanSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{4}
}

type DeploymentPlanSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanType       DeploymentPlanType  `protobuf:"varint,1,opt,name=planType,proto3,enum=rafay.dev.types.config.DeploymentPlanType" json:"planType,omitempty"`
	ParallelSpec   *ParallelPlanSpec   `protobuf:"bytes,2,opt,name=parallelSpec,proto3" json:"parallelSpec,omitempty"`
	CanarySpec     *CanaryPlanSpec     `protobuf:"bytes,3,opt,name=canarySpec,proto3" json:"canarySpec,omitempty"`
	BlueGreenSpec  *BlueGreenPlanSpec  `protobuf:"bytes,4,opt,name=blueGreenSpec,proto3" json:"blueGreenSpec,omitempty"`
	DependencySpec *DependencyPlanSpec `protobuf:"bytes,5,opt,name=dependencySpec,proto3" json:"dependencySpec,omitempty"`
}

func (x *DeploymentPlanSpec) Reset() {
	*x = DeploymentPlanSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentPlanSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPlanSpec) ProtoMessage() {}

func (x *DeploymentPlanSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPlanSpec.ProtoReflect.Descriptor instead.
func (*DeploymentPlanSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{5}
}

func (x *DeploymentPlanSpec) GetPlanType() DeploymentPlanType {
	if x != nil {
		return x.PlanType
	}
	return DeploymentPlanType_DeploymentPlanNotSet
}

func (x *DeploymentPlanSpec) GetParallelSpec() *ParallelPlanSpec {
	if x != nil {
		return x.ParallelSpec
	}
	return nil
}

func (x *DeploymentPlanSpec) GetCanarySpec() *CanaryPlanSpec {
	if x != nil {
		return x.CanarySpec
	}
	return nil
}

func (x *DeploymentPlanSpec) GetBlueGreenSpec() *BlueGreenPlanSpec {
	if x != nil {
		return x.BlueGreenSpec
	}
	return nil
}

func (x *DeploymentPlanSpec) GetDependencySpec() *DependencyPlanSpec {
	if x != nil {
		return x.DependencySpec
	}
	return nil
}

type Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string          `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string          `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.Metadata    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *WorkloadSpec   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *WorkloadStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Workload) Reset() {
	*x = Workload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workload) ProtoMessage() {}

func (x *Workload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workload.ProtoReflect.Descriptor instead.
func (*Workload) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{6}
}

func (x *Workload) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Workload) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Workload) GetMetadata() *v3.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Workload) GetSpec() *WorkloadSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Workload) GetStatus() *WorkloadStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type WorkloadSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace           string              `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Placement           *PlacementSpec      `protobuf:"bytes,2,opt,name=placement,proto3" json:"placement,omitempty"`
	DeploymentPlan      *DeploymentPlanSpec `protobuf:"bytes,3,opt,name=deploymentPlan,proto3" json:"deploymentPlan,omitempty"`
	ArtifactType        ArtifactType        `protobuf:"varint,4,opt,name=artifactType,proto3,enum=rafay.dev.types.config.ArtifactType" json:"artifactType,omitempty"`
	ArtifactFiles       []*File             `protobuf:"bytes,5,rep,name=artifactFiles,proto3" json:"artifactFiles,omitempty"`
	Extra               *ArtifactExtra      `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	RepositoryRef       string              `protobuf:"bytes,7,opt,name=repositoryRef,proto3" json:"repositoryRef,omitempty"`
	TemplateID          string              `protobuf:"bytes,8,opt,name=templateID,proto3" json:"templateID,omitempty"`
	ShareMode           ShareMode           `protobuf:"varint,9,opt,name=shareMode,proto3,enum=rafay.dev.types.config.ShareMode" json:"shareMode,omitempty"`
	ValueRepositoryRef  string              `protobuf:"bytes,10,opt,name=valueRepositoryRef,proto3" json:"valueRepositoryRef,omitempty"`
	AdditionalReference *RepoArtifactMeta   `protobuf:"bytes,11,opt,name=additionalReference,proto3" json:"additionalReference,omitempty"`
}

func (x *WorkloadSpec) Reset() {
	*x = WorkloadSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSpec) ProtoMessage() {}

func (x *WorkloadSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSpec.ProtoReflect.Descriptor instead.
func (*WorkloadSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{7}
}

func (x *WorkloadSpec) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkloadSpec) GetPlacement() *PlacementSpec {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *WorkloadSpec) GetDeploymentPlan() *DeploymentPlanSpec {
	if x != nil {
		return x.DeploymentPlan
	}
	return nil
}

func (x *WorkloadSpec) GetArtifactType() ArtifactType {
	if x != nil {
		return x.ArtifactType
	}
	return ArtifactType_ArtifactTypeNotSet
}

func (x *WorkloadSpec) GetArtifactFiles() []*File {
	if x != nil {
		return x.ArtifactFiles
	}
	return nil
}

func (x *WorkloadSpec) GetExtra() *ArtifactExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *WorkloadSpec) GetRepositoryRef() string {
	if x != nil {
		return x.RepositoryRef
	}
	return ""
}

func (x *WorkloadSpec) GetTemplateID() string {
	if x != nil {
		return x.TemplateID
	}
	return ""
}

func (x *WorkloadSpec) GetShareMode() ShareMode {
	if x != nil {
		return x.ShareMode
	}
	return ShareMode_ShareModeNotSet
}

func (x *WorkloadSpec) GetValueRepositoryRef() string {
	if x != nil {
		return x.ValueRepositoryRef
	}
	return ""
}

func (x *WorkloadSpec) GetAdditionalReference() *RepoArtifactMeta {
	if x != nil {
		return x.AdditionalReference
	}
	return nil
}

type ProjectWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadID string `protobuf:"bytes,1,opt,name=workloadID,proto3" json:"workloadID,omitempty"`
	ProjectID  string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ProjectWorkload) Reset() {
	*x = ProjectWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectWorkload) ProtoMessage() {}

func (x *ProjectWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectWorkload.ProtoReflect.Descriptor instead.
func (*ProjectWorkload) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{8}
}

func (x *ProjectWorkload) GetWorkloadID() string {
	if x != nil {
		return x.WorkloadID
	}
	return ""
}

func (x *ProjectWorkload) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type WorkloadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadID            string             `protobuf:"bytes,1,opt,name=workloadID,proto3" json:"workloadID,omitempty"`
	PublishPending        bool               `protobuf:"varint,2,opt,name=publishPending,proto3" json:"publishPending,omitempty"`
	LastPublishedRevision int64              `protobuf:"zigzag64,3,opt,name=lastPublishedRevision,proto3" json:"lastPublishedRevision,omitempty"`
	Projects              []*ProjectWorkload `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *WorkloadStatus) Reset() {
	*x = WorkloadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadStatus) ProtoMessage() {}

func (x *WorkloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadStatus.ProtoReflect.Descriptor instead.
func (*WorkloadStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{9}
}

func (x *WorkloadStatus) GetWorkloadID() string {
	if x != nil {
		return x.WorkloadID
	}
	return ""
}

func (x *WorkloadStatus) GetPublishPending() bool {
	if x != nil {
		return x.PublishPending
	}
	return false
}

func (x *WorkloadStatus) GetLastPublishedRevision() int64 {
	if x != nil {
		return x.LastPublishedRevision
	}
	return 0
}

func (x *WorkloadStatus) GetProjects() []*ProjectWorkload {
	if x != nil {
		return x.Projects
	}
	return nil
}

// WorkloadList is a list of Workloads
type WorkloadList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string           `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string           `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.ListMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Items      []*Workload      `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *WorkloadList) Reset() {
	*x = WorkloadList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadList) ProtoMessage() {}

func (x *WorkloadList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadList.ProtoReflect.Descriptor instead.
func (*WorkloadList) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{10}
}

func (x *WorkloadList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *WorkloadList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkloadList) GetMetadata() *v3.ListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkloadList) GetItems() []*Workload {
	if x != nil {
		return x.Items
	}
	return nil
}

// WorkloadSnapshotCondition is the condition of workload snapshot
type WorkloadSnapshotCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        WorkloadSnapshotConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=rafay.dev.types.config.WorkloadSnapshotConditionType" json:"type,omitempty"`
	Status      *v3.Status                    `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	LastUpdated *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	Reason      string                        `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *WorkloadSnapshotCondition) Reset() {
	*x = WorkloadSnapshotCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSnapshotCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSnapshotCondition) ProtoMessage() {}

func (x *WorkloadSnapshotCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSnapshotCondition.ProtoReflect.Descriptor instead.
func (*WorkloadSnapshotCondition) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{11}
}

func (x *WorkloadSnapshotCondition) GetType() WorkloadSnapshotConditionType {
	if x != nil {
		return x.Type
	}
	return WorkloadSnapshotConditionType_WorkloadSnapshotValidate
}

func (x *WorkloadSnapshotCondition) GetStatus() *v3.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkloadSnapshotCondition) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *WorkloadSnapshotCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type WorkloadSnapshotAuthMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID int64  `protobuf:"zigzag64,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	IsSSOUser bool   `protobuf:"varint,2,opt,name=isSSOUser,proto3" json:"isSSOUser,omitempty"`
	UserName  string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *WorkloadSnapshotAuthMeta) Reset() {
	*x = WorkloadSnapshotAuthMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSnapshotAuthMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSnapshotAuthMeta) ProtoMessage() {}

func (x *WorkloadSnapshotAuthMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSnapshotAuthMeta.ProtoReflect.Descriptor instead.
func (*WorkloadSnapshotAuthMeta) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{12}
}

func (x *WorkloadSnapshotAuthMeta) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *WorkloadSnapshotAuthMeta) GetIsSSOUser() bool {
	if x != nil {
		return x.IsSSOUser
	}
	return false
}

func (x *WorkloadSnapshotAuthMeta) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type WorkloadSnapshotSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace           string                    `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Placement           *PlacementSpec            `protobuf:"bytes,2,opt,name=placement,proto3" json:"placement,omitempty"`
	DeploymentPlan      *DeploymentPlanSpec       `protobuf:"bytes,3,opt,name=deploymentPlan,proto3" json:"deploymentPlan,omitempty"`
	ArtifactType        ArtifactType              `protobuf:"varint,4,opt,name=artifactType,proto3,enum=rafay.dev.types.config.ArtifactType" json:"artifactType,omitempty"`
	SnapshotType        WorkloadSnapshotType      `protobuf:"varint,5,opt,name=snapshotType,proto3,enum=rafay.dev.types.config.WorkloadSnapshotType" json:"snapshotType,omitempty"`
	Snapshot            []byte                    `protobuf:"bytes,6,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	SnapshotFiles       []*FileMeta               `protobuf:"bytes,7,rep,name=snapshotFiles,proto3" json:"snapshotFiles,omitempty"`
	Extra               *ArtifactExtra            `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	AuthMeta            *WorkloadSnapshotAuthMeta `protobuf:"bytes,9,opt,name=authMeta,proto3" json:"authMeta,omitempty"`
	WorkloadName        string                    `protobuf:"bytes,10,opt,name=workloadName,proto3" json:"workloadName,omitempty"`
	RepositoryRef       string                    `protobuf:"bytes,11,opt,name=repositoryRef,proto3" json:"repositoryRef,omitempty"`
	ValueRepositoryRef  string                    `protobuf:"bytes,12,opt,name=valueRepositoryRef,proto3" json:"valueRepositoryRef,omitempty"`
	AdditionalReference *RepoArtifactMeta         `protobuf:"bytes,13,opt,name=additionalReference,proto3" json:"additionalReference,omitempty"`
}

func (x *WorkloadSnapshotSpec) Reset() {
	*x = WorkloadSnapshotSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSnapshotSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSnapshotSpec) ProtoMessage() {}

func (x *WorkloadSnapshotSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSnapshotSpec.ProtoReflect.Descriptor instead.
func (*WorkloadSnapshotSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{13}
}

func (x *WorkloadSnapshotSpec) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkloadSnapshotSpec) GetPlacement() *PlacementSpec {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *WorkloadSnapshotSpec) GetDeploymentPlan() *DeploymentPlanSpec {
	if x != nil {
		return x.DeploymentPlan
	}
	return nil
}

func (x *WorkloadSnapshotSpec) GetArtifactType() ArtifactType {
	if x != nil {
		return x.ArtifactType
	}
	return ArtifactType_ArtifactTypeNotSet
}

func (x *WorkloadSnapshotSpec) GetSnapshotType() WorkloadSnapshotType {
	if x != nil {
		return x.SnapshotType
	}
	return WorkloadSnapshotType_WorkloadSnapshotTypeNotSet
}

func (x *WorkloadSnapshotSpec) GetSnapshot() []byte {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *WorkloadSnapshotSpec) GetSnapshotFiles() []*FileMeta {
	if x != nil {
		return x.SnapshotFiles
	}
	return nil
}

func (x *WorkloadSnapshotSpec) GetExtra() *ArtifactExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *WorkloadSnapshotSpec) GetAuthMeta() *WorkloadSnapshotAuthMeta {
	if x != nil {
		return x.AuthMeta
	}
	return nil
}

func (x *WorkloadSnapshotSpec) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *WorkloadSnapshotSpec) GetRepositoryRef() string {
	if x != nil {
		return x.RepositoryRef
	}
	return ""
}

func (x *WorkloadSnapshotSpec) GetValueRepositoryRef() string {
	if x != nil {
		return x.ValueRepositoryRef
	}
	return ""
}

func (x *WorkloadSnapshotSpec) GetAdditionalReference() *RepoArtifactMeta {
	if x != nil {
		return x.AdditionalReference
	}
	return nil
}

type WorkloadSnapshotStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision          int64                        `protobuf:"zigzag64,1,opt,name=revision,proto3" json:"revision,omitempty"`
	WorkloadID        string                       `protobuf:"bytes,2,opt,name=workloadID,proto3" json:"workloadID,omitempty"`
	Conditions        []*WorkloadSnapshotCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	AssignedClusters  []*ClusterMeta               `protobuf:"bytes,4,rep,name=assignedClusters,proto3" json:"assignedClusters,omitempty"`
	DeployedClusters  []*ClusterMeta               `protobuf:"bytes,5,rep,name=deployedClusters,proto3" json:"deployedClusters,omitempty"`
	FailedClusters    []*ClusterMeta               `protobuf:"bytes,6,rep,name=failedClusters,proto3" json:"failedClusters,omitempty"`
	ReadyClusters     []*ClusterMeta               `protobuf:"bytes,7,rep,name=readyClusters,proto3" json:"readyClusters,omitempty"`
	DriftedClusters   []*ClusterMeta               `protobuf:"bytes,8,rep,name=driftedClusters,proto3" json:"driftedClusters,omitempty"`
	RepoSourceVersion string                       `protobuf:"bytes,9,opt,name=repoSourceVersion,proto3" json:"repoSourceVersion,omitempty"`
}

func (x *WorkloadSnapshotStatus) Reset() {
	*x = WorkloadSnapshotStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSnapshotStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSnapshotStatus) ProtoMessage() {}

func (x *WorkloadSnapshotStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSnapshotStatus.ProtoReflect.Descriptor instead.
func (*WorkloadSnapshotStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{14}
}

func (x *WorkloadSnapshotStatus) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *WorkloadSnapshotStatus) GetWorkloadID() string {
	if x != nil {
		return x.WorkloadID
	}
	return ""
}

func (x *WorkloadSnapshotStatus) GetConditions() []*WorkloadSnapshotCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *WorkloadSnapshotStatus) GetAssignedClusters() []*ClusterMeta {
	if x != nil {
		return x.AssignedClusters
	}
	return nil
}

func (x *WorkloadSnapshotStatus) GetDeployedClusters() []*ClusterMeta {
	if x != nil {
		return x.DeployedClusters
	}
	return nil
}

func (x *WorkloadSnapshotStatus) GetFailedClusters() []*ClusterMeta {
	if x != nil {
		return x.FailedClusters
	}
	return nil
}

func (x *WorkloadSnapshotStatus) GetReadyClusters() []*ClusterMeta {
	if x != nil {
		return x.ReadyClusters
	}
	return nil
}

func (x *WorkloadSnapshotStatus) GetDriftedClusters() []*ClusterMeta {
	if x != nil {
		return x.DriftedClusters
	}
	return nil
}

func (x *WorkloadSnapshotStatus) GetRepoSourceVersion() string {
	if x != nil {
		return x.RepoSourceVersion
	}
	return ""
}

type WorkloadSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string                  `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string                  `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.Metadata            `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *WorkloadSnapshotSpec   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *WorkloadSnapshotStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *WorkloadSnapshot) Reset() {
	*x = WorkloadSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSnapshot) ProtoMessage() {}

func (x *WorkloadSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSnapshot.ProtoReflect.Descriptor instead.
func (*WorkloadSnapshot) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{15}
}

func (x *WorkloadSnapshot) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *WorkloadSnapshot) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkloadSnapshot) GetMetadata() *v3.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkloadSnapshot) GetSpec() *WorkloadSnapshotSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *WorkloadSnapshot) GetStatus() *WorkloadSnapshotStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type WorkloadSnapshotList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string              `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string              `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.ListMetadata    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Items      []*WorkloadSnapshot `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *WorkloadSnapshotList) Reset() {
	*x = WorkloadSnapshotList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSnapshotList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSnapshotList) ProtoMessage() {}

func (x *WorkloadSnapshotList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSnapshotList.ProtoReflect.Descriptor instead.
func (*WorkloadSnapshotList) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{16}
}

func (x *WorkloadSnapshotList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *WorkloadSnapshotList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkloadSnapshotList) GetMetadata() *v3.ListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkloadSnapshotList) GetItems() []*WorkloadSnapshot {
	if x != nil {
		return x.Items
	}
	return nil
}

type WorkloadTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactType  ArtifactType   `protobuf:"varint,1,opt,name=artifactType,proto3,enum=rafay.dev.types.config.ArtifactType" json:"artifactType,omitempty"`
	ArtifactFiles []*File        `protobuf:"bytes,2,rep,name=artifactFiles,proto3" json:"artifactFiles,omitempty"`
	Extra         *ArtifactExtra `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	RepositoryRef string         `protobuf:"bytes,4,opt,name=repositoryRef,proto3" json:"repositoryRef,omitempty"`
}

func (x *WorkloadTemplateSpec) Reset() {
	*x = WorkloadTemplateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadTemplateSpec) ProtoMessage() {}

func (x *WorkloadTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadTemplateSpec.ProtoReflect.Descriptor instead.
func (*WorkloadTemplateSpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{17}
}

func (x *WorkloadTemplateSpec) GetArtifactType() ArtifactType {
	if x != nil {
		return x.ArtifactType
	}
	return ArtifactType_ArtifactTypeNotSet
}

func (x *WorkloadTemplateSpec) GetArtifactFiles() []*File {
	if x != nil {
		return x.ArtifactFiles
	}
	return nil
}

func (x *WorkloadTemplateSpec) GetExtra() *ArtifactExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *WorkloadTemplateSpec) GetRepositoryRef() string {
	if x != nil {
		return x.RepositoryRef
	}
	return ""
}

type WorkloadTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string                `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.Metadata          `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *WorkloadTemplateSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *WorkloadTemplate) Reset() {
	*x = WorkloadTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadTemplate) ProtoMessage() {}

func (x *WorkloadTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadTemplate.ProtoReflect.Descriptor instead.
func (*WorkloadTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{18}
}

func (x *WorkloadTemplate) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *WorkloadTemplate) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkloadTemplate) GetMetadata() *v3.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkloadTemplate) GetSpec() *WorkloadTemplateSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type WorkloadTemplateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string              `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string              `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.ListMetadata    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Items      []*WorkloadTemplate `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *WorkloadTemplateList) Reset() {
	*x = WorkloadTemplateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_workload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadTemplateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadTemplateList) ProtoMessage() {}

func (x *WorkloadTemplateList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_workload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadTemplateList.ProtoReflect.Descriptor instead.
func (*WorkloadTemplateList) Descriptor() ([]byte, []int) {
	return file_proto_types_config_workload_proto_rawDescGZIP(), []int{19}
}

func (x *WorkloadTemplateList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *WorkloadTemplateList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkloadTemplateList) GetMetadata() *v3.ListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkloadTemplateList) GetItems() []*WorkloadTemplate {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_proto_types_config_workload_proto protoreflect.FileDescriptor

var file_proto_types_config_workload_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a,
	0x10, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x22, 0x4e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x07,
	0x2c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x22, 0x13, 0x0a, 0x11, 0x42, 0x6c, 0x75, 0x65, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x22, 0xa5, 0x03, 0x0a,
	0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x54, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x4f, 0x0a, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x52, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x22, 0xeb, 0x03, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x65, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x0b, 0x41, 0x50, 0x49, 0x20,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x1b, 0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x38, 0x73,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x33, 0x40, 0x01, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x32, 0x14, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x40, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x18, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f,
	0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x3f, 0x92, 0x41, 0x3c, 0x0a, 0x3a, 0x2a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x32, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0xd2, 0x01, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0xd2, 0x01, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0xc4, 0x07, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0xf2, 0xde, 0x1f, 0x0e, 0x70, 0x67, 0x3a, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x16, 0xc8, 0xde,
	0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x0e, 0x70, 0x67, 0x3a, 0x22, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x70, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x42, 0x1c, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x14, 0x70, 0x67, 0x3a,
	0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x22, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x79, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2f, 0xea,
	0xde, 0x1f, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0xf2,
	0xde, 0x1f, 0x1b, 0x70, 0x67, 0x3a, 0x22, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0c,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0d,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x0a, 0xf2, 0xde, 0x1f, 0x06, 0x70, 0x67, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x0d, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x42, 0x12, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x0a, 0x70, 0x67, 0x3a, 0x22,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3d, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x70, 0x67, 0x3a, 0x22, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x5d, 0x0a, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x70, 0x67, 0x3a, 0x22, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x70, 0x67, 0x3a,
	0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x7d, 0x0a, 0x13, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x21, 0xc8, 0xde, 0x1f, 0x01, 0xf2, 0xde, 0x1f, 0x19, 0x70, 0x67, 0x3a, 0x22, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xf2, 0xde, 0x1f, 0x07, 0x70, 0x67, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x21, 0xf2, 0xde, 0x1f, 0x1d, 0x70, 0x67, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2c, 0x75, 0x73, 0x65, 0x5f,
	0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x12, 0x42, 0x29, 0xf2, 0xde, 0x1f, 0x25, 0x70, 0x67, 0x3a, 0x22, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x29, 0x92, 0x41, 0x02, 0x40, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x12,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0xf2, 0xde, 0x1f, 0x06, 0x70, 0x67, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47,
	0x2a, 0x0b, 0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a,
	0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x33, 0x40, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x32, 0x19, 0x4b, 0x69,
	0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x40, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x77, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x40, 0x01, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb2,
	0x02, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x53, 0x53, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x53, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x09, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0xf2, 0xde, 0x1f, 0x0e, 0x70, 0x67, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x5b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x16, 0xc8, 0xde, 0x1f, 0x00, 0xf2,
	0xde, 0x1f, 0x0e, 0x70, 0x67, 0x3a, 0x22, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x0e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x1c, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x14, 0x70, 0x67, 0x3a, 0x22, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x52, 0x0e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x79,
	0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2f, 0xea, 0xde, 0x1f, 0x0c,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0xf2, 0xde, 0x1f, 0x1b,
	0x70, 0x67, 0x3a, 0x22, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0c, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x16, 0xf2,
	0xde, 0x1f, 0x12, 0x70, 0x67, 0x3a, 0x22, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x01, 0x2d, 0xf2, 0xde, 0x1f, 0x0d,
	0x70, 0x67, 0x3a, 0x22, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x52, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x63, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x70, 0x67, 0x3a, 0x22, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x52, 0x0d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x42, 0x12, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x0a, 0x70, 0x67, 0x3a, 0x22,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x64, 0x0a,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x16, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x0e, 0x70, 0x67, 0x3a, 0x22, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x12, 0x70,
	0x67, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x70, 0x67, 0x3a, 0x22,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x4d,
	0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19,
	0x70, 0x67, 0x3a, 0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x7d, 0x0a,
	0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x42, 0x21, 0xc8, 0xde, 0x1f, 0x01, 0xf2, 0xde, 0x1f, 0x19, 0x70, 0x67,
	0x3a, 0x22, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xdf, 0x09, 0x0a,
	0x16, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x70,
	0x67, 0x3a, 0x22, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10,
	0x70, 0x67, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x22,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0xad, 0x01, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x5a, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x14, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0xf2, 0xde, 0x1f, 0x3a, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x20, 0x70, 0x67, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa8, 0x01, 0x0a,
	0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x57, 0xc8, 0xde,
	0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x4f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x20, 0x70, 0x67, 0x3a, 0x22, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f,
	0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x57, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f,
	0x4f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x20, 0x70, 0x67, 0x3a, 0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0x55, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x4d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x20, 0x70, 0x67, 0x3a, 0x22, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x75, 0x73,
	0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x42, 0x54, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x4c, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x3a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x20, 0x70, 0x67,
	0x3a, 0x22, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x64, 0x72,
	0x69, 0x66, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x56, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde,
	0x1f, 0x4e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a,
	0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x20, 0x70, 0x67, 0x3a, 0x22, 0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22,
	0x52, 0x0f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x6b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xf2, 0xde,
	0x1f, 0x39, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a,
	0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x20, 0x70, 0x67, 0x3a, 0x22, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9b,
	0x04, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x65, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x0b, 0x41, 0x50,
	0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x1b, 0x41, 0x50, 0x49, 0x20, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b,
	0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x33, 0x40, 0x01, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x32, 0x14, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x40, 0x01, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0xd0,
	0xde, 0x1f, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x61, 0x66, 0x61,
	0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0xd0,
	0xde, 0x1f, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x4f, 0x92, 0x41, 0x4c,
	0x0a, 0x4a, 0x2a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x32, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0xd2, 0x01, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0xd2, 0x01, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8d, 0x03, 0x0a,
	0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x0b,
	0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f,
	0x2f, 0x76, 0x33, 0x40, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3c, 0x92, 0x41, 0x39, 0x2a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x32, 0x19, 0x4b, 0x69, 0x6e, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x40, 0x01, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x2a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x1d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x40, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf1, 0x02, 0x0a,
	0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x79, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x2f, 0xea, 0xde, 0x1f, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0xf2, 0xde, 0x1f, 0x1b, 0x70, 0x67, 0x3a, 0x22, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72,
	0x6f, 0x22, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x0a, 0xf2, 0xde, 0x1f, 0x06, 0x70, 0x67, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x12, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x0a,
	0x70, 0x67, 0x3a, 0x22, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x70, 0x67,
	0x3a, 0x22, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66,
	0x22, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x22, 0xc9, 0x03, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x0b,
	0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x1b, 0x41, 0x50, 0x49,
	0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x6b, 0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x33, 0x40, 0x01,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x2a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x32, 0x14, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x10, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x40, 0x01, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x27, 0x92, 0x41,
	0x24, 0x2a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x4a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x3a, 0x4f, 0x92, 0x41, 0x4c,
	0x0a, 0x4a, 0x2a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x32, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0xd2, 0x01, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8d, 0x03, 0x0a,
	0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x0b,
	0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f,
	0x2f, 0x76, 0x33, 0x40, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3c, 0x92, 0x41, 0x39, 0x2a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x32, 0x19, 0x4b, 0x69, 0x6e, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x40, 0x01, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x2a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x1d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x40, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61,
	0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0xa5, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x61, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x10, 0x04, 0x1a, 0x04,
	0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x69, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x61, 0x66, 0x61, 0x79, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x69, 0x70,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x10, 0x02, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a,
	0x94, 0x02, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x23, 0x0a,
	0x1f, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x10, 0x06,
	0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xf1, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x72,
	0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x66, 0x61, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0xa2, 0x02, 0x04, 0x52, 0x44, 0x54, 0x43, 0xaa, 0x02, 0x16, 0x52, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0xca, 0x02, 0x16, 0x52, 0x61, 0x66, 0x61, 0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe2, 0x02, 0x22, 0x52, 0x61, 0x66, 0x61,
	0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x19, 0x52, 0x61, 0x66, 0x61, 0x79, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_types_config_workload_proto_rawDescOnce sync.Once
	file_proto_types_config_workload_proto_rawDescData = file_proto_types_config_workload_proto_rawDesc
)

func file_proto_types_config_workload_proto_rawDescGZIP() []byte {
	file_proto_types_config_workload_proto_rawDescOnce.Do(func() {
		file_proto_types_config_workload_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_config_workload_proto_rawDescData)
	})
	return file_proto_types_config_workload_proto_rawDescData
}

var file_proto_types_config_workload_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_types_config_workload_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_types_config_workload_proto_goTypes = []interface{}{
	(DeploymentPlanType)(0),            // 0: rafay.dev.types.config.DeploymentPlanType
	(WorkloadSnapshotType)(0),          // 1: rafay.dev.types.config.WorkloadSnapshotType
	(WorkloadSnapshotConditionType)(0), // 2: rafay.dev.types.config.WorkloadSnapshotConditionType
	(*ParallelPlanSpec)(nil),           // 3: rafay.dev.types.config.ParallelPlanSpec
	(*Dependency)(nil),                 // 4: rafay.dev.types.config.Dependency
	(*DependencyPlanSpec)(nil),         // 5: rafay.dev.types.config.DependencyPlanSpec
	(*CanaryPlanSpec)(nil),             // 6: rafay.dev.types.config.CanaryPlanSpec
	(*BlueGreenPlanSpec)(nil),          // 7: rafay.dev.types.config.BlueGreenPlanSpec
	(*DeploymentPlanSpec)(nil),         // 8: rafay.dev.types.config.DeploymentPlanSpec
	(*Workload)(nil),                   // 9: rafay.dev.types.config.Workload
	(*WorkloadSpec)(nil),               // 10: rafay.dev.types.config.WorkloadSpec
	(*ProjectWorkload)(nil),            // 11: rafay.dev.types.config.ProjectWorkload
	(*WorkloadStatus)(nil),             // 12: rafay.dev.types.config.WorkloadStatus
	(*WorkloadList)(nil),               // 13: rafay.dev.types.config.WorkloadList
	(*WorkloadSnapshotCondition)(nil),  // 14: rafay.dev.types.config.WorkloadSnapshotCondition
	(*WorkloadSnapshotAuthMeta)(nil),   // 15: rafay.dev.types.config.WorkloadSnapshotAuthMeta
	(*WorkloadSnapshotSpec)(nil),       // 16: rafay.dev.types.config.WorkloadSnapshotSpec
	(*WorkloadSnapshotStatus)(nil),     // 17: rafay.dev.types.config.WorkloadSnapshotStatus
	(*WorkloadSnapshot)(nil),           // 18: rafay.dev.types.config.WorkloadSnapshot
	(*WorkloadSnapshotList)(nil),       // 19: rafay.dev.types.config.WorkloadSnapshotList
	(*WorkloadTemplateSpec)(nil),       // 20: rafay.dev.types.config.WorkloadTemplateSpec
	(*WorkloadTemplate)(nil),           // 21: rafay.dev.types.config.WorkloadTemplate
	(*WorkloadTemplateList)(nil),       // 22: rafay.dev.types.config.WorkloadTemplateList
	(*v3.Metadata)(nil),                // 23: rafay.dev.types.common.v3.Metadata
	(*PlacementSpec)(nil),              // 24: rafay.dev.types.config.PlacementSpec
	(ArtifactType)(0),                  // 25: rafay.dev.types.config.ArtifactType
	(*File)(nil),                       // 26: rafay.dev.types.config.File
	(*ArtifactExtra)(nil),              // 27: rafay.dev.types.config.ArtifactExtra
	(ShareMode)(0),                     // 28: rafay.dev.types.config.ShareMode
	(*RepoArtifactMeta)(nil),           // 29: rafay.dev.types.config.RepoArtifactMeta
	(*v3.ListMetadata)(nil),            // 30: rafay.dev.types.common.v3.ListMetadata
	(*v3.Status)(nil),                  // 31: rafay.dev.types.common.v3.Status
	(*timestamppb.Timestamp)(nil),      // 32: google.protobuf.Timestamp
	(*FileMeta)(nil),                   // 33: rafay.dev.types.config.FileMeta
	(*ClusterMeta)(nil),                // 34: rafay.dev.types.config.ClusterMeta
}
var file_proto_types_config_workload_proto_depIdxs = []int32{
	4,  // 0: rafay.dev.types.config.DependencyPlanSpec.dependencies:type_name -> rafay.dev.types.config.Dependency
	0,  // 1: rafay.dev.types.config.DeploymentPlanSpec.planType:type_name -> rafay.dev.types.config.DeploymentPlanType
	3,  // 2: rafay.dev.types.config.DeploymentPlanSpec.parallelSpec:type_name -> rafay.dev.types.config.ParallelPlanSpec
	6,  // 3: rafay.dev.types.config.DeploymentPlanSpec.canarySpec:type_name -> rafay.dev.types.config.CanaryPlanSpec
	7,  // 4: rafay.dev.types.config.DeploymentPlanSpec.blueGreenSpec:type_name -> rafay.dev.types.config.BlueGreenPlanSpec
	5,  // 5: rafay.dev.types.config.DeploymentPlanSpec.dependencySpec:type_name -> rafay.dev.types.config.DependencyPlanSpec
	23, // 6: rafay.dev.types.config.Workload.metadata:type_name -> rafay.dev.types.common.v3.Metadata
	10, // 7: rafay.dev.types.config.Workload.spec:type_name -> rafay.dev.types.config.WorkloadSpec
	12, // 8: rafay.dev.types.config.Workload.status:type_name -> rafay.dev.types.config.WorkloadStatus
	24, // 9: rafay.dev.types.config.WorkloadSpec.placement:type_name -> rafay.dev.types.config.PlacementSpec
	8,  // 10: rafay.dev.types.config.WorkloadSpec.deploymentPlan:type_name -> rafay.dev.types.config.DeploymentPlanSpec
	25, // 11: rafay.dev.types.config.WorkloadSpec.artifactType:type_name -> rafay.dev.types.config.ArtifactType
	26, // 12: rafay.dev.types.config.WorkloadSpec.artifactFiles:type_name -> rafay.dev.types.config.File
	27, // 13: rafay.dev.types.config.WorkloadSpec.extra:type_name -> rafay.dev.types.config.ArtifactExtra
	28, // 14: rafay.dev.types.config.WorkloadSpec.shareMode:type_name -> rafay.dev.types.config.ShareMode
	29, // 15: rafay.dev.types.config.WorkloadSpec.additionalReference:type_name -> rafay.dev.types.config.RepoArtifactMeta
	11, // 16: rafay.dev.types.config.WorkloadStatus.projects:type_name -> rafay.dev.types.config.ProjectWorkload
	30, // 17: rafay.dev.types.config.WorkloadList.metadata:type_name -> rafay.dev.types.common.v3.ListMetadata
	9,  // 18: rafay.dev.types.config.WorkloadList.items:type_name -> rafay.dev.types.config.Workload
	2,  // 19: rafay.dev.types.config.WorkloadSnapshotCondition.type:type_name -> rafay.dev.types.config.WorkloadSnapshotConditionType
	31, // 20: rafay.dev.types.config.WorkloadSnapshotCondition.status:type_name -> rafay.dev.types.common.v3.Status
	32, // 21: rafay.dev.types.config.WorkloadSnapshotCondition.lastUpdated:type_name -> google.protobuf.Timestamp
	24, // 22: rafay.dev.types.config.WorkloadSnapshotSpec.placement:type_name -> rafay.dev.types.config.PlacementSpec
	8,  // 23: rafay.dev.types.config.WorkloadSnapshotSpec.deploymentPlan:type_name -> rafay.dev.types.config.DeploymentPlanSpec
	25, // 24: rafay.dev.types.config.WorkloadSnapshotSpec.artifactType:type_name -> rafay.dev.types.config.ArtifactType
	1,  // 25: rafay.dev.types.config.WorkloadSnapshotSpec.snapshotType:type_name -> rafay.dev.types.config.WorkloadSnapshotType
	33, // 26: rafay.dev.types.config.WorkloadSnapshotSpec.snapshotFiles:type_name -> rafay.dev.types.config.FileMeta
	27, // 27: rafay.dev.types.config.WorkloadSnapshotSpec.extra:type_name -> rafay.dev.types.config.ArtifactExtra
	15, // 28: rafay.dev.types.config.WorkloadSnapshotSpec.authMeta:type_name -> rafay.dev.types.config.WorkloadSnapshotAuthMeta
	29, // 29: rafay.dev.types.config.WorkloadSnapshotSpec.additionalReference:type_name -> rafay.dev.types.config.RepoArtifactMeta
	14, // 30: rafay.dev.types.config.WorkloadSnapshotStatus.conditions:type_name -> rafay.dev.types.config.WorkloadSnapshotCondition
	34, // 31: rafay.dev.types.config.WorkloadSnapshotStatus.assignedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	34, // 32: rafay.dev.types.config.WorkloadSnapshotStatus.deployedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	34, // 33: rafay.dev.types.config.WorkloadSnapshotStatus.failedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	34, // 34: rafay.dev.types.config.WorkloadSnapshotStatus.readyClusters:type_name -> rafay.dev.types.config.ClusterMeta
	34, // 35: rafay.dev.types.config.WorkloadSnapshotStatus.driftedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	23, // 36: rafay.dev.types.config.WorkloadSnapshot.metadata:type_name -> rafay.dev.types.common.v3.Metadata
	16, // 37: rafay.dev.types.config.WorkloadSnapshot.spec:type_name -> rafay.dev.types.config.WorkloadSnapshotSpec
	17, // 38: rafay.dev.types.config.WorkloadSnapshot.status:type_name -> rafay.dev.types.config.WorkloadSnapshotStatus
	30, // 39: rafay.dev.types.config.WorkloadSnapshotList.metadata:type_name -> rafay.dev.types.common.v3.ListMetadata
	18, // 40: rafay.dev.types.config.WorkloadSnapshotList.items:type_name -> rafay.dev.types.config.WorkloadSnapshot
	25, // 41: rafay.dev.types.config.WorkloadTemplateSpec.artifactType:type_name -> rafay.dev.types.config.ArtifactType
	26, // 42: rafay.dev.types.config.WorkloadTemplateSpec.artifactFiles:type_name -> rafay.dev.types.config.File
	27, // 43: rafay.dev.types.config.WorkloadTemplateSpec.extra:type_name -> rafay.dev.types.config.ArtifactExtra
	23, // 44: rafay.dev.types.config.WorkloadTemplate.metadata:type_name -> rafay.dev.types.common.v3.Metadata
	20, // 45: rafay.dev.types.config.WorkloadTemplate.spec:type_name -> rafay.dev.types.config.WorkloadTemplateSpec
	30, // 46: rafay.dev.types.config.WorkloadTemplateList.metadata:type_name -> rafay.dev.types.common.v3.ListMetadata
	21, // 47: rafay.dev.types.config.WorkloadTemplateList.items:type_name -> rafay.dev.types.config.WorkloadTemplate
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_proto_types_config_workload_proto_init() }
func file_proto_types_config_workload_proto_init() {
	if File_proto_types_config_workload_proto != nil {
		return
	}
	file_proto_types_config_config_proto_init()
	file_proto_types_config_placement_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_types_config_workload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelPlanSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyPlanSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanaryPlanSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlueGreenPlanSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentPlanSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSnapshotCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSnapshotAuthMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSnapshotSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSnapshotStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSnapshotList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadTemplateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_workload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadTemplateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_config_workload_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_config_workload_proto_goTypes,
		DependencyIndexes: file_proto_types_config_workload_proto_depIdxs,
		EnumInfos:         file_proto_types_config_workload_proto_enumTypes,
		MessageInfos:      file_proto_types_config_workload_proto_msgTypes,
	}.Build()
	File_proto_types_config_workload_proto = out.File
	file_proto_types_config_workload_proto_rawDesc = nil
	file_proto_types_config_workload_proto_goTypes = nil
	file_proto_types_config_workload_proto_depIdxs = nil
}
