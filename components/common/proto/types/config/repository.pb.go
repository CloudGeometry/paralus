// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: proto/types/config/repository.proto

package config

import (
	v3 "github.com/RafaySystems/rcloud-base/components/common/proto/types/commonpb/v3"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RepositoryType int32

const (
	RepositoryType_RepositoryTypeNotSet RepositoryType = 0
	RepositoryType_GitRepository        RepositoryType = 1
	RepositoryType_HelmRepository       RepositoryType = 2
)

// Enum value maps for RepositoryType.
var (
	RepositoryType_name = map[int32]string{
		0: "RepositoryTypeNotSet",
		1: "GitRepository",
		2: "HelmRepository",
	}
	RepositoryType_value = map[string]int32{
		"RepositoryTypeNotSet": 0,
		"GitRepository":        1,
		"HelmRepository":       2,
	}
)

func (x RepositoryType) Enum() *RepositoryType {
	p := new(RepositoryType)
	*p = x
	return p
}

func (x RepositoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_repository_proto_enumTypes[0].Descriptor()
}

func (RepositoryType) Type() protoreflect.EnumType {
	return &file_proto_types_config_repository_proto_enumTypes[0]
}

func (x RepositoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryType.Descriptor instead.
func (RepositoryType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{0}
}

type RepositoryCredentialType int32

const (
	RepositoryCredentialType_CredentialTypeNotSet RepositoryCredentialType = 0
	RepositoryCredentialType_UserPassCredential   RepositoryCredentialType = 1
	RepositoryCredentialType_SSHCredential        RepositoryCredentialType = 2
)

// Enum value maps for RepositoryCredentialType.
var (
	RepositoryCredentialType_name = map[int32]string{
		0: "CredentialTypeNotSet",
		1: "UserPassCredential",
		2: "SSHCredential",
	}
	RepositoryCredentialType_value = map[string]int32{
		"CredentialTypeNotSet": 0,
		"UserPassCredential":   1,
		"SSHCredential":        2,
	}
)

func (x RepositoryCredentialType) Enum() *RepositoryCredentialType {
	p := new(RepositoryCredentialType)
	*p = x
	return p
}

func (x RepositoryCredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryCredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_repository_proto_enumTypes[1].Descriptor()
}

func (RepositoryCredentialType) Type() protoreflect.EnumType {
	return &file_proto_types_config_repository_proto_enumTypes[1]
}

func (x RepositoryCredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryCredentialType.Descriptor instead.
func (RepositoryCredentialType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{1}
}

// Repository is a first class object for storing reference to git,helm, etc
// repo
type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string            `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string            `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.Metadata      `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *RepositorySpec   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *RepositoryStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{0}
}

func (x *Repository) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Repository) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Repository) GetMetadata() *v3.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Repository) GetSpec() *RepositorySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Repository) GetStatus() *RepositoryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AgentRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AgentRef) Reset() {
	*x = AgentRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRef) ProtoMessage() {}

func (x *AgentRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRef.ProtoReflect.Descriptor instead.
func (*AgentRef) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{1}
}

func (x *AgentRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AgentRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// RepositorySpec is the spec of SecretStore
type RepositorySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// helm, git etc
	RepositoryType RepositoryType `protobuf:"varint,1,opt,name=repositoryType,proto3,enum=rafay.dev.types.config.RepositoryType" json:"repositoryType,omitempty"`
	// Https URL or SSH URL
	Endpoint                  string                   `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Insecure                  bool                     `protobuf:"varint,3,opt,name=insecure,proto3" json:"insecure,omitempty"`
	CaCert                    string                   `protobuf:"bytes,4,opt,name=caCert,proto3" json:"caCert,omitempty"`
	Credentials               *RepoCredentials         `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
	AgentNames                []string                 `protobuf:"bytes,6,rep,name=agentNames,proto3" json:"agentNames,omitempty"`
	CredentialType            RepositoryCredentialType `protobuf:"varint,7,opt,name=credentialType,proto3,enum=rafay.dev.types.config.RepositoryCredentialType" json:"credentialType,omitempty"`
	InternalNetworkAccessOnly bool                     `protobuf:"varint,9,opt,name=internalNetworkAccessOnly,proto3" json:"internalNetworkAccessOnly,omitempty"`
	EnableSubmodules          bool                     `protobuf:"varint,10,opt,name=enableSubmodules,proto3" json:"enableSubmodules,omitempty"`
	MaxRetires                int64                    `protobuf:"zigzag64,11,opt,name=maxRetires,proto3" json:"maxRetires,omitempty"`
	EnableLFS                 bool                     `protobuf:"varint,12,opt,name=enableLFS,proto3" json:"enableLFS,omitempty"`
}

func (x *RepositorySpec) Reset() {
	*x = RepositorySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositorySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositorySpec) ProtoMessage() {}

func (x *RepositorySpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositorySpec.ProtoReflect.Descriptor instead.
func (*RepositorySpec) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{2}
}

func (x *RepositorySpec) GetRepositoryType() RepositoryType {
	if x != nil {
		return x.RepositoryType
	}
	return RepositoryType_RepositoryTypeNotSet
}

func (x *RepositorySpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RepositorySpec) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *RepositorySpec) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *RepositorySpec) GetCredentials() *RepoCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *RepositorySpec) GetAgentNames() []string {
	if x != nil {
		return x.AgentNames
	}
	return nil
}

func (x *RepositorySpec) GetCredentialType() RepositoryCredentialType {
	if x != nil {
		return x.CredentialType
	}
	return RepositoryCredentialType_CredentialTypeNotSet
}

func (x *RepositorySpec) GetInternalNetworkAccessOnly() bool {
	if x != nil {
		return x.InternalNetworkAccessOnly
	}
	return false
}

func (x *RepositorySpec) GetEnableSubmodules() bool {
	if x != nil {
		return x.EnableSubmodules
	}
	return false
}

func (x *RepositorySpec) GetMaxRetires() int64 {
	if x != nil {
		return x.MaxRetires
	}
	return 0
}

func (x *RepositorySpec) GetEnableLFS() bool {
	if x != nil {
		return x.EnableLFS
	}
	return false
}

type RepositoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents []*AgentRef `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *RepositoryStatus) Reset() {
	*x = RepositoryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatus) ProtoMessage() {}

func (x *RepositoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatus.ProtoReflect.Descriptor instead.
func (*RepositoryStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{3}
}

func (x *RepositoryStatus) GetAgents() []*AgentRef {
	if x != nil {
		return x.Agents
	}
	return nil
}

type RepoCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPass *RepoUserPassCredentials `protobuf:"bytes,1,opt,name=userPass,proto3" json:"userPass,omitempty"`
	Ssh      *RepoSSHCredentials      `protobuf:"bytes,2,opt,name=ssh,proto3" json:"ssh,omitempty"`
}

func (x *RepoCredentials) Reset() {
	*x = RepoCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCredentials) ProtoMessage() {}

func (x *RepoCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCredentials.ProtoReflect.Descriptor instead.
func (*RepoCredentials) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{4}
}

func (x *RepoCredentials) GetUserPass() *RepoUserPassCredentials {
	if x != nil {
		return x.UserPass
	}
	return nil
}

func (x *RepoCredentials) GetSsh() *RepoSSHCredentials {
	if x != nil {
		return x.Ssh
	}
	return nil
}

type RepoUserPassCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username       string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password       string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	ClientCertData string `protobuf:"bytes,3,opt,name=clientCertData,proto3" json:"clientCertData,omitempty"`
	ClientCertKey  string `protobuf:"bytes,4,opt,name=clientCertKey,proto3" json:"clientCertKey,omitempty"`
}

func (x *RepoUserPassCredentials) Reset() {
	*x = RepoUserPassCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoUserPassCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoUserPassCredentials) ProtoMessage() {}

func (x *RepoUserPassCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoUserPassCredentials.ProtoReflect.Descriptor instead.
func (*RepoUserPassCredentials) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{5}
}

func (x *RepoUserPassCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RepoUserPassCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RepoUserPassCredentials) GetClientCertData() string {
	if x != nil {
		return x.ClientCertData
	}
	return ""
}

func (x *RepoUserPassCredentials) GetClientCertKey() string {
	if x != nil {
		return x.ClientCertKey
	}
	return ""
}

type RepoSSHCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SshPrivateKey string `protobuf:"bytes,1,opt,name=sshPrivateKey,proto3" json:"sshPrivateKey,omitempty"`
}

func (x *RepoSSHCredentials) Reset() {
	*x = RepoSSHCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoSSHCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoSSHCredentials) ProtoMessage() {}

func (x *RepoSSHCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoSSHCredentials.ProtoReflect.Descriptor instead.
func (*RepoSSHCredentials) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{6}
}

func (x *RepoSSHCredentials) GetSshPrivateKey() string {
	if x != nil {
		return x.SshPrivateKey
	}
	return ""
}

// RepositoryList is a list of repositories
type RepositoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string           `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string           `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.ListMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Items      []*Repository    `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RepositoryList) Reset() {
	*x = RepositoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_repository_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryList) ProtoMessage() {}

func (x *RepositoryList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_repository_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryList.ProtoReflect.Descriptor instead.
func (*RepositoryList) Descriptor() ([]byte, []int) {
	return file_proto_types_config_repository_proto_rawDescGZIP(), []int{7}
}

func (x *RepositoryList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *RepositoryList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RepositoryList) GetMetadata() *v3.ListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RepositoryList) GetItems() []*Repository {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_proto_types_config_repository_proto protoreflect.FileDescriptor

var file_proto_types_config_repository_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x03, 0x0a, 0x0a, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41,
	0x42, 0x2a, 0x0b, 0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x1b,
	0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6b, 0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x76,
	0x33, 0x40, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x2a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x32, 0x14, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x0a,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x40, 0x01, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xc8, 0xde,
	0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x43,
	0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x32, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0xd2, 0x01, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0xd2, 0x01, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x22, 0x2e, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x98, 0x08, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x33, 0xea, 0xde, 0x1f, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0xf2, 0xde, 0x1f, 0x1d, 0x70,
	0x67, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0xea, 0xde, 0x1f, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x16,
	0x70, 0x67, 0x3a, 0x22, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2c, 0x75, 0x73, 0x65,
	0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0xf2, 0xde, 0x1f, 0x16, 0x70, 0x67, 0x3a, 0x22, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xf2, 0xde, 0x1f, 0x15, 0x70, 0x67, 0x3a, 0x22, 0x63, 0x61,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52,
	0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x6c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x21, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x19, 0x70,
	0x67, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2c, 0x75,
	0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x21, 0xc8, 0xde, 0x1f, 0x00, 0xf2,
	0xde, 0x1f, 0x19, 0x70, 0x67, 0x3a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0a, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x33, 0xea, 0xde, 0x1f, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0xf2, 0xde, 0x1f, 0x1d, 0x70, 0x67, 0x3a, 0x22, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x75,
	0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4b, 0xea, 0xde,
	0x1f, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0xf2, 0xde, 0x1f, 0x2a, 0x70,
	0x67, 0x3a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x2c,
	0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x62, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36,
	0xea, 0xde, 0x1f, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0xf2, 0xde, 0x1f, 0x1e, 0x70, 0x67, 0x3a, 0x22, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x6c, 0x65, 0x73, 0x2c, 0x75, 0x73, 0x65,
	0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x2b, 0xea, 0xde,
	0x1f, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0xf2, 0xde, 0x1f, 0x19,
	0x70, 0x67, 0x3a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2c,
	0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x69, 0x72, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x46, 0x53, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0xea, 0xde, 0x1f, 0x09, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x46, 0x53, 0xf2, 0xde, 0x1f, 0x18, 0x70, 0x67, 0x3a, 0x22, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x66, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x22, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x46, 0x53, 0x22, 0x5c,
	0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x06, 0x70, 0x67,
	0x3a, 0x22, 0x2d, 0x22, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x4b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x12, 0x3c, 0x0a,
	0x03, 0x73, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x53, 0x48, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x03, 0x73, 0x73, 0x68, 0x22, 0x9f, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x70, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x3a, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x53, 0x48, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xfb, 0x02, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x0b, 0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x20, 0x41, 0x50, 0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x38, 0x73,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x33, 0x40, 0x01, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x2a, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x32, 0x19, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x0e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x40, 0x01, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x1d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x40, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x65,
	0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00,
	0x2a, 0x65, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x53, 0x48, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10,
	0x02, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xf3, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x66, 0x61, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0xa2, 0x02, 0x04, 0x52, 0x44, 0x54, 0x43, 0xaa, 0x02, 0x16, 0x52, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0xca, 0x02, 0x16, 0x52, 0x61, 0x66, 0x61, 0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe2, 0x02, 0x22, 0x52,
	0x61, 0x66, 0x61, 0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x19, 0x52, 0x61, 0x66, 0x61, 0x79, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_config_repository_proto_rawDescOnce sync.Once
	file_proto_types_config_repository_proto_rawDescData = file_proto_types_config_repository_proto_rawDesc
)

func file_proto_types_config_repository_proto_rawDescGZIP() []byte {
	file_proto_types_config_repository_proto_rawDescOnce.Do(func() {
		file_proto_types_config_repository_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_config_repository_proto_rawDescData)
	})
	return file_proto_types_config_repository_proto_rawDescData
}

var file_proto_types_config_repository_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_types_config_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_types_config_repository_proto_goTypes = []interface{}{
	(RepositoryType)(0),             // 0: rafay.dev.types.config.RepositoryType
	(RepositoryCredentialType)(0),   // 1: rafay.dev.types.config.RepositoryCredentialType
	(*Repository)(nil),              // 2: rafay.dev.types.config.Repository
	(*AgentRef)(nil),                // 3: rafay.dev.types.config.AgentRef
	(*RepositorySpec)(nil),          // 4: rafay.dev.types.config.RepositorySpec
	(*RepositoryStatus)(nil),        // 5: rafay.dev.types.config.RepositoryStatus
	(*RepoCredentials)(nil),         // 6: rafay.dev.types.config.RepoCredentials
	(*RepoUserPassCredentials)(nil), // 7: rafay.dev.types.config.RepoUserPassCredentials
	(*RepoSSHCredentials)(nil),      // 8: rafay.dev.types.config.RepoSSHCredentials
	(*RepositoryList)(nil),          // 9: rafay.dev.types.config.RepositoryList
	(*v3.Metadata)(nil),             // 10: rafay.dev.types.common.v3.Metadata
	(*v3.ListMetadata)(nil),         // 11: rafay.dev.types.common.v3.ListMetadata
}
var file_proto_types_config_repository_proto_depIdxs = []int32{
	10, // 0: rafay.dev.types.config.Repository.metadata:type_name -> rafay.dev.types.common.v3.Metadata
	4,  // 1: rafay.dev.types.config.Repository.spec:type_name -> rafay.dev.types.config.RepositorySpec
	5,  // 2: rafay.dev.types.config.Repository.status:type_name -> rafay.dev.types.config.RepositoryStatus
	0,  // 3: rafay.dev.types.config.RepositorySpec.repositoryType:type_name -> rafay.dev.types.config.RepositoryType
	6,  // 4: rafay.dev.types.config.RepositorySpec.credentials:type_name -> rafay.dev.types.config.RepoCredentials
	1,  // 5: rafay.dev.types.config.RepositorySpec.credentialType:type_name -> rafay.dev.types.config.RepositoryCredentialType
	3,  // 6: rafay.dev.types.config.RepositoryStatus.agents:type_name -> rafay.dev.types.config.AgentRef
	7,  // 7: rafay.dev.types.config.RepoCredentials.userPass:type_name -> rafay.dev.types.config.RepoUserPassCredentials
	8,  // 8: rafay.dev.types.config.RepoCredentials.ssh:type_name -> rafay.dev.types.config.RepoSSHCredentials
	11, // 9: rafay.dev.types.config.RepositoryList.metadata:type_name -> rafay.dev.types.common.v3.ListMetadata
	2,  // 10: rafay.dev.types.config.RepositoryList.items:type_name -> rafay.dev.types.config.Repository
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_types_config_repository_proto_init() }
func file_proto_types_config_repository_proto_init() {
	if File_proto_types_config_repository_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_config_repository_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_repository_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_repository_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositorySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_repository_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_repository_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_repository_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoUserPassCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_repository_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoSSHCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_repository_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_config_repository_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_config_repository_proto_goTypes,
		DependencyIndexes: file_proto_types_config_repository_proto_depIdxs,
		EnumInfos:         file_proto_types_config_repository_proto_enumTypes,
		MessageInfos:      file_proto_types_config_repository_proto_msgTypes,
	}.Build()
	File_proto_types_config_repository_proto = out.File
	file_proto_types_config_repository_proto_rawDesc = nil
	file_proto_types_config_repository_proto_goTypes = nil
	file_proto_types_config_repository_proto_depIdxs = nil
}
