// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: proto/types/config/namespace.proto

package config

import (
	v3 "github.com/RafaySystems/rcloud-base/components/common/proto/types/commonpb/v3"
	controller "github.com/RafaySystems/rcloud-base/components/common/proto/types/controller"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NamespaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneratedName         string                       `protobuf:"bytes,1,opt,name=generatedName,proto3" json:"generatedName,omitempty"`
	PublishPending        bool                         `protobuf:"varint,2,opt,name=publishPending,proto3" json:"publishPending,omitempty"`
	LastPublishedRevision int64                        `protobuf:"zigzag64,3,opt,name=lastPublishedRevision,proto3" json:"lastPublishedRevision,omitempty"`
	AssignedClusters      []*ClusterMeta               `protobuf:"bytes,4,rep,name=assignedClusters,proto3" json:"assignedClusters,omitempty"`
	DeployedClusters      []*ClusterMeta               `protobuf:"bytes,5,rep,name=deployedClusters,proto3" json:"deployedClusters,omitempty"`
	FailedClusters        []*ClusterMeta               `protobuf:"bytes,6,rep,name=failedClusters,proto3" json:"failedClusters,omitempty"`
	ReadyClusters         []*ClusterMeta               `protobuf:"bytes,7,rep,name=readyClusters,proto3" json:"readyClusters,omitempty"`
	DriftedClusters       []*ClusterMeta               `protobuf:"bytes,8,rep,name=driftedClusters,proto3" json:"driftedClusters,omitempty"`
	Conditions            []*WorkloadSnapshotCondition `protobuf:"bytes,9,rep,name=conditions,proto3" json:"conditions,omitempty"`
	IsDirty               bool                         `protobuf:"varint,10,opt,name=isDirty,proto3" json:"isDirty,omitempty"`
}

func (x *NamespaceStatus) Reset() {
	*x = NamespaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceStatus) ProtoMessage() {}

func (x *NamespaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceStatus.ProtoReflect.Descriptor instead.
func (*NamespaceStatus) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{0}
}

func (x *NamespaceStatus) GetGeneratedName() string {
	if x != nil {
		return x.GeneratedName
	}
	return ""
}

func (x *NamespaceStatus) GetPublishPending() bool {
	if x != nil {
		return x.PublishPending
	}
	return false
}

func (x *NamespaceStatus) GetLastPublishedRevision() int64 {
	if x != nil {
		return x.LastPublishedRevision
	}
	return 0
}

func (x *NamespaceStatus) GetAssignedClusters() []*ClusterMeta {
	if x != nil {
		return x.AssignedClusters
	}
	return nil
}

func (x *NamespaceStatus) GetDeployedClusters() []*ClusterMeta {
	if x != nil {
		return x.DeployedClusters
	}
	return nil
}

func (x *NamespaceStatus) GetFailedClusters() []*ClusterMeta {
	if x != nil {
		return x.FailedClusters
	}
	return nil
}

func (x *NamespaceStatus) GetReadyClusters() []*ClusterMeta {
	if x != nil {
		return x.ReadyClusters
	}
	return nil
}

func (x *NamespaceStatus) GetDriftedClusters() []*ClusterMeta {
	if x != nil {
		return x.DriftedClusters
	}
	return nil
}

func (x *NamespaceStatus) GetConditions() []*WorkloadSnapshotCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *NamespaceStatus) GetIsDirty() bool {
	if x != nil {
		return x.IsDirty
	}
	return false
}

type LimitRangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCpu                     float32 `protobuf:"fixed32,1,opt,name=maxCpu,proto3" json:"maxCpu,omitempty"`
	MaxMemory                  float32 `protobuf:"fixed32,2,opt,name=maxMemory,proto3" json:"maxMemory,omitempty"`
	MinCpu                     float32 `protobuf:"fixed32,3,opt,name=minCpu,proto3" json:"minCpu,omitempty"`
	MinMemory                  float32 `protobuf:"fixed32,4,opt,name=minMemory,proto3" json:"minMemory,omitempty"`
	DefaultCpu                 float32 `protobuf:"fixed32,5,opt,name=defaultCpu,proto3" json:"defaultCpu,omitempty"`
	DefaultMemory              float32 `protobuf:"fixed32,6,opt,name=defaultMemory,proto3" json:"defaultMemory,omitempty"`
	DefaultRequestCpu          float32 `protobuf:"fixed32,7,opt,name=defaultRequestCpu,proto3" json:"defaultRequestCpu,omitempty"`
	DefaultRequestMemory       float32 `protobuf:"fixed32,8,opt,name=defaultRequestMemory,proto3" json:"defaultRequestMemory,omitempty"`
	MaxLimitRequestRatioCpu    float32 `protobuf:"fixed32,9,opt,name=maxLimitRequestRatioCpu,proto3" json:"maxLimitRequestRatioCpu,omitempty"`
	MaxLimitRequestRatioMemory float32 `protobuf:"fixed32,10,opt,name=maxLimitRequestRatioMemory,proto3" json:"maxLimitRequestRatioMemory,omitempty"`
}

func (x *LimitRangeItem) Reset() {
	*x = LimitRangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRangeItem) ProtoMessage() {}

func (x *LimitRangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRangeItem.ProtoReflect.Descriptor instead.
func (*LimitRangeItem) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{1}
}

func (x *LimitRangeItem) GetMaxCpu() float32 {
	if x != nil {
		return x.MaxCpu
	}
	return 0
}

func (x *LimitRangeItem) GetMaxMemory() float32 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *LimitRangeItem) GetMinCpu() float32 {
	if x != nil {
		return x.MinCpu
	}
	return 0
}

func (x *LimitRangeItem) GetMinMemory() float32 {
	if x != nil {
		return x.MinMemory
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultCpu() float32 {
	if x != nil {
		return x.DefaultCpu
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultMemory() float32 {
	if x != nil {
		return x.DefaultMemory
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultRequestCpu() float32 {
	if x != nil {
		return x.DefaultRequestCpu
	}
	return 0
}

func (x *LimitRangeItem) GetDefaultRequestMemory() float32 {
	if x != nil {
		return x.DefaultRequestMemory
	}
	return 0
}

func (x *LimitRangeItem) GetMaxLimitRequestRatioCpu() float32 {
	if x != nil {
		return x.MaxLimitRequestRatioCpu
	}
	return 0
}

func (x *LimitRangeItem) GetMaxLimitRequestRatioMemory() float32 {
	if x != nil {
		return x.MaxLimitRequestRatioMemory
	}
	return 0
}

type LimitRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodLimits       *LimitRangeItem `protobuf:"bytes,1,opt,name=podLimits,proto3" json:"podLimits,omitempty"`
	ContainerLimits *LimitRangeItem `protobuf:"bytes,2,opt,name=containerLimits,proto3" json:"containerLimits,omitempty"`
}

func (x *LimitRange) Reset() {
	*x = LimitRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRange) ProtoMessage() {}

func (x *LimitRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRange.ProtoReflect.Descriptor instead.
func (*LimitRange) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{2}
}

func (x *LimitRange) GetPodLimits() *LimitRangeItem {
	if x != nil {
		return x.PodLimits
	}
	return nil
}

func (x *LimitRange) GetContainerLimits() *LimitRangeItem {
	if x != nil {
		return x.ContainerLimits
	}
	return nil
}

type ResourceQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequests    float32 `protobuf:"fixed32,1,opt,name=cpuRequests,proto3" json:"cpuRequests,omitempty"`
	MemoryRequests float32 `protobuf:"fixed32,2,opt,name=memoryRequests,proto3" json:"memoryRequests,omitempty"`
	CpuLimits      float32 `protobuf:"fixed32,3,opt,name=cpuLimits,proto3" json:"cpuLimits,omitempty"`
	MemoryLimits   float32 `protobuf:"fixed32,4,opt,name=memoryLimits,proto3" json:"memoryLimits,omitempty"`
}

func (x *ResourceQuota) Reset() {
	*x = ResourceQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceQuota) ProtoMessage() {}

func (x *ResourceQuota) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceQuota.ProtoReflect.Descriptor instead.
func (*ResourceQuota) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceQuota) GetCpuRequests() float32 {
	if x != nil {
		return x.CpuRequests
	}
	return 0
}

func (x *ResourceQuota) GetMemoryRequests() float32 {
	if x != nil {
		return x.MemoryRequests
	}
	return 0
}

func (x *ResourceQuota) GetCpuLimits() float32 {
	if x != nil {
		return x.CpuLimits
	}
	return 0
}

func (x *ResourceQuota) GetMemoryLimits() float32 {
	if x != nil {
		return x.MemoryLimits
	}
	return 0
}

// NamespaceStatusTemplate is the template for sending namespace status
type NamespaceStatusTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta *v1.ObjectMeta              `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Status     *controller.NamespaceStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NamespaceStatusTemplate) Reset() {
	*x = NamespaceStatusTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceStatusTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceStatusTemplate) ProtoMessage() {}

func (x *NamespaceStatusTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceStatusTemplate.ProtoReflect.Descriptor instead.
func (*NamespaceStatusTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{4}
}

func (x *NamespaceStatusTemplate) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *NamespaceStatusTemplate) GetStatus() *controller.NamespaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// NamespaceTemplate is the template for creating namespace
type NamespaceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta        *v1.ObjectMeta            `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Spec              *controller.NamespaceSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	ResourceQuota     *ResourceQuota            `protobuf:"bytes,4,opt,name=resourceQuota,proto3" json:"resourceQuota,omitempty"`
	LimitRange        *LimitRange               `protobuf:"bytes,5,opt,name=limitRange,proto3" json:"limitRange,omitempty"`
	Placement         *PlacementSpec            `protobuf:"bytes,6,opt,name=placement,proto3" json:"placement,omitempty"`
	Type              string                    `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	NamespaceFromFile string                    `protobuf:"bytes,8,opt,name=namespaceFromFile,proto3" json:"namespaceFromFile,omitempty"`
	RepoRef           string                    `protobuf:"bytes,9,opt,name=repoRef,proto3" json:"repoRef,omitempty"`
	RepoArtifactMeta  *RepoArtifactMeta         `protobuf:"bytes,10,opt,name=repoArtifactMeta,proto3" json:"repoArtifactMeta,omitempty"`
	NamespaceFromRepo string                    `protobuf:"bytes,11,opt,name=namespaceFromRepo,proto3" json:"namespaceFromRepo,omitempty"`
}

func (x *NamespaceTemplate) Reset() {
	*x = NamespaceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceTemplate) ProtoMessage() {}

func (x *NamespaceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceTemplate.ProtoReflect.Descriptor instead.
func (*NamespaceTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{5}
}

func (x *NamespaceTemplate) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *NamespaceTemplate) GetSpec() *controller.NamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NamespaceTemplate) GetResourceQuota() *ResourceQuota {
	if x != nil {
		return x.ResourceQuota
	}
	return nil
}

func (x *NamespaceTemplate) GetLimitRange() *LimitRange {
	if x != nil {
		return x.LimitRange
	}
	return nil
}

func (x *NamespaceTemplate) GetPlacement() *PlacementSpec {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *NamespaceTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NamespaceTemplate) GetNamespaceFromFile() string {
	if x != nil {
		return x.NamespaceFromFile
	}
	return ""
}

func (x *NamespaceTemplate) GetRepoRef() string {
	if x != nil {
		return x.RepoRef
	}
	return ""
}

func (x *NamespaceTemplate) GetRepoArtifactMeta() *RepoArtifactMeta {
	if x != nil {
		return x.RepoArtifactMeta
	}
	return nil
}

func (x *NamespaceTemplate) GetNamespaceFromRepo() string {
	if x != nil {
		return x.NamespaceFromRepo
	}
	return ""
}

// Namespace represets a kubernetes namespace along with all the objects
// whose lifecycle is tied to the kubernetes namespace lifecycle
type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string             `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string             `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.Metadata       `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *NamespaceTemplate `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *NamespaceStatus   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{6}
}

func (x *Namespace) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Namespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Namespace) GetMetadata() *v3.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Namespace) GetSpec() *NamespaceTemplate {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Namespace) GetStatus() *NamespaceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// NamespaceList is a list of namespaces
type NamespaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string           `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string           `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *v3.ListMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Items      []*Namespace     `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NamespaceList) Reset() {
	*x = NamespaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_namespace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceList) ProtoMessage() {}

func (x *NamespaceList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_namespace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceList.ProtoReflect.Descriptor instead.
func (*NamespaceList) Descriptor() ([]byte, []int) {
	return file_proto_types_config_namespace_proto_rawDescGZIP(), []int{7}
}

func (x *NamespaceList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *NamespaceList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NamespaceList) GetMetadata() *v3.ListMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NamespaceList) GetItems() []*Namespace {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_proto_types_config_namespace_proto protoreflect.FileDescriptor

var file_proto_types_config_namespace_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x76,
	0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x0a, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x02, 0x40, 0x01, 0xf2, 0xde, 0x1f, 0x1c, 0x70, 0x67, 0x3a,
	0x22, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2c,
	0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x33, 0xea, 0xde, 0x1f, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x1d, 0x70, 0x67, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2c, 0x75, 0x73, 0x65, 0x5f,
	0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x12, 0x42, 0x29, 0xf2, 0xde, 0x1f, 0x25, 0x70, 0x67, 0x3a, 0x22, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x57, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x4f,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x3a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x20,
	0x70, 0x67, 0x3a, 0x22, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52,
	0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x57, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x4f, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22,
	0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x20, 0x70, 0x67, 0x3a, 0x22, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa2, 0x01, 0x0a,
	0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x55, 0xc8, 0xde, 0x1f, 0x00,
	0xf2, 0xde, 0x1f, 0x4d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x20, 0x70, 0x67, 0x3a, 0x22, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f,
	0x22, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x66, 0x61,
	0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x54,
	0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x4c, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x20, 0x70, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a,
	0x65, 0x72, 0x6f, 0x22, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x42, 0x56, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x4e, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a,
	0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x20, 0x70, 0x67, 0x3a, 0x22,
	0x64, 0x72, 0x69, 0x66, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x0f, 0x64, 0x72, 0x69, 0x66,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x5a, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x14, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0xf2, 0xde, 0x1f, 0x3a, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20,
	0x70, 0x67, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x69,
	0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0xea, 0xde,
	0x1f, 0x07, 0x69, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x16, 0x70, 0x67, 0x3a,
	0x22, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x22, 0x52, 0x07, 0x69, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x22, 0xc9, 0x05, 0x0a,
	0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x2c, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x14, 0xea, 0xde, 0x1f, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x12, 0x35, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x43, 0x70, 0x75, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x6d, 0x69, 0x6e, 0x43, 0x70, 0x75,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x43,
	0x70, 0x75, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x6d, 0x69, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x18, 0xea,
	0xde, 0x1f, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x70, 0x75, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x70, 0x75, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x17,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x70, 0x75, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x70, 0x75, 0x12, 0x56, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x22, 0xea, 0xde, 0x1f, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x5f, 0x0a,
	0x17, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x43, 0x70, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x42, 0x25,
	0xea, 0xde, 0x1f, 0x21, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x43, 0x70, 0x75, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x43, 0x70, 0x75, 0x12, 0x68,
	0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x28, 0xea, 0xde, 0x1f, 0x24, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x1a, 0x6d, 0x61,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x64,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x19, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x70, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x19,
	0xea, 0xde, 0x1f, 0x15, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1c,
	0xea, 0xde, 0x1f, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0e, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x17, 0xea, 0xde, 0x1f, 0x13, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1a, 0xea, 0xde, 0x1f, 0x16, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x70, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1e, 0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0xea,
	0xde, 0x1f, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd2, 0x07, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1e, 0xc8, 0xde,
	0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x72, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42,
	0x25, 0xea, 0xde, 0x1f, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x06,
	0x70, 0x67, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x66, 0x61,
	0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x22, 0xea,
	0xde, 0x1f, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x06, 0x70, 0x67, 0x3a, 0x22, 0x2d,
	0x22, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6e, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x29, 0xea, 0xde, 0x1f, 0x13, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0xf2, 0xde, 0x1f, 0x0e, 0x70, 0x67, 0x3a, 0x22, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xde, 0x1f,
	0x0e, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2,
	0xde, 0x1f, 0x09, 0x70, 0x67, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xea,
	0xde, 0x1f, 0x1b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde,
	0x1f, 0x06, 0x70, 0x67, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xea, 0xde,
	0x1f, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x0c, 0x70, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x66, 0x22, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x12, 0x8d, 0x01, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x37, 0xea, 0xde, 0x1f, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0xf2, 0xde, 0x1f, 0x15, 0x70, 0x67, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x11,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xea, 0xde, 0x1f, 0x1b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x06, 0x70, 0x67, 0x3a, 0x22,
	0x2d, 0x22, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x22, 0x89, 0x04, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x2a, 0x0b, 0x41, 0x50,
	0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x1b, 0x41, 0x50, 0x49, 0x20, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b,
	0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x33, 0x40, 0x01, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x32, 0x19, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x13,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x40, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x27, 0x92, 0x41, 0x24, 0x2a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x18, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x11,
	0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x09, 0x70, 0x67, 0x3a, 0x22, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x41,
	0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x32, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0xd2,
	0x01, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0xf8, 0x02, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x2a, 0x0b, 0x41, 0x50,
	0x49, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x20, 0x41, 0x50, 0x49, 0x20, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x14, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6b, 0x38, 0x73, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x69, 0x6f, 0x2f, 0x76,
	0x33, 0x40, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92,
	0x41, 0x32, 0x2a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x32, 0x19, 0x4b, 0x69, 0x6e, 0x64, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x3a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x40, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x77, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x2a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x40, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0xf2, 0x01, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x66, 0x61, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa2, 0x02, 0x04, 0x52, 0x44, 0x54, 0x43, 0xaa, 0x02,
	0x16, 0x52, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xca, 0x02, 0x16, 0x52, 0x61, 0x66, 0x61, 0x79, 0x5c,
	0x44, 0x65, 0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0xe2, 0x02, 0x22, 0x52, 0x61, 0x66, 0x61, 0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x52, 0x61, 0x66, 0x61, 0x79, 0x3a, 0x3a, 0x44,
	0x65, 0x76, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_config_namespace_proto_rawDescOnce sync.Once
	file_proto_types_config_namespace_proto_rawDescData = file_proto_types_config_namespace_proto_rawDesc
)

func file_proto_types_config_namespace_proto_rawDescGZIP() []byte {
	file_proto_types_config_namespace_proto_rawDescOnce.Do(func() {
		file_proto_types_config_namespace_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_config_namespace_proto_rawDescData)
	})
	return file_proto_types_config_namespace_proto_rawDescData
}

var file_proto_types_config_namespace_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_types_config_namespace_proto_goTypes = []interface{}{
	(*NamespaceStatus)(nil),            // 0: rafay.dev.types.config.NamespaceStatus
	(*LimitRangeItem)(nil),             // 1: rafay.dev.types.config.LimitRangeItem
	(*LimitRange)(nil),                 // 2: rafay.dev.types.config.LimitRange
	(*ResourceQuota)(nil),              // 3: rafay.dev.types.config.ResourceQuota
	(*NamespaceStatusTemplate)(nil),    // 4: rafay.dev.types.config.NamespaceStatusTemplate
	(*NamespaceTemplate)(nil),          // 5: rafay.dev.types.config.NamespaceTemplate
	(*Namespace)(nil),                  // 6: rafay.dev.types.config.Namespace
	(*NamespaceList)(nil),              // 7: rafay.dev.types.config.NamespaceList
	(*ClusterMeta)(nil),                // 8: rafay.dev.types.config.ClusterMeta
	(*WorkloadSnapshotCondition)(nil),  // 9: rafay.dev.types.config.WorkloadSnapshotCondition
	(*v1.ObjectMeta)(nil),              // 10: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*controller.NamespaceStatus)(nil), // 11: rafay.dev.types.controller.NamespaceStatus
	(*controller.NamespaceSpec)(nil),   // 12: rafay.dev.types.controller.NamespaceSpec
	(*PlacementSpec)(nil),              // 13: rafay.dev.types.config.PlacementSpec
	(*RepoArtifactMeta)(nil),           // 14: rafay.dev.types.config.RepoArtifactMeta
	(*v3.Metadata)(nil),                // 15: rafay.dev.types.common.v3.Metadata
	(*v3.ListMetadata)(nil),            // 16: rafay.dev.types.common.v3.ListMetadata
}
var file_proto_types_config_namespace_proto_depIdxs = []int32{
	8,  // 0: rafay.dev.types.config.NamespaceStatus.assignedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	8,  // 1: rafay.dev.types.config.NamespaceStatus.deployedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	8,  // 2: rafay.dev.types.config.NamespaceStatus.failedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	8,  // 3: rafay.dev.types.config.NamespaceStatus.readyClusters:type_name -> rafay.dev.types.config.ClusterMeta
	8,  // 4: rafay.dev.types.config.NamespaceStatus.driftedClusters:type_name -> rafay.dev.types.config.ClusterMeta
	9,  // 5: rafay.dev.types.config.NamespaceStatus.conditions:type_name -> rafay.dev.types.config.WorkloadSnapshotCondition
	1,  // 6: rafay.dev.types.config.LimitRange.podLimits:type_name -> rafay.dev.types.config.LimitRangeItem
	1,  // 7: rafay.dev.types.config.LimitRange.containerLimits:type_name -> rafay.dev.types.config.LimitRangeItem
	10, // 8: rafay.dev.types.config.NamespaceStatusTemplate.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	11, // 9: rafay.dev.types.config.NamespaceStatusTemplate.status:type_name -> rafay.dev.types.controller.NamespaceStatus
	10, // 10: rafay.dev.types.config.NamespaceTemplate.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	12, // 11: rafay.dev.types.config.NamespaceTemplate.spec:type_name -> rafay.dev.types.controller.NamespaceSpec
	3,  // 12: rafay.dev.types.config.NamespaceTemplate.resourceQuota:type_name -> rafay.dev.types.config.ResourceQuota
	2,  // 13: rafay.dev.types.config.NamespaceTemplate.limitRange:type_name -> rafay.dev.types.config.LimitRange
	13, // 14: rafay.dev.types.config.NamespaceTemplate.placement:type_name -> rafay.dev.types.config.PlacementSpec
	14, // 15: rafay.dev.types.config.NamespaceTemplate.repoArtifactMeta:type_name -> rafay.dev.types.config.RepoArtifactMeta
	15, // 16: rafay.dev.types.config.Namespace.metadata:type_name -> rafay.dev.types.common.v3.Metadata
	5,  // 17: rafay.dev.types.config.Namespace.spec:type_name -> rafay.dev.types.config.NamespaceTemplate
	0,  // 18: rafay.dev.types.config.Namespace.status:type_name -> rafay.dev.types.config.NamespaceStatus
	16, // 19: rafay.dev.types.config.NamespaceList.metadata:type_name -> rafay.dev.types.common.v3.ListMetadata
	6,  // 20: rafay.dev.types.config.NamespaceList.items:type_name -> rafay.dev.types.config.Namespace
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_types_config_namespace_proto_init() }
func file_proto_types_config_namespace_proto_init() {
	if File_proto_types_config_namespace_proto != nil {
		return
	}
	file_proto_types_config_config_proto_init()
	file_proto_types_config_placement_proto_init()
	file_proto_types_config_workload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_types_config_namespace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_namespace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_namespace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_namespace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_namespace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceStatusTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_namespace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_namespace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_namespace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_config_namespace_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_config_namespace_proto_goTypes,
		DependencyIndexes: file_proto_types_config_namespace_proto_depIdxs,
		MessageInfos:      file_proto_types_config_namespace_proto_msgTypes,
	}.Build()
	File_proto_types_config_namespace_proto = out.File
	file_proto_types_config_namespace_proto_rawDesc = nil
	file_proto_types_config_namespace_proto_goTypes = nil
	file_proto_types_config_namespace_proto_depIdxs = nil
}
