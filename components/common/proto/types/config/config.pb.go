// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: proto/types/config/config.proto

package config

import (
	_ "github.com/RafaySystems/rcloud-base/components/common/proto/types/commonpb/v3"
	controller "github.com/RafaySystems/rcloud-base/components/common/proto/types/controller"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "k8s.io/api/extensions/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnapshotRefType int32

const (
	SnapshotRefType_SnapshotTaskSet  SnapshotRefType = 0
	SnapshotRefType_SnapshotWorkload SnapshotRefType = 1
)

// Enum value maps for SnapshotRefType.
var (
	SnapshotRefType_name = map[int32]string{
		0: "SnapshotTaskSet",
		1: "SnapshotWorkload",
	}
	SnapshotRefType_value = map[string]int32{
		"SnapshotTaskSet":  0,
		"SnapshotWorkload": 1,
	}
)

func (x SnapshotRefType) Enum() *SnapshotRefType {
	p := new(SnapshotRefType)
	*p = x
	return p
}

func (x SnapshotRefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnapshotRefType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_config_proto_enumTypes[0].Descriptor()
}

func (SnapshotRefType) Type() protoreflect.EnumType {
	return &file_proto_types_config_config_proto_enumTypes[0]
}

func (x SnapshotRefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnapshotRefType.Descriptor instead.
func (SnapshotRefType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{0}
}

type WorkloadType int32

const (
	WorkloadType_NativeYaml     WorkloadType = 0
	WorkloadType_Helm           WorkloadType = 1
	WorkloadType_NativeHelm     WorkloadType = 2
	WorkloadType_Rafay          WorkloadType = 3
	WorkloadType_HelmInGitRepo  WorkloadType = 4
	WorkloadType_YamlInGitRepo  WorkloadType = 5
	WorkloadType_HelmInHelmRepo WorkloadType = 6
)

// Enum value maps for WorkloadType.
var (
	WorkloadType_name = map[int32]string{
		0: "NativeYaml",
		1: "Helm",
		2: "NativeHelm",
		3: "Rafay",
		4: "HelmInGitRepo",
		5: "YamlInGitRepo",
		6: "HelmInHelmRepo",
	}
	WorkloadType_value = map[string]int32{
		"NativeYaml":     0,
		"Helm":           1,
		"NativeHelm":     2,
		"Rafay":          3,
		"HelmInGitRepo":  4,
		"YamlInGitRepo":  5,
		"HelmInHelmRepo": 6,
	}
)

func (x WorkloadType) Enum() *WorkloadType {
	p := new(WorkloadType)
	*p = x
	return p
}

func (x WorkloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_config_proto_enumTypes[1].Descriptor()
}

func (WorkloadType) Type() protoreflect.EnumType {
	return &file_proto_types_config_config_proto_enumTypes[1]
}

func (x WorkloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadType.Descriptor instead.
func (WorkloadType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{1}
}

type ArtifactType int32

const (
	ArtifactType_ArtifactTypeNotSet    ArtifactType = 0
	ArtifactType_RafayWizardWorkload   ArtifactType = 1
	ArtifactType_HelmChart             ArtifactType = 2
	ArtifactType_NativeYAML            ArtifactType = 3
	ArtifactType_GitRepoWithHelm       ArtifactType = 4
	ArtifactType_GitRepoWithNativeYAML ArtifactType = 5
	ArtifactType_HelmRepo              ArtifactType = 6
	ArtifactType_RafayVMWizardWorkload ArtifactType = 7
)

// Enum value maps for ArtifactType.
var (
	ArtifactType_name = map[int32]string{
		0: "ArtifactTypeNotSet",
		1: "RafayWizardWorkload",
		2: "HelmChart",
		3: "NativeYAML",
		4: "GitRepoWithHelm",
		5: "GitRepoWithNativeYAML",
		6: "HelmRepo",
		7: "RafayVMWizardWorkload",
	}
	ArtifactType_value = map[string]int32{
		"ArtifactTypeNotSet":    0,
		"RafayWizardWorkload":   1,
		"HelmChart":             2,
		"NativeYAML":            3,
		"GitRepoWithHelm":       4,
		"GitRepoWithNativeYAML": 5,
		"HelmRepo":              6,
		"RafayVMWizardWorkload": 7,
	}
)

func (x ArtifactType) Enum() *ArtifactType {
	p := new(ArtifactType)
	*p = x
	return p
}

func (x ArtifactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_config_proto_enumTypes[2].Descriptor()
}

func (ArtifactType) Type() protoreflect.EnumType {
	return &file_proto_types_config_config_proto_enumTypes[2]
}

func (x ArtifactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactType.Descriptor instead.
func (ArtifactType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{2}
}

type FileType int32

const (
	FileType_FileTypeNotSet FileType = 0
	FileType_K8sYAMLFile    FileType = 1
	FileType_HelmChartFile  FileType = 2
	FileType_HelmValuesFile FileType = 3
	FileType_JSONFile       FileType = 4
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FileTypeNotSet",
		1: "K8sYAMLFile",
		2: "HelmChartFile",
		3: "HelmValuesFile",
		4: "JSONFile",
	}
	FileType_value = map[string]int32{
		"FileTypeNotSet": 0,
		"K8sYAMLFile":    1,
		"HelmChartFile":  2,
		"HelmValuesFile": 3,
		"JSONFile":       4,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_config_proto_enumTypes[3].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_proto_types_config_config_proto_enumTypes[3]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{3}
}

type HealthStatus int32

const (
	HealthStatus_UNKNOWN   HealthStatus = 0
	HealthStatus_HEALTHY   HealthStatus = 1
	HealthStatus_UNHEALTHY HealthStatus = 2
	HealthStatus_INACTIVE  HealthStatus = 3
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "INACTIVE",
	}
	HealthStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"HEALTHY":   1,
		"UNHEALTHY": 2,
		"INACTIVE":  3,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_config_proto_enumTypes[4].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_proto_types_config_config_proto_enumTypes[4]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{4}
}

type ShareMode int32

const (
	ShareMode_ShareModeNotSet ShareMode = 0
	ShareMode_ALL             ShareMode = 1
	ShareMode_CUSTOM          ShareMode = 2
)

// Enum value maps for ShareMode.
var (
	ShareMode_name = map[int32]string{
		0: "ShareModeNotSet",
		1: "ALL",
		2: "CUSTOM",
	}
	ShareMode_value = map[string]int32{
		"ShareModeNotSet": 0,
		"ALL":             1,
		"CUSTOM":          2,
	}
)

func (x ShareMode) Enum() *ShareMode {
	p := new(ShareMode)
	*p = x
	return p
}

func (x ShareMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_types_config_config_proto_enumTypes[5].Descriptor()
}

func (ShareMode) Type() protoreflect.EnumType {
	return &file_proto_types_config_config_proto_enumTypes[5]
}

func (x ShareMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareMode.Descriptor instead.
func (ShareMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{5}
}

// SnapshotRef
//
// SnapshotRef refers to a published snapshot of a taskset/workload
type SnapshotRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PublishedGeneration string          `protobuf:"bytes,2,opt,name=publishedGeneration,proto3" json:"publishedGeneration,omitempty"`
	Selector            string          `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
	Revision            int64           `protobuf:"zigzag64,4,opt,name=revision,proto3" json:"revision,omitempty"`
	WorkloadID          string          `protobuf:"bytes,5,opt,name=workloadID,proto3" json:"workloadID,omitempty"`
	RefType             SnapshotRefType `protobuf:"varint,6,opt,name=refType,proto3,enum=rafay.dev.types.config.SnapshotRefType" json:"refType,omitempty"`
	Version             string          `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	IsGlobal            bool            `protobuf:"varint,8,opt,name=isGlobal,proto3" json:"isGlobal,omitempty"`
	ComponentType       string          `protobuf:"bytes,9,opt,name=componentType,proto3" json:"componentType,omitempty"`
	DependsOn           []string        `protobuf:"bytes,10,rep,name=dependsOn,proto3" json:"dependsOn,omitempty"`
}

func (x *SnapshotRef) Reset() {
	*x = SnapshotRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRef) ProtoMessage() {}

func (x *SnapshotRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRef.ProtoReflect.Descriptor instead.
func (*SnapshotRef) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *SnapshotRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnapshotRef) GetPublishedGeneration() string {
	if x != nil {
		return x.PublishedGeneration
	}
	return ""
}

func (x *SnapshotRef) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *SnapshotRef) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SnapshotRef) GetWorkloadID() string {
	if x != nil {
		return x.WorkloadID
	}
	return ""
}

func (x *SnapshotRef) GetRefType() SnapshotRefType {
	if x != nil {
		return x.RefType
	}
	return SnapshotRefType_SnapshotTaskSet
}

func (x *SnapshotRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SnapshotRef) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

func (x *SnapshotRef) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *SnapshotRef) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

type DiscoveryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Resource  string            `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DiscoveryConfig) Reset() {
	*x = DiscoveryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryConfig) ProtoMessage() {}

func (x *DiscoveryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryConfig.ProtoReflect.Descriptor instead.
func (*DiscoveryConfig) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *DiscoveryConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DiscoveryConfig) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *DiscoveryConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits *ResourceQuantity `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceRequirements) GetLimits() *ResourceQuantity {
	if x != nil {
		return x.Limits
	}
	return nil
}

type ResourceQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory string `protobuf:"bytes,1,opt,name=memory,proto3" json:"memory,omitempty"`
	Cpu    string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *ResourceQuantity) Reset() {
	*x = ResourceQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceQuantity) ProtoMessage() {}

func (x *ResourceQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceQuantity.ProtoReflect.Descriptor instead.
func (*ResourceQuantity) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceQuantity) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ResourceQuantity) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

type ComponentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// optional
	DiscoveryConfig *DiscoveryConfig `protobuf:"bytes,2,opt,name=discoveryConfig,proto3" json:"discoveryConfig,omitempty"`
}

func (x *ComponentConfig) Reset() {
	*x = ComponentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentConfig) ProtoMessage() {}

func (x *ComponentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentConfig.ProtoReflect.Descriptor instead.
func (*ComponentConfig) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *ComponentConfig) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *ComponentConfig) GetDiscoveryConfig() *DiscoveryConfig {
	if x != nil {
		return x.DiscoveryConfig
	}
	return nil
}

type PrometheusCustomization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrometheusAdapter *ComponentConfig      `protobuf:"bytes,1,opt,name=prometheusAdapter,proto3" json:"prometheusAdapter,omitempty"`
	MetricsServer     *ComponentConfig      `protobuf:"bytes,2,opt,name=metricsServer,proto3" json:"metricsServer,omitempty"`
	KubeStateMetrics  *ComponentConfig      `protobuf:"bytes,3,opt,name=kubeStateMetrics,proto3" json:"kubeStateMetrics,omitempty"`
	NodeExporter      *ComponentConfig      `protobuf:"bytes,4,opt,name=nodeExporter,proto3" json:"nodeExporter,omitempty"`
	HelmExporter      *ComponentConfig      `protobuf:"bytes,5,opt,name=helmExporter,proto3" json:"helmExporter,omitempty"`
	Resources         *ResourceRequirements `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *PrometheusCustomization) Reset() {
	*x = PrometheusCustomization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrometheusCustomization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrometheusCustomization) ProtoMessage() {}

func (x *PrometheusCustomization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrometheusCustomization.ProtoReflect.Descriptor instead.
func (*PrometheusCustomization) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *PrometheusCustomization) GetPrometheusAdapter() *ComponentConfig {
	if x != nil {
		return x.PrometheusAdapter
	}
	return nil
}

func (x *PrometheusCustomization) GetMetricsServer() *ComponentConfig {
	if x != nil {
		return x.MetricsServer
	}
	return nil
}

func (x *PrometheusCustomization) GetKubeStateMetrics() *ComponentConfig {
	if x != nil {
		return x.KubeStateMetrics
	}
	return nil
}

func (x *PrometheusCustomization) GetNodeExporter() *ComponentConfig {
	if x != nil {
		return x.NodeExporter
	}
	return nil
}

func (x *PrometheusCustomization) GetHelmExporter() *ComponentConfig {
	if x != nil {
		return x.HelmExporter
	}
	return nil
}

func (x *PrometheusCustomization) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

// TaskTemplate is the template for creating task
type TaskTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta *v1.ObjectMeta       `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Spec       *controller.TaskSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TaskTemplate) Reset() {
	*x = TaskTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTemplate) ProtoMessage() {}

func (x *TaskTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTemplate.ProtoReflect.Descriptor instead.
func (*TaskTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *TaskTemplate) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *TaskTemplate) GetSpec() *controller.TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// TaskStatusTemplate is the template for sending status of the task
type TaskStatusTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta *v1.ObjectMeta         `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Status     *controller.TaskStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TaskStatusTemplate) Reset() {
	*x = TaskStatusTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusTemplate) ProtoMessage() {}

func (x *TaskStatusTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusTemplate.ProtoReflect.Descriptor instead.
func (*TaskStatusTemplate) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *TaskStatusTemplate) GetObjectMeta() *v1.ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *TaskStatusTemplate) GetStatus() *controller.TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type V2Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadType     WorkloadType `protobuf:"varint,1,opt,name=workloadType,proto3,enum=rafay.dev.types.config.WorkloadType" json:"workloadType,omitempty"`
	IsSystemWorkload bool         `protobuf:"varint,2,opt,name=isSystemWorkload,proto3" json:"isSystemWorkload,omitempty"`
	WorkloadName     string       `protobuf:"bytes,3,opt,name=workloadName,proto3" json:"workloadName,omitempty"`
	Payload          []byte       `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *V2Workload) Reset() {
	*x = V2Workload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V2Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V2Workload) ProtoMessage() {}

func (x *V2Workload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V2Workload.ProtoReflect.Descriptor instead.
func (*V2Workload) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *V2Workload) GetWorkloadType() WorkloadType {
	if x != nil {
		return x.WorkloadType
	}
	return WorkloadType_NativeYaml
}

func (x *V2Workload) GetIsSystemWorkload() bool {
	if x != nil {
		return x.IsSystemWorkload
	}
	return false
}

func (x *V2Workload) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *V2Workload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type FileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileType FileType `protobuf:"varint,2,opt,name=fileType,proto3,enum=rafay.dev.types.config.FileType" json:"fileType,omitempty"`
	FileSize int64    `protobuf:"zigzag64,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
}

func (x *FileMeta) Reset() {
	*x = FileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMeta) ProtoMessage() {}

func (x *FileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMeta.ProtoReflect.Descriptor instead.
func (*FileMeta) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *FileMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileMeta) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FileTypeNotSet
}

func (x *FileMeta) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type PipelineMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineID string `protobuf:"bytes,1,opt,name=pipelineID,proto3" json:"pipelineID,omitempty"`
	InstanceID int64  `protobuf:"zigzag64,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	StageName  string `protobuf:"bytes,3,opt,name=stageName,proto3" json:"stageName,omitempty"`
}

func (x *PipelineMeta) Reset() {
	*x = PipelineMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineMeta) ProtoMessage() {}

func (x *PipelineMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineMeta.ProtoReflect.Descriptor instead.
func (*PipelineMeta) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *PipelineMeta) GetPipelineID() string {
	if x != nil {
		return x.PipelineID
	}
	return ""
}

func (x *PipelineMeta) GetInstanceID() int64 {
	if x != nil {
		return x.InstanceID
	}
	return 0
}

func (x *PipelineMeta) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

type ClusterMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID   string   `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	ClusterName string   `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	Reason      string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Deleted     bool     `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	IngressIPs  []string `protobuf:"bytes,5,rep,name=ingressIPs,proto3" json:"ingressIPs,omitempty"`
}

func (x *ClusterMeta) Reset() {
	*x = ClusterMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMeta) ProtoMessage() {}

func (x *ClusterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMeta.ProtoReflect.Descriptor instead.
func (*ClusterMeta) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *ClusterMeta) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ClusterMeta) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterMeta) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ClusterMeta) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *ClusterMeta) GetIngressIPs() []string {
	if x != nil {
		return x.IngressIPs
	}
	return nil
}

type RepoArtifactMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Git     *GitOptions  `protobuf:"bytes,1,opt,name=git,proto3" json:"git,omitempty"`
	Helm    *HelmOptions `protobuf:"bytes,2,opt,name=helm,proto3" json:"helm,omitempty"`
	Timeout int64        `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *RepoArtifactMeta) Reset() {
	*x = RepoArtifactMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoArtifactMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoArtifactMeta) ProtoMessage() {}

func (x *RepoArtifactMeta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoArtifactMeta.ProtoReflect.Descriptor instead.
func (*RepoArtifactMeta) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *RepoArtifactMeta) GetGit() *GitOptions {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *RepoArtifactMeta) GetHelm() *HelmOptions {
	if x != nil {
		return x.Helm
	}
	return nil
}

func (x *RepoArtifactMeta) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type GitOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision          string      `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	RepoArtifactFiles []*RepoFile `protobuf:"bytes,2,rep,name=repoArtifactFiles,proto3" json:"repoArtifactFiles,omitempty"`
}

func (x *GitOptions) Reset() {
	*x = GitOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitOptions) ProtoMessage() {}

func (x *GitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitOptions.ProtoReflect.Descriptor instead.
func (*GitOptions) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *GitOptions) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *GitOptions) GetRepoArtifactFiles() []*RepoFile {
	if x != nil {
		return x.RepoArtifactFiles
	}
	return nil
}

type HelmOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartName string `protobuf:"bytes,1,opt,name=chartName,proto3" json:"chartName,omitempty"`
	Tag       string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *HelmOptions) Reset() {
	*x = HelmOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmOptions) ProtoMessage() {}

func (x *HelmOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmOptions.ProtoReflect.Descriptor instead.
func (*HelmOptions) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{14}
}

func (x *HelmOptions) GetChartName() string {
	if x != nil {
		return x.ChartName
	}
	return ""
}

func (x *HelmOptions) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type RepoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RelPath  string   `protobuf:"bytes,2,opt,name=relPath,proto3" json:"relPath,omitempty"`
	FileType FileType `protobuf:"varint,3,opt,name=fileType,proto3,enum=rafay.dev.types.config.FileType" json:"fileType,omitempty"`
}

func (x *RepoFile) Reset() {
	*x = RepoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoFile) ProtoMessage() {}

func (x *RepoFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoFile.ProtoReflect.Descriptor instead.
func (*RepoFile) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{15}
}

func (x *RepoFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RepoFile) GetRelPath() string {
	if x != nil {
		return x.RelPath
	}
	return ""
}

func (x *RepoFile) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FileTypeNotSet
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Payload  []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	FileType FileType `protobuf:"varint,3,opt,name=fileType,proto3,enum=rafay.dev.types.config.FileType" json:"fileType,omitempty"`
	Ordinal  int64    `protobuf:"varint,4,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{16}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *File) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FileTypeNotSet
}

func (x *File) GetOrdinal() int64 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

type HelmExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atomic                   bool     `protobuf:"varint,1,opt,name=atomic,proto3" json:"atomic,omitempty"`
	Wait                     bool     `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`
	Force                    bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	NoHooks                  bool     `protobuf:"varint,4,opt,name=noHooks,proto3" json:"noHooks,omitempty"`
	MaxHistory               int32    `protobuf:"zigzag32,5,opt,name=maxHistory,proto3" json:"maxHistory,omitempty"`
	RenderSubChartNotes      bool     `protobuf:"varint,6,opt,name=renderSubChartNotes,proto3" json:"renderSubChartNotes,omitempty"`
	ResetValues              bool     `protobuf:"varint,7,opt,name=resetValues,proto3" json:"resetValues,omitempty"`
	ReuseValues              bool     `protobuf:"varint,8,opt,name=reuseValues,proto3" json:"reuseValues,omitempty"`
	Set                      []string `protobuf:"bytes,9,rep,name=set,proto3" json:"set,omitempty"`
	SkipCRDs                 bool     `protobuf:"varint,10,opt,name=skipCRDs,proto3" json:"skipCRDs,omitempty"`
	Timeout                  int64    `protobuf:"zigzag64,11,opt,name=timeout,proto3" json:"timeout,omitempty"`
	CleanUpOnFail            bool     `protobuf:"varint,12,opt,name=cleanUpOnFail,proto3" json:"cleanUpOnFail,omitempty"`
	Description              string   `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	DisableOpenAPIValidation bool     `protobuf:"varint,14,opt,name=disableOpenAPIValidation,proto3" json:"disableOpenAPIValidation,omitempty"`
	KeepHistory              bool     `protobuf:"varint,15,opt,name=keepHistory,proto3" json:"keepHistory,omitempty"`
}

func (x *HelmExtra) Reset() {
	*x = HelmExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmExtra) ProtoMessage() {}

func (x *HelmExtra) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmExtra.ProtoReflect.Descriptor instead.
func (*HelmExtra) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{17}
}

func (x *HelmExtra) GetAtomic() bool {
	if x != nil {
		return x.Atomic
	}
	return false
}

func (x *HelmExtra) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *HelmExtra) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *HelmExtra) GetNoHooks() bool {
	if x != nil {
		return x.NoHooks
	}
	return false
}

func (x *HelmExtra) GetMaxHistory() int32 {
	if x != nil {
		return x.MaxHistory
	}
	return 0
}

func (x *HelmExtra) GetRenderSubChartNotes() bool {
	if x != nil {
		return x.RenderSubChartNotes
	}
	return false
}

func (x *HelmExtra) GetResetValues() bool {
	if x != nil {
		return x.ResetValues
	}
	return false
}

func (x *HelmExtra) GetReuseValues() bool {
	if x != nil {
		return x.ReuseValues
	}
	return false
}

func (x *HelmExtra) GetSet() []string {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *HelmExtra) GetSkipCRDs() bool {
	if x != nil {
		return x.SkipCRDs
	}
	return false
}

func (x *HelmExtra) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *HelmExtra) GetCleanUpOnFail() bool {
	if x != nil {
		return x.CleanUpOnFail
	}
	return false
}

func (x *HelmExtra) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HelmExtra) GetDisableOpenAPIValidation() bool {
	if x != nil {
		return x.DisableOpenAPIValidation
	}
	return false
}

func (x *HelmExtra) GetKeepHistory() bool {
	if x != nil {
		return x.KeepHistory
	}
	return false
}

type YamlExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force                    bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	DisableOpenAPIValidation bool `protobuf:"varint,2,opt,name=disableOpenAPIValidation,proto3" json:"disableOpenAPIValidation,omitempty"`
}

func (x *YamlExtra) Reset() {
	*x = YamlExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamlExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamlExtra) ProtoMessage() {}

func (x *YamlExtra) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamlExtra.ProtoReflect.Descriptor instead.
func (*YamlExtra) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{18}
}

func (x *YamlExtra) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *YamlExtra) GetDisableOpenAPIValidation() bool {
	if x != nil {
		return x.DisableOpenAPIValidation
	}
	return false
}

type ArtifactExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Helm             *HelmExtra        `protobuf:"bytes,1,opt,name=helm,proto3" json:"helm,omitempty"`
	MaxHistory       int32             `protobuf:"zigzag32,2,opt,name=maxHistory,proto3" json:"maxHistory,omitempty"`
	Repo             *RepoArtifactMeta `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Pipeline         *PipelineMeta     `protobuf:"bytes,4,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	UsePlacementName bool              `protobuf:"varint,5,opt,name=usePlacementName,proto3" json:"usePlacementName,omitempty"`
	Yaml             *YamlExtra        `protobuf:"bytes,6,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *ArtifactExtra) Reset() {
	*x = ArtifactExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactExtra) ProtoMessage() {}

func (x *ArtifactExtra) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactExtra.ProtoReflect.Descriptor instead.
func (*ArtifactExtra) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{19}
}

func (x *ArtifactExtra) GetHelm() *HelmExtra {
	if x != nil {
		return x.Helm
	}
	return nil
}

func (x *ArtifactExtra) GetMaxHistory() int32 {
	if x != nil {
		return x.MaxHistory
	}
	return 0
}

func (x *ArtifactExtra) GetRepo() *RepoArtifactMeta {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *ArtifactExtra) GetPipeline() *PipelineMeta {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *ArtifactExtra) GetUsePlacementName() bool {
	if x != nil {
		return x.UsePlacementName
	}
	return false
}

func (x *ArtifactExtra) GetYaml() *YamlExtra {
	if x != nil {
		return x.Yaml
	}
	return nil
}

type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      HealthStatus           `protobuf:"varint,1,opt,name=status,proto3,enum=rafay.dev.types.config.HealthStatus" json:"status,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	Comment     string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{20}
}

func (x *HealthCheck) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_UNKNOWN
}

func (x *HealthCheck) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *HealthCheck) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Tag        string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	PullPolicy string `protobuf:"bytes,3,opt,name=pullPolicy,proto3" json:"pullPolicy,omitempty"`
	Digest     string `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{21}
}

func (x *Image) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Image) GetPullPolicy() string {
	if x != nil {
		return x.PullPolicy
	}
	return ""
}

func (x *Image) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type VolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
}

func (x *VolumeMount) Reset() {
	*x = VolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMount) ProtoMessage() {}

func (x *VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{22}
}

func (x *VolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

type InitContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image           string         `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	ImagePullPolicy string         `protobuf:"bytes,3,opt,name=imagePullPolicy,proto3" json:"imagePullPolicy,omitempty"`
	VolumeMounts    []*VolumeMount `protobuf:"bytes,4,rep,name=volumeMounts,proto3" json:"volumeMounts,omitempty"`
}

func (x *InitContainer) Reset() {
	*x = InitContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitContainer) ProtoMessage() {}

func (x *InitContainer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitContainer.ProtoReflect.Descriptor instead.
func (*InitContainer) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{23}
}

func (x *InitContainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InitContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *InitContainer) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

func (x *InitContainer) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

type Restic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodVolumePath string `protobuf:"bytes,1,opt,name=podVolumePath,proto3" json:"podVolumePath,omitempty"`
	Privileged    bool   `protobuf:"varint,2,opt,name=privileged,proto3" json:"privileged,omitempty"`
}

func (x *Restic) Reset() {
	*x = Restic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Restic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Restic) ProtoMessage() {}

func (x *Restic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Restic.ProtoReflect.Descriptor instead.
func (*Restic) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{24}
}

func (x *Restic) GetPodVolumePath() string {
	if x != nil {
		return x.PodVolumePath
	}
	return ""
}

func (x *Restic) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

type ProjectTaskSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskSetID string `protobuf:"bytes,1,opt,name=taskSetID,proto3" json:"taskSetID,omitempty"`
	ProjectID string `protobuf:"bytes,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (x *ProjectTaskSet) Reset() {
	*x = ProjectTaskSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_types_config_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectTaskSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectTaskSet) ProtoMessage() {}

func (x *ProjectTaskSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_types_config_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectTaskSet.ProtoReflect.Descriptor instead.
func (*ProjectTaskSet) Descriptor() ([]byte, []int) {
	return file_proto_types_config_config_proto_rawDescGZIP(), []int{25}
}

func (x *ProjectTaskSet) GetTaskSetID() string {
	if x != nil {
		return x.TaskSetID
	}
	return ""
}

func (x *ProjectTaskSet) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

var File_proto_types_config_config_proto protoreflect.FileDescriptor

var file_proto_types_config_config_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x04, 0x0a,
	0x0b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x28, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x12, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x73,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xea, 0xde,
	0x1f, 0x12, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x41,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x73, 0x4f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0x7e, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xfa, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x10, 0x6b, 0x75, 0x62, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x6b, 0x75, 0x62,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x68, 0x65,
	0x6c, 0x6d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6d, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1e, 0xc8, 0xde, 0x1f, 0x00,
	0xd0, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0xd0, 0xde, 0x1f, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x70, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1e, 0xc8, 0xde, 0x1f, 0x00, 0xd0, 0xde, 0x1f,
	0x01, 0xea, 0xde, 0x1f, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x01,
	0x0a, 0x0a, 0x56, 0x32, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x78, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xde, 0x1f,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xde, 0x1f, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x50, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x50, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x03, 0x67,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x67, 0x69,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x52, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x70,
	0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x4a, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x11,
	0x72, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0xf2, 0xde, 0x1f, 0x2d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x3a, 0x22, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x22, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xea, 0xde, 0x1f, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x22, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xea, 0xde, 0x1f, 0x03,
	0x74, 0x61, 0x67, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xea, 0xde, 0x1f, 0x07, 0x72, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x84, 0x02, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x09, 0x70, 0x67, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x10, 0xf2, 0xde, 0x1f, 0x0c, 0x70, 0x67, 0x3a, 0x22,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x65, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x67, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x24, 0xea, 0xde, 0x1f, 0x07, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0xf2, 0xde, 0x1f, 0x15, 0x70, 0x67, 0x3a, 0x22, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x2c, 0x75, 0x73, 0x65, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x22, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xec, 0x05, 0x0a, 0x09, 0x48, 0x65, 0x6c,
	0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x61, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x52, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x04, 0x77, 0x61,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x77, 0x61,
	0x69, 0x74, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x6e, 0x6f, 0x48,
	0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07,
	0x6e, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x07, 0x6e, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x73,
	0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x49, 0x0a, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x17, 0xea,
	0xde, 0x1f, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0f, 0xea, 0xde, 0x1f, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x0b, 0x72, 0x65, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0f, 0xea, 0xde, 0x1f, 0x0b, 0x72, 0x65, 0x75, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x07,
	0xea, 0xde, 0x1f, 0x03, 0x73, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x08,
	0x73, 0x6b, 0x69, 0x70, 0x43, 0x52, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0c,
	0xea, 0xde, 0x1f, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x52, 0x44, 0x73, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x70, 0x43, 0x52, 0x44, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x1c, 0xea, 0xde, 0x1f, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0xfa, 0xde, 0x1f, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37,
	0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x55, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x55, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x55,
	0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xde,
	0x1f, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x18, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xea, 0xde,
	0x1f, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0xea, 0xde, 0x1f, 0x0b, 0x6b,
	0x65, 0x65, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x59, 0x61, 0x6d, 0x6c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0xea, 0xde, 0x1f, 0x18, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf7, 0x03, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x52, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22,
	0x52, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1b, 0xf2, 0xde, 0x1f,
	0x17, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x5d,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x22, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x47, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x22, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x59, 0x61,
	0x6d, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x1b, 0xf2, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x22, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x22, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x66,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde,
	0x1f, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x03, 0x74,
	0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xc8, 0xde, 0x1f,
	0x01, 0xea, 0xde, 0x1f, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xc8, 0xde, 0x1f,
	0x01, 0xea, 0xde, 0x1f, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xc4, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75,
	0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x2a, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x0d,
	0x70, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x2a, 0x42, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x01, 0x1a,
	0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x83, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x59, 0x61, 0x6d, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x6d, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x6c, 0x6d, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x61, 0x66, 0x61, 0x79, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x48,
	0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x59, 0x61, 0x6d, 0x6c, 0x49, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x6d, 0x49, 0x6e, 0x48, 0x65, 0x6c, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x10, 0x06, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0xbd, 0x01, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x74, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x61, 0x66, 0x61, 0x79, 0x57, 0x69, 0x7a,
	0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x6d, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x61,
	0x66, 0x61, 0x79, 0x56, 0x4d, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x10, 0x07, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x6a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4b,
	0x38, 0x73, 0x59, 0x41, 0x4d, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x6c,
	0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x53, 0x4f, 0x4e, 0x46, 0x69, 0x6c, 0x65, 0x10,
	0x04, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x4b, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x04,
	0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x3b, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x1a, 0x04, 0x88, 0xa3, 0x1e,
	0x00, 0x42, 0x83, 0x02, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x66, 0x61,
	0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa2, 0x02, 0x04, 0x52, 0x44, 0x54, 0x43,
	0xaa, 0x02, 0x16, 0x52, 0x61, 0x66, 0x61, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xca, 0x02, 0x16, 0x52, 0x61, 0x66, 0x61,
	0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0xe2, 0x02, 0x22, 0x52, 0x61, 0x66, 0x61, 0x79, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x52, 0x61, 0x66, 0x61, 0x79, 0x3a,
	0x3a, 0x44, 0x65, 0x76, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xe0, 0xe2, 0x1e, 0x01, 0xc0,
	0xe3, 0x1e, 0x01, 0xc8, 0xe3, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_types_config_config_proto_rawDescOnce sync.Once
	file_proto_types_config_config_proto_rawDescData = file_proto_types_config_config_proto_rawDesc
)

func file_proto_types_config_config_proto_rawDescGZIP() []byte {
	file_proto_types_config_config_proto_rawDescOnce.Do(func() {
		file_proto_types_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_types_config_config_proto_rawDescData)
	})
	return file_proto_types_config_config_proto_rawDescData
}

var file_proto_types_config_config_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_types_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_proto_types_config_config_proto_goTypes = []interface{}{
	(SnapshotRefType)(0),            // 0: rafay.dev.types.config.SnapshotRefType
	(WorkloadType)(0),               // 1: rafay.dev.types.config.WorkloadType
	(ArtifactType)(0),               // 2: rafay.dev.types.config.ArtifactType
	(FileType)(0),                   // 3: rafay.dev.types.config.FileType
	(HealthStatus)(0),               // 4: rafay.dev.types.config.HealthStatus
	(ShareMode)(0),                  // 5: rafay.dev.types.config.ShareMode
	(*SnapshotRef)(nil),             // 6: rafay.dev.types.config.SnapshotRef
	(*DiscoveryConfig)(nil),         // 7: rafay.dev.types.config.DiscoveryConfig
	(*ResourceRequirements)(nil),    // 8: rafay.dev.types.config.ResourceRequirements
	(*ResourceQuantity)(nil),        // 9: rafay.dev.types.config.ResourceQuantity
	(*ComponentConfig)(nil),         // 10: rafay.dev.types.config.ComponentConfig
	(*PrometheusCustomization)(nil), // 11: rafay.dev.types.config.PrometheusCustomization
	(*TaskTemplate)(nil),            // 12: rafay.dev.types.config.TaskTemplate
	(*TaskStatusTemplate)(nil),      // 13: rafay.dev.types.config.TaskStatusTemplate
	(*V2Workload)(nil),              // 14: rafay.dev.types.config.V2Workload
	(*FileMeta)(nil),                // 15: rafay.dev.types.config.FileMeta
	(*PipelineMeta)(nil),            // 16: rafay.dev.types.config.PipelineMeta
	(*ClusterMeta)(nil),             // 17: rafay.dev.types.config.ClusterMeta
	(*RepoArtifactMeta)(nil),        // 18: rafay.dev.types.config.RepoArtifactMeta
	(*GitOptions)(nil),              // 19: rafay.dev.types.config.GitOptions
	(*HelmOptions)(nil),             // 20: rafay.dev.types.config.HelmOptions
	(*RepoFile)(nil),                // 21: rafay.dev.types.config.RepoFile
	(*File)(nil),                    // 22: rafay.dev.types.config.File
	(*HelmExtra)(nil),               // 23: rafay.dev.types.config.HelmExtra
	(*YamlExtra)(nil),               // 24: rafay.dev.types.config.YamlExtra
	(*ArtifactExtra)(nil),           // 25: rafay.dev.types.config.ArtifactExtra
	(*HealthCheck)(nil),             // 26: rafay.dev.types.config.HealthCheck
	(*Image)(nil),                   // 27: rafay.dev.types.config.Image
	(*VolumeMount)(nil),             // 28: rafay.dev.types.config.VolumeMount
	(*InitContainer)(nil),           // 29: rafay.dev.types.config.InitContainer
	(*Restic)(nil),                  // 30: rafay.dev.types.config.Restic
	(*ProjectTaskSet)(nil),          // 31: rafay.dev.types.config.ProjectTaskSet
	nil,                             // 32: rafay.dev.types.config.DiscoveryConfig.LabelsEntry
	(*v1.ObjectMeta)(nil),           // 33: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*controller.TaskSpec)(nil),     // 34: rafay.dev.types.controller.TaskSpec
	(*controller.TaskStatus)(nil),   // 35: rafay.dev.types.controller.TaskStatus
	(*timestamppb.Timestamp)(nil),   // 36: google.protobuf.Timestamp
}
var file_proto_types_config_config_proto_depIdxs = []int32{
	0,  // 0: rafay.dev.types.config.SnapshotRef.refType:type_name -> rafay.dev.types.config.SnapshotRefType
	32, // 1: rafay.dev.types.config.DiscoveryConfig.labels:type_name -> rafay.dev.types.config.DiscoveryConfig.LabelsEntry
	9,  // 2: rafay.dev.types.config.ResourceRequirements.limits:type_name -> rafay.dev.types.config.ResourceQuantity
	7,  // 3: rafay.dev.types.config.ComponentConfig.discoveryConfig:type_name -> rafay.dev.types.config.DiscoveryConfig
	10, // 4: rafay.dev.types.config.PrometheusCustomization.prometheusAdapter:type_name -> rafay.dev.types.config.ComponentConfig
	10, // 5: rafay.dev.types.config.PrometheusCustomization.metricsServer:type_name -> rafay.dev.types.config.ComponentConfig
	10, // 6: rafay.dev.types.config.PrometheusCustomization.kubeStateMetrics:type_name -> rafay.dev.types.config.ComponentConfig
	10, // 7: rafay.dev.types.config.PrometheusCustomization.nodeExporter:type_name -> rafay.dev.types.config.ComponentConfig
	10, // 8: rafay.dev.types.config.PrometheusCustomization.helmExporter:type_name -> rafay.dev.types.config.ComponentConfig
	8,  // 9: rafay.dev.types.config.PrometheusCustomization.resources:type_name -> rafay.dev.types.config.ResourceRequirements
	33, // 10: rafay.dev.types.config.TaskTemplate.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	34, // 11: rafay.dev.types.config.TaskTemplate.spec:type_name -> rafay.dev.types.controller.TaskSpec
	33, // 12: rafay.dev.types.config.TaskStatusTemplate.objectMeta:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	35, // 13: rafay.dev.types.config.TaskStatusTemplate.status:type_name -> rafay.dev.types.controller.TaskStatus
	1,  // 14: rafay.dev.types.config.V2Workload.workloadType:type_name -> rafay.dev.types.config.WorkloadType
	3,  // 15: rafay.dev.types.config.FileMeta.fileType:type_name -> rafay.dev.types.config.FileType
	19, // 16: rafay.dev.types.config.RepoArtifactMeta.git:type_name -> rafay.dev.types.config.GitOptions
	20, // 17: rafay.dev.types.config.RepoArtifactMeta.helm:type_name -> rafay.dev.types.config.HelmOptions
	21, // 18: rafay.dev.types.config.GitOptions.repoArtifactFiles:type_name -> rafay.dev.types.config.RepoFile
	3,  // 19: rafay.dev.types.config.RepoFile.fileType:type_name -> rafay.dev.types.config.FileType
	3,  // 20: rafay.dev.types.config.File.fileType:type_name -> rafay.dev.types.config.FileType
	23, // 21: rafay.dev.types.config.ArtifactExtra.helm:type_name -> rafay.dev.types.config.HelmExtra
	18, // 22: rafay.dev.types.config.ArtifactExtra.repo:type_name -> rafay.dev.types.config.RepoArtifactMeta
	16, // 23: rafay.dev.types.config.ArtifactExtra.pipeline:type_name -> rafay.dev.types.config.PipelineMeta
	24, // 24: rafay.dev.types.config.ArtifactExtra.yaml:type_name -> rafay.dev.types.config.YamlExtra
	4,  // 25: rafay.dev.types.config.HealthCheck.status:type_name -> rafay.dev.types.config.HealthStatus
	36, // 26: rafay.dev.types.config.HealthCheck.lastUpdated:type_name -> google.protobuf.Timestamp
	28, // 27: rafay.dev.types.config.InitContainer.volumeMounts:type_name -> rafay.dev.types.config.VolumeMount
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_proto_types_config_config_proto_init() }
func file_proto_types_config_config_proto_init() {
	if File_proto_types_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_types_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrometheusCustomization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V2Workload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoArtifactMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamlExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Restic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_types_config_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectTaskSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_types_config_config_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_types_config_config_proto_goTypes,
		DependencyIndexes: file_proto_types_config_config_proto_depIdxs,
		EnumInfos:         file_proto_types_config_config_proto_enumTypes,
		MessageInfos:      file_proto_types_config_config_proto_msgTypes,
	}.Build()
	File_proto_types_config_config_proto = out.File
	file_proto_types_config_config_proto_rawDesc = nil
	file_proto_types_config_config_proto_goTypes = nil
	file_proto_types_config_config_proto_depIdxs = nil
}
