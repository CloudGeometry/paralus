// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigOverrideSpec OverrideSpec is the specification of override
//
// swagger:model configOverrideSpec
type ConfigOverrideSpec struct {

	// cluster placement
	ClusterPlacement *TypesconfigPlacementSpec `json:"clusterPlacement,omitempty"`

	// cluster selector
	ClusterSelector string `json:"clusterSelector,omitempty"`

	// overrides is list of objects to be overriden
	Overrides []*ControllerStepObject `json:"overrides"`

	// repo artifact meta
	RepoArtifactMeta *ConfigRepoArtifactMeta `json:"repoArtifactMeta,omitempty"`

	// repository ref
	RepositoryRef string `json:"repositoryRef,omitempty"`

	// an override is only applied if selector matches the taskset/namespace
	// labels
	ResourceSelector string `json:"resourceSelector,omitempty"`

	// template overrides
	TemplateOverrides *ConfigTemplateOverrides `json:"templateOverrides,omitempty"`

	// values file
	ValuesFile string `json:"valuesFile,omitempty"`
}

// Validate validates this config override spec
func (m *ConfigOverrideSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterPlacement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoArtifactMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigOverrideSpec) validateClusterPlacement(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterPlacement) { // not required
		return nil
	}

	if m.ClusterPlacement != nil {
		if err := m.ClusterPlacement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterPlacement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterPlacement")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigOverrideSpec) validateOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.Overrides) { // not required
		return nil
	}

	for i := 0; i < len(m.Overrides); i++ {
		if swag.IsZero(m.Overrides[i]) { // not required
			continue
		}

		if m.Overrides[i] != nil {
			if err := m.Overrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("overrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("overrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigOverrideSpec) validateRepoArtifactMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.RepoArtifactMeta) { // not required
		return nil
	}

	if m.RepoArtifactMeta != nil {
		if err := m.RepoArtifactMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoArtifactMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repoArtifactMeta")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigOverrideSpec) validateTemplateOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.TemplateOverrides) { // not required
		return nil
	}

	if m.TemplateOverrides != nil {
		if err := m.TemplateOverrides.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateOverrides")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateOverrides")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config override spec based on the context it is used
func (m *ConfigOverrideSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterPlacement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepoArtifactMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplateOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigOverrideSpec) contextValidateClusterPlacement(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterPlacement != nil {
		if err := m.ClusterPlacement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterPlacement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterPlacement")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigOverrideSpec) contextValidateOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Overrides); i++ {

		if m.Overrides[i] != nil {
			if err := m.Overrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("overrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("overrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigOverrideSpec) contextValidateRepoArtifactMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.RepoArtifactMeta != nil {
		if err := m.RepoArtifactMeta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoArtifactMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repoArtifactMeta")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigOverrideSpec) contextValidateTemplateOverrides(ctx context.Context, formats strfmt.Registry) error {

	if m.TemplateOverrides != nil {
		if err := m.TemplateOverrides.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templateOverrides")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templateOverrides")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigOverrideSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigOverrideSpec) UnmarshalBinary(b []byte) error {
	var res ConfigOverrideSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
