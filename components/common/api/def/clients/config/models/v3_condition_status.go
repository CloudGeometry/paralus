// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V3ConditionStatus $title: ConditionStatus
// $description: status of a condition for a resource
//
// swagger:model v3ConditionStatus
type V3ConditionStatus string

func NewV3ConditionStatus(value V3ConditionStatus) *V3ConditionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V3ConditionStatus.
func (m V3ConditionStatus) Pointer() *V3ConditionStatus {
	return &m
}

const (

	// V3ConditionStatusStatusNotSet captures enum value "StatusNotSet"
	V3ConditionStatusStatusNotSet V3ConditionStatus = "StatusNotSet"

	// V3ConditionStatusStatusSubmitted captures enum value "StatusSubmitted"
	V3ConditionStatusStatusSubmitted V3ConditionStatus = "StatusSubmitted"

	// V3ConditionStatusStatusOK captures enum value "StatusOK"
	V3ConditionStatusStatusOK V3ConditionStatus = "StatusOK"

	// V3ConditionStatusStatusFailed captures enum value "StatusFailed"
	V3ConditionStatusStatusFailed V3ConditionStatus = "StatusFailed"
)

// for schema
var v3ConditionStatusEnum []interface{}

func init() {
	var res []V3ConditionStatus
	if err := json.Unmarshal([]byte(`["StatusNotSet","StatusSubmitted","StatusOK","StatusFailed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3ConditionStatusEnum = append(v3ConditionStatusEnum, v)
	}
}

func (m V3ConditionStatus) validateV3ConditionStatusEnum(path, location string, value V3ConditionStatus) error {
	if err := validate.EnumCase(path, location, value, v3ConditionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v3 condition status
func (m V3ConditionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV3ConditionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v3 condition status based on context it is used
func (m V3ConditionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
