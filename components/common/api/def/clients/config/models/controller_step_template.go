// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ControllerStepTemplate +kubebuilder:object:generate=true
// StepTemplate is the description of a step
//
// swagger:model controllerStepTemplate
type ControllerStepTemplate struct {

	// job template
	JobTemplate *V1beta1JobTemplateSpec `json:"jobTemplate,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// object
	Object *ControllerStepObject `json:"object,omitempty"`

	// on failed
	OnFailed string `json:"onFailed,omitempty"`
}

// Validate validates this controller step template
func (m *ControllerStepTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerStepTemplate) validateJobTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.JobTemplate) { // not required
		return nil
	}

	if m.JobTemplate != nil {
		if err := m.JobTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerStepTemplate) validateObject(formats strfmt.Registry) error {
	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this controller step template based on the context it is used
func (m *ControllerStepTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerStepTemplate) contextValidateJobTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.JobTemplate != nil {
		if err := m.JobTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerStepTemplate) contextValidateObject(ctx context.Context, formats strfmt.Registry) error {

	if m.Object != nil {
		if err := m.Object.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ControllerStepTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControllerStepTemplate) UnmarshalBinary(b []byte) error {
	var res ControllerStepTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
