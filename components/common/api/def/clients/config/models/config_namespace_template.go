// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigNamespaceTemplate NamespaceTemplate is the template for creating namespace
//
// swagger:model configNamespaceTemplate
type ConfigNamespaceTemplate struct {

	// limit range
	LimitRange *TypesconfigLimitRange `json:"limitRange,omitempty"`

	// namespace from file
	NamespaceFromFile string `json:"namespaceFromFile,omitempty"`

	// namespace from repo
	NamespaceFromRepo string `json:"namespaceFromRepo,omitempty"`

	// object meta
	ObjectMeta *V1ObjectMeta `json:"objectMeta,omitempty"`

	// placement
	Placement *TypesconfigPlacementSpec `json:"placement,omitempty"`

	// repo artifact meta
	RepoArtifactMeta *ConfigRepoArtifactMeta `json:"repoArtifactMeta,omitempty"`

	// repo ref
	RepoRef string `json:"repoRef,omitempty"`

	// resource quota
	ResourceQuota *TypesconfigResourceQuota `json:"resourceQuota,omitempty"`

	// spec
	Spec *TypescontrollerNamespaceSpec `json:"spec,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this config namespace template
func (m *ConfigNamespaceTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimitRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoArtifactMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigNamespaceTemplate) validateLimitRange(formats strfmt.Registry) error {
	if swag.IsZero(m.LimitRange) { // not required
		return nil
	}

	if m.LimitRange != nil {
		if err := m.LimitRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limitRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("limitRange")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) validateObjectMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectMeta) { // not required
		return nil
	}

	if m.ObjectMeta != nil {
		if err := m.ObjectMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectMeta")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) validatePlacement(formats strfmt.Registry) error {
	if swag.IsZero(m.Placement) { // not required
		return nil
	}

	if m.Placement != nil {
		if err := m.Placement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placement")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) validateRepoArtifactMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.RepoArtifactMeta) { // not required
		return nil
	}

	if m.RepoArtifactMeta != nil {
		if err := m.RepoArtifactMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoArtifactMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repoArtifactMeta")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) validateResourceQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceQuota) { // not required
		return nil
	}

	if m.ResourceQuota != nil {
		if err := m.ResourceQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceQuota")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config namespace template based on the context it is used
func (m *ConfigNamespaceTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLimitRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlacement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepoArtifactMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceQuota(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigNamespaceTemplate) contextValidateLimitRange(ctx context.Context, formats strfmt.Registry) error {

	if m.LimitRange != nil {
		if err := m.LimitRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limitRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("limitRange")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) contextValidateObjectMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectMeta != nil {
		if err := m.ObjectMeta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectMeta")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) contextValidatePlacement(ctx context.Context, formats strfmt.Registry) error {

	if m.Placement != nil {
		if err := m.Placement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placement")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) contextValidateRepoArtifactMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.RepoArtifactMeta != nil {
		if err := m.RepoArtifactMeta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoArtifactMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repoArtifactMeta")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) contextValidateResourceQuota(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceQuota != nil {
		if err := m.ResourceQuota.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceQuota")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceQuota")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigNamespaceTemplate) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigNamespaceTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigNamespaceTemplate) UnmarshalBinary(b []byte) error {
	var res ConfigNamespaceTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
