// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypescontrollerNamespaceSpec +kubebuilder:object:generate=true
// NamespaceSpec is the spec of the namespace
//
// swagger:model typescontrollerNamespaceSpec
type TypescontrollerNamespaceSpec struct {

	// init
	Init []*ControllerStepTemplate `json:"init"`

	// namespace meta
	NamespaceMeta *V1ObjectMeta `json:"namespaceMeta,omitempty"`

	// post create
	PostCreate []*ControllerStepTemplate `json:"postCreate"`

	// pre delete
	PreDelete []*ControllerStepTemplate `json:"preDelete"`
}

// Validate validates this typescontroller namespace spec
func (m *TypescontrollerNamespaceSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostCreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreDelete(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypescontrollerNamespaceSpec) validateInit(formats strfmt.Registry) error {
	if swag.IsZero(m.Init) { // not required
		return nil
	}

	for i := 0; i < len(m.Init); i++ {
		if swag.IsZero(m.Init[i]) { // not required
			continue
		}

		if m.Init[i] != nil {
			if err := m.Init[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("init" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("init" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypescontrollerNamespaceSpec) validateNamespaceMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceMeta) { // not required
		return nil
	}

	if m.NamespaceMeta != nil {
		if err := m.NamespaceMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaceMeta")
			}
			return err
		}
	}

	return nil
}

func (m *TypescontrollerNamespaceSpec) validatePostCreate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostCreate) { // not required
		return nil
	}

	for i := 0; i < len(m.PostCreate); i++ {
		if swag.IsZero(m.PostCreate[i]) { // not required
			continue
		}

		if m.PostCreate[i] != nil {
			if err := m.PostCreate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postCreate" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypescontrollerNamespaceSpec) validatePreDelete(formats strfmt.Registry) error {
	if swag.IsZero(m.PreDelete) { // not required
		return nil
	}

	for i := 0; i < len(m.PreDelete); i++ {
		if swag.IsZero(m.PreDelete[i]) { // not required
			continue
		}

		if m.PreDelete[i] != nil {
			if err := m.PreDelete[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preDelete" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this typescontroller namespace spec based on the context it is used
func (m *TypescontrollerNamespaceSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostCreate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypescontrollerNamespaceSpec) contextValidateInit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Init); i++ {

		if m.Init[i] != nil {
			if err := m.Init[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("init" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("init" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypescontrollerNamespaceSpec) contextValidateNamespaceMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceMeta != nil {
		if err := m.NamespaceMeta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceMeta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaceMeta")
			}
			return err
		}
	}

	return nil
}

func (m *TypescontrollerNamespaceSpec) contextValidatePostCreate(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PostCreate); i++ {

		if m.PostCreate[i] != nil {
			if err := m.PostCreate[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postCreate" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postCreate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypescontrollerNamespaceSpec) contextValidatePreDelete(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreDelete); i++ {

		if m.PreDelete[i] != nil {
			if err := m.PreDelete[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preDelete" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preDelete" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypescontrollerNamespaceSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypescontrollerNamespaceSpec) UnmarshalBinary(b []byte) error {
	var res TypescontrollerNamespaceSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
