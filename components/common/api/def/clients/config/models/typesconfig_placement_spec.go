// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesconfigPlacementSpec PlacementSpec is the specification of placement
//
// swagger:model typesconfigPlacementSpec
type TypesconfigPlacementSpec struct {

	// cluster labels
	ClusterLabels []*TypesconfigPlacementLabel `json:"clusterLabels"`

	// cluster selector
	ClusterSelector string `json:"clusterSelector,omitempty"`

	// drift action
	DriftAction *ConfigDriftReconcillationAction `json:"driftAction,omitempty"`

	// node grouping keys
	NodeGroupingKeys []string `json:"nodeGroupingKeys"`

	// placementType is the type of placement
	PlacementType *ConfigPlacementType `json:"placementType,omitempty"`
}

// Validate validates this typesconfig placement spec
func (m *TypesconfigPlacementSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriftAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacementType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesconfigPlacementSpec) validateClusterLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterLabels); i++ {
		if swag.IsZero(m.ClusterLabels[i]) { // not required
			continue
		}

		if m.ClusterLabels[i] != nil {
			if err := m.ClusterLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesconfigPlacementSpec) validateDriftAction(formats strfmt.Registry) error {
	if swag.IsZero(m.DriftAction) { // not required
		return nil
	}

	if m.DriftAction != nil {
		if err := m.DriftAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driftAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driftAction")
			}
			return err
		}
	}

	return nil
}

func (m *TypesconfigPlacementSpec) validatePlacementType(formats strfmt.Registry) error {
	if swag.IsZero(m.PlacementType) { // not required
		return nil
	}

	if m.PlacementType != nil {
		if err := m.PlacementType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placementType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placementType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this typesconfig placement spec based on the context it is used
func (m *TypesconfigPlacementSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDriftAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlacementType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesconfigPlacementSpec) contextValidateClusterLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterLabels); i++ {

		if m.ClusterLabels[i] != nil {
			if err := m.ClusterLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesconfigPlacementSpec) contextValidateDriftAction(ctx context.Context, formats strfmt.Registry) error {

	if m.DriftAction != nil {
		if err := m.DriftAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driftAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("driftAction")
			}
			return err
		}
	}

	return nil
}

func (m *TypesconfigPlacementSpec) contextValidatePlacementType(ctx context.Context, formats strfmt.Registry) error {

	if m.PlacementType != nil {
		if err := m.PlacementType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placementType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placementType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesconfigPlacementSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesconfigPlacementSpec) UnmarshalBinary(b []byte) error {
	var res TypesconfigPlacementSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
