// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigPlacementType config placement type
//
// swagger:model configPlacementType
type ConfigPlacementType string

func NewConfigPlacementType(value ConfigPlacementType) *ConfigPlacementType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigPlacementType.
func (m ConfigPlacementType) Pointer() *ConfigPlacementType {
	return &m
}

const (

	// ConfigPlacementTypeClusterSelector captures enum value "ClusterSelector"
	ConfigPlacementTypeClusterSelector ConfigPlacementType = "ClusterSelector"

	// ConfigPlacementTypeClusterLocations captures enum value "ClusterLocations"
	ConfigPlacementTypeClusterLocations ConfigPlacementType = "ClusterLocations"

	// ConfigPlacementTypeClusterLabels captures enum value "ClusterLabels"
	ConfigPlacementTypeClusterLabels ConfigPlacementType = "ClusterLabels"

	// ConfigPlacementTypeClusterSpecific captures enum value "ClusterSpecific"
	ConfigPlacementTypeClusterSpecific ConfigPlacementType = "ClusterSpecific"
)

// for schema
var configPlacementTypeEnum []interface{}

func init() {
	var res []ConfigPlacementType
	if err := json.Unmarshal([]byte(`["ClusterSelector","ClusterLocations","ClusterLabels","ClusterSpecific"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configPlacementTypeEnum = append(configPlacementTypeEnum, v)
	}
}

func (m ConfigPlacementType) validateConfigPlacementTypeEnum(path, location string, value ConfigPlacementType) error {
	if err := validate.EnumCase(path, location, value, configPlacementTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config placement type
func (m ConfigPlacementType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigPlacementTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config placement type based on context it is used
func (m ConfigPlacementType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
