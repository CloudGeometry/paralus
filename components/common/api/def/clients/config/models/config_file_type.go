// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigFileType config file type
//
// swagger:model configFileType
type ConfigFileType string

func NewConfigFileType(value ConfigFileType) *ConfigFileType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigFileType.
func (m ConfigFileType) Pointer() *ConfigFileType {
	return &m
}

const (

	// ConfigFileTypeFileTypeNotSet captures enum value "FileTypeNotSet"
	ConfigFileTypeFileTypeNotSet ConfigFileType = "FileTypeNotSet"

	// ConfigFileTypeK8sYAMLFile captures enum value "K8sYAMLFile"
	ConfigFileTypeK8sYAMLFile ConfigFileType = "K8sYAMLFile"

	// ConfigFileTypeHelmChartFile captures enum value "HelmChartFile"
	ConfigFileTypeHelmChartFile ConfigFileType = "HelmChartFile"

	// ConfigFileTypeHelmValuesFile captures enum value "HelmValuesFile"
	ConfigFileTypeHelmValuesFile ConfigFileType = "HelmValuesFile"

	// ConfigFileTypeJSONFile captures enum value "JSONFile"
	ConfigFileTypeJSONFile ConfigFileType = "JSONFile"
)

// for schema
var configFileTypeEnum []interface{}

func init() {
	var res []ConfigFileType
	if err := json.Unmarshal([]byte(`["FileTypeNotSet","K8sYAMLFile","HelmChartFile","HelmValuesFile","JSONFile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configFileTypeEnum = append(configFileTypeEnum, v)
	}
}

func (m ConfigFileType) validateConfigFileTypeEnum(path, location string, value ConfigFileType) error {
	if err := validate.EnumCase(path, location, value, configFileTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config file type
func (m ConfigFileType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigFileTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config file type based on context it is used
func (m ConfigFileType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
