// Code generated by go-swagger; DO NOT EDIT.

package override

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new override API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for override API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OverrideAddDefaultOverrides(params *OverrideAddDefaultOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideAddDefaultOverridesOK, error)

	OverrideApplyOverride(params *OverrideApplyOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideApplyOverrideOK, error)

	OverrideCreateOverride(params *OverrideCreateOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideCreateOverrideOK, *OverrideCreateOverrideCreated, error)

	OverrideDeleteOverride(params *OverrideDeleteOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideDeleteOverrideOK, *OverrideDeleteOverrideNoContent, error)

	OverrideGetOverride(params *OverrideGetOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideGetOverrideOK, error)

	OverrideGetOverrides(params *OverrideGetOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideGetOverridesOK, error)

	OverrideUpdateOverride(params *OverrideUpdateOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideUpdateOverrideOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OverrideAddDefaultOverrides override add default overrides API
*/
func (a *Client) OverrideAddDefaultOverrides(params *OverrideAddDefaultOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideAddDefaultOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideAddDefaultOverridesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Override_AddDefaultOverrides",
		Method:             "POST",
		PathPattern:        "/v2/config/override/default/cluster",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverrideAddDefaultOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverrideAddDefaultOverridesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverrideAddDefaultOverridesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OverrideApplyOverride override apply override API
*/
func (a *Client) OverrideApplyOverride(params *OverrideApplyOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideApplyOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideApplyOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Override_ApplyOverride",
		Method:             "POST",
		PathPattern:        "/v2/config/override/apply",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverrideApplyOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverrideApplyOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverrideApplyOverrideDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OverrideCreateOverride override create override API
*/
func (a *Client) OverrideCreateOverride(params *OverrideCreateOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideCreateOverrideOK, *OverrideCreateOverrideCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideCreateOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Override_CreateOverride",
		Method:             "POST",
		PathPattern:        "/v2/config/project/{metadata.project}/override",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverrideCreateOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *OverrideCreateOverrideOK:
		return value, nil, nil
	case *OverrideCreateOverrideCreated:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverrideCreateOverrideDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OverrideDeleteOverride override delete override API
*/
func (a *Client) OverrideDeleteOverride(params *OverrideDeleteOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideDeleteOverrideOK, *OverrideDeleteOverrideNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideDeleteOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Override_DeleteOverride",
		Method:             "DELETE",
		PathPattern:        "/v2/config/project/{metadata.project}/override/{metadata.name}",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverrideDeleteOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *OverrideDeleteOverrideOK:
		return value, nil, nil
	case *OverrideDeleteOverrideNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverrideDeleteOverrideDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OverrideGetOverride override get override API
*/
func (a *Client) OverrideGetOverride(params *OverrideGetOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideGetOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideGetOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Override_GetOverride",
		Method:             "GET",
		PathPattern:        "/v2/config/project/{metadata.project}/override/{metadata.name}",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverrideGetOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverrideGetOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverrideGetOverrideDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OverrideGetOverrides override get overrides API
*/
func (a *Client) OverrideGetOverrides(params *OverrideGetOverridesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideGetOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideGetOverridesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Override_GetOverrides",
		Method:             "GET",
		PathPattern:        "/v2/config/{urlScope}/override",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverrideGetOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverrideGetOverridesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverrideGetOverridesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OverrideUpdateOverride override update override API
*/
func (a *Client) OverrideUpdateOverride(params *OverrideUpdateOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OverrideUpdateOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOverrideUpdateOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Override_UpdateOverride",
		Method:             "PUT",
		PathPattern:        "/v2/config/project/{metadata.project}/override/{metadata.name}",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OverrideUpdateOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OverrideUpdateOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OverrideUpdateOverrideDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
