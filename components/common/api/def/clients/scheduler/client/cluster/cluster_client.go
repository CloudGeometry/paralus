// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ClusterCreateCluster(params *ClusterCreateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterCreateClusterOK, *ClusterCreateClusterCreated, error)

	ClusterDeleteCluster(params *ClusterDeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterDeleteClusterOK, *ClusterDeleteClusterNoContent, error)

	ClusterDownloadCluster(params *ClusterDownloadClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterDownloadClusterOK, error)

	ClusterGetCluster(params *ClusterGetClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterGetClusterOK, error)

	ClusterGetClusters(params *ClusterGetClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterGetClustersOK, error)

	ClusterRegisterCluster(params *ClusterRegisterClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterRegisterClusterOK, error)

	ClusterUpdateCluster(params *ClusterUpdateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterUpdateClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ClusterCreateCluster cluster create cluster API
*/
func (a *Client) ClusterCreateCluster(params *ClusterCreateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterCreateClusterOK, *ClusterCreateClusterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterCreateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cluster_CreateCluster",
		Method:             "POST",
		PathPattern:        "/infra/v3/project/{metadata.project}/cluster",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClusterCreateClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ClusterCreateClusterOK:
		return value, nil, nil
	case *ClusterCreateClusterCreated:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterCreateClusterDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterDeleteCluster cluster delete cluster API
*/
func (a *Client) ClusterDeleteCluster(params *ClusterDeleteClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterDeleteClusterOK, *ClusterDeleteClusterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cluster_DeleteCluster",
		Method:             "DELETE",
		PathPattern:        "/infra/v3/project/{metadata.project}/cluster/{metadata.name}",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClusterDeleteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ClusterDeleteClusterOK:
		return value, nil, nil
	case *ClusterDeleteClusterNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterDeleteClusterDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterDownloadCluster cluster download cluster API
*/
func (a *Client) ClusterDownloadCluster(params *ClusterDownloadClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterDownloadClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterDownloadClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cluster_DownloadCluster",
		Method:             "GET",
		PathPattern:        "/infra/v3/project/{metadata.project}/cluster/{metadata.name}/download",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClusterDownloadClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterDownloadClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterDownloadClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterGetCluster cluster get cluster API
*/
func (a *Client) ClusterGetCluster(params *ClusterGetClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterGetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGetClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cluster_GetCluster",
		Method:             "GET",
		PathPattern:        "/infra/v3/project/{metadata.project}/cluster/{metadata.name}",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClusterGetClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGetClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGetClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterGetClusters cluster get clusters API
*/
func (a *Client) ClusterGetClusters(params *ClusterGetClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterGetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGetClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cluster_GetClusters",
		Method:             "GET",
		PathPattern:        "/infra/v3/project/{projectID}/cluster",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClusterGetClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGetClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterRegisterCluster cluster register cluster API
*/
func (a *Client) ClusterRegisterCluster(params *ClusterRegisterClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterRegisterClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterRegisterClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cluster_RegisterCluster",
		Method:             "POST",
		PathPattern:        "/infra/v3/scheduler/cluster/register",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClusterRegisterClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterRegisterClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterRegisterClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterUpdateCluster cluster update cluster API
*/
func (a *Client) ClusterUpdateCluster(params *ClusterUpdateClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClusterUpdateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterUpdateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Cluster_UpdateCluster",
		Method:             "PUT",
		PathPattern:        "/infra/v3/project/{metadata.project}/cluster/{metadata.name}",
		ProducesMediaTypes: []string{"application/json", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClusterUpdateClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterUpdateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterUpdateClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
