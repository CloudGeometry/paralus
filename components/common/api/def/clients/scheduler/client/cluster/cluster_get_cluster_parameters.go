// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewClusterGetClusterParams creates a new ClusterGetClusterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClusterGetClusterParams() *ClusterGetClusterParams {
	return &ClusterGetClusterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClusterGetClusterParamsWithTimeout creates a new ClusterGetClusterParams object
// with the ability to set a timeout on a request.
func NewClusterGetClusterParamsWithTimeout(timeout time.Duration) *ClusterGetClusterParams {
	return &ClusterGetClusterParams{
		timeout: timeout,
	}
}

// NewClusterGetClusterParamsWithContext creates a new ClusterGetClusterParams object
// with the ability to set a context for a request.
func NewClusterGetClusterParamsWithContext(ctx context.Context) *ClusterGetClusterParams {
	return &ClusterGetClusterParams{
		Context: ctx,
	}
}

// NewClusterGetClusterParamsWithHTTPClient creates a new ClusterGetClusterParams object
// with the ability to set a custom HTTPClient for a request.
func NewClusterGetClusterParamsWithHTTPClient(client *http.Client) *ClusterGetClusterParams {
	return &ClusterGetClusterParams{
		HTTPClient: client,
	}
}

/* ClusterGetClusterParams contains all the parameters to send to the API endpoint
   for the cluster get cluster operation.

   Typically these are written to a http.Request.
*/
type ClusterGetClusterParams struct {

	/* APIVersion.

	   API Version. API Version of the resource

	   Default: "infra.k8smgmt.io/v3"
	*/
	APIVersion *string

	/* Kind.

	   Kind. Kind of the resource

	   Default: "Cluster"
	*/
	Kind *string

	/* MetadataDescription.

	   Description. description of the resource
	*/
	MetadataDescription *string

	// MetadataID.
	MetadataID *string

	// MetadataModifiedAt.
	//
	// Format: date-time
	MetadataModifiedAt *strfmt.DateTime

	/* MetadataName.

	   name of the resource
	*/
	MetadataName string

	/* MetadataOrganization.

	   Organization. Organization to which the resource belongs
	*/
	MetadataOrganization *string

	/* MetadataPartner.

	   Partner. Partner to which the resource belongs
	*/
	MetadataPartner *string

	/* MetadataProject.

	   Project of the resource
	*/
	MetadataProject string

	/* SpecClusterDataArecord.

	   DNS A Record. Entry for DNS A Record
	*/
	SpecClusterDataArecord *string

	/* SpecClusterDataClusterBlueprint.

	   ClusterBlueprint. Cluster Blueprint
	*/
	SpecClusterDataClusterBlueprint *string

	/* SpecClusterDataClusterStatusAuxiliaryTaskCount.

	   Cluster Information. Override selector of the cluster

	   Format: int64
	*/
	SpecClusterDataClusterStatusAuxiliaryTaskCount *string

	/* SpecClusterDataClusterStatusCustomTaskCount.

	   Cluster Information. Override selector of the cluster

	   Format: int64
	*/
	SpecClusterDataClusterStatusCustomTaskCount *string

	/* SpecClusterDataClusterStatusPublishedBlueprint.

	   Cluster Information. Override selector of the cluster
	*/
	SpecClusterDataClusterStatusPublishedBlueprint *string

	/* SpecClusterDataClusterStatusSystemTaskCount.

	   Cluster Information. Override selector of the cluster

	   Format: int64
	*/
	SpecClusterDataClusterStatusSystemTaskCount *string

	/* SpecClusterDataClusterStatusToken.

	   Cluster Information. Override selector of the cluster
	*/
	SpecClusterDataClusterStatusToken *string

	/* SpecClusterDataCname.

	   CNAME. cname of the cluster
	*/
	SpecClusterDataCname *string

	/* SpecClusterDataDisplayName.

	   Display Name. Display Name
	*/
	SpecClusterDataDisplayName *string

	/* SpecClusterDataHealth.

	   Health. Health

	   Default: "EDGE_IGNORE"
	*/
	SpecClusterDataHealth *string

	/* SpecClusterDataManufacturer.

	   Manufacturer. Manufacturer
	*/
	SpecClusterDataManufacturer *string

	/* SpecClusterDataPassphrase.

	   Passphrase. passphrase of the cluster
	*/
	SpecClusterDataPassphrase *string

	/* SpecClusterDataProvider.

	   Provider. Provider
	*/
	SpecClusterDataProvider *string

	/* SpecClusterType.

	   Cluster Type. Type of the cluster being created

	   Default: "Imported"
	*/
	SpecClusterType *string

	/* SpecMetroCity.

	   City. City of the location
	*/
	SpecMetroCity *string

	/* SpecMetroCountry.

	   Country. country of the location
	*/
	SpecMetroCountry *string

	/* SpecMetroCountryCode.

	   CountryCode. CountryCode of the location
	*/
	SpecMetroCountryCode *string

	/* SpecMetroID.

	   ID of Location. ID Location of the cluster
	*/
	SpecMetroID *string

	/* SpecMetroLatitude.

	   Latitude. Latitude of the location
	*/
	SpecMetroLatitude *string

	/* SpecMetroLocale.

	   Locale. locale of the location
	*/
	SpecMetroLocale *string

	/* SpecMetroLongitude.

	   Longitude. Longitude of the location
	*/
	SpecMetroLongitude *string

	/* SpecMetroName.

	   Location. Location of the cluster
	*/
	SpecMetroName *string

	/* SpecMetroState.

	   State. State of the location
	*/
	SpecMetroState *string

	/* SpecMetroStateCode.

	   StateCode. StateCode of the location
	*/
	SpecMetroStateCode *string

	/* SpecOverrideSelector.

	   Override Selector. Override selector of the cluster
	*/
	SpecOverrideSelector *string

	/* SpecParamsEnvironmentProvider.

	   EnvironmentProvider. environment provider of the cluster
	*/
	SpecParamsEnvironmentProvider *string

	/* SpecParamsKubernetesProvider.

	   KubernetesProvider. kubernetes provider
	*/
	SpecParamsKubernetesProvider *string

	/* SpecParamsProvisionEnvironment.

	   ProvisionEnvironment. provision environment
	*/
	SpecParamsProvisionEnvironment *string

	/* SpecParamsProvisionPackageType.

	   ProvisionPackageType. provision package type
	*/
	SpecParamsProvisionPackageType *string

	/* SpecParamsProvisionType.

	   ProvisionType. provision type
	*/
	SpecParamsProvisionType *string

	/* SpecParamsState.

	   State. state
	*/
	SpecParamsState *string

	/* SpecProxyConfigAllowInsecureBootstrap.

	   AllowInsecureBootstrap. Allow insecure bootstrap
	*/
	SpecProxyConfigAllowInsecureBootstrap *bool

	/* SpecProxyConfigBootstrapCA.

	   BootstrapCA. Certificate Authority of bootstrap server
	*/
	SpecProxyConfigBootstrapCA *string

	/* SpecProxyConfigEnabled.

	   Enabled. enabled
	*/
	SpecProxyConfigEnabled *bool

	/* SpecProxyConfigHTTPProxy.

	   HttpProxy. http proxy
	*/
	SpecProxyConfigHTTPProxy *string

	/* SpecProxyConfigHTTPSProxy.

	   HttpsProxy. https proxy
	*/
	SpecProxyConfigHTTPSProxy *string

	/* SpecProxyConfigNoProxy.

	   noproxy. noproxy
	*/
	SpecProxyConfigNoProxy *string

	/* SpecProxyConfigProxyAuth.

	   ProxyAuth. proxy auth
	*/
	SpecProxyConfigProxyAuth *string

	/* SpecShareMode.

	   Override Selector. Override selector of the cluster

	   Default: "ClusterShareModeNotSet"
	*/
	SpecShareMode *string

	/* StatusConditionStatus.

	   Condition Status. status of the condition

	   Default: "StatusNotSet"
	*/
	StatusConditionStatus *string

	/* StatusConditionType.

	   Condition Type. type of the status condition
	*/
	StatusConditionType *string

	/* StatusLastUpdated.

	   Last Updated. when the condition status is last updated

	   Format: date-time
	*/
	StatusLastUpdated *strfmt.DateTime

	/* StatusReason.

	   Reason. reason of the last condition status
	*/
	StatusReason *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cluster get cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterGetClusterParams) WithDefaults() *ClusterGetClusterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cluster get cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterGetClusterParams) SetDefaults() {
	var (
		aPIVersionDefault = string("infra.k8smgmt.io/v3")

		kindDefault = string("Cluster")

		specClusterDataHealthDefault = string("EDGE_IGNORE")

		specClusterTypeDefault = string("Imported")

		specShareModeDefault = string("ClusterShareModeNotSet")

		statusConditionStatusDefault = string("StatusNotSet")
	)

	val := ClusterGetClusterParams{
		APIVersion:            &aPIVersionDefault,
		Kind:                  &kindDefault,
		SpecClusterDataHealth: &specClusterDataHealthDefault,
		SpecClusterType:       &specClusterTypeDefault,
		SpecShareMode:         &specShareModeDefault,
		StatusConditionStatus: &statusConditionStatusDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the cluster get cluster params
func (o *ClusterGetClusterParams) WithTimeout(timeout time.Duration) *ClusterGetClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cluster get cluster params
func (o *ClusterGetClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cluster get cluster params
func (o *ClusterGetClusterParams) WithContext(ctx context.Context) *ClusterGetClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cluster get cluster params
func (o *ClusterGetClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cluster get cluster params
func (o *ClusterGetClusterParams) WithHTTPClient(client *http.Client) *ClusterGetClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cluster get cluster params
func (o *ClusterGetClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the cluster get cluster params
func (o *ClusterGetClusterParams) WithAPIVersion(aPIVersion *string) *ClusterGetClusterParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the cluster get cluster params
func (o *ClusterGetClusterParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithKind adds the kind to the cluster get cluster params
func (o *ClusterGetClusterParams) WithKind(kind *string) *ClusterGetClusterParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the cluster get cluster params
func (o *ClusterGetClusterParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithMetadataDescription adds the metadataDescription to the cluster get cluster params
func (o *ClusterGetClusterParams) WithMetadataDescription(metadataDescription *string) *ClusterGetClusterParams {
	o.SetMetadataDescription(metadataDescription)
	return o
}

// SetMetadataDescription adds the metadataDescription to the cluster get cluster params
func (o *ClusterGetClusterParams) SetMetadataDescription(metadataDescription *string) {
	o.MetadataDescription = metadataDescription
}

// WithMetadataID adds the metadataID to the cluster get cluster params
func (o *ClusterGetClusterParams) WithMetadataID(metadataID *string) *ClusterGetClusterParams {
	o.SetMetadataID(metadataID)
	return o
}

// SetMetadataID adds the metadataId to the cluster get cluster params
func (o *ClusterGetClusterParams) SetMetadataID(metadataID *string) {
	o.MetadataID = metadataID
}

// WithMetadataModifiedAt adds the metadataModifiedAt to the cluster get cluster params
func (o *ClusterGetClusterParams) WithMetadataModifiedAt(metadataModifiedAt *strfmt.DateTime) *ClusterGetClusterParams {
	o.SetMetadataModifiedAt(metadataModifiedAt)
	return o
}

// SetMetadataModifiedAt adds the metadataModifiedAt to the cluster get cluster params
func (o *ClusterGetClusterParams) SetMetadataModifiedAt(metadataModifiedAt *strfmt.DateTime) {
	o.MetadataModifiedAt = metadataModifiedAt
}

// WithMetadataName adds the metadataName to the cluster get cluster params
func (o *ClusterGetClusterParams) WithMetadataName(metadataName string) *ClusterGetClusterParams {
	o.SetMetadataName(metadataName)
	return o
}

// SetMetadataName adds the metadataName to the cluster get cluster params
func (o *ClusterGetClusterParams) SetMetadataName(metadataName string) {
	o.MetadataName = metadataName
}

// WithMetadataOrganization adds the metadataOrganization to the cluster get cluster params
func (o *ClusterGetClusterParams) WithMetadataOrganization(metadataOrganization *string) *ClusterGetClusterParams {
	o.SetMetadataOrganization(metadataOrganization)
	return o
}

// SetMetadataOrganization adds the metadataOrganization to the cluster get cluster params
func (o *ClusterGetClusterParams) SetMetadataOrganization(metadataOrganization *string) {
	o.MetadataOrganization = metadataOrganization
}

// WithMetadataPartner adds the metadataPartner to the cluster get cluster params
func (o *ClusterGetClusterParams) WithMetadataPartner(metadataPartner *string) *ClusterGetClusterParams {
	o.SetMetadataPartner(metadataPartner)
	return o
}

// SetMetadataPartner adds the metadataPartner to the cluster get cluster params
func (o *ClusterGetClusterParams) SetMetadataPartner(metadataPartner *string) {
	o.MetadataPartner = metadataPartner
}

// WithMetadataProject adds the metadataProject to the cluster get cluster params
func (o *ClusterGetClusterParams) WithMetadataProject(metadataProject string) *ClusterGetClusterParams {
	o.SetMetadataProject(metadataProject)
	return o
}

// SetMetadataProject adds the metadataProject to the cluster get cluster params
func (o *ClusterGetClusterParams) SetMetadataProject(metadataProject string) {
	o.MetadataProject = metadataProject
}

// WithSpecClusterDataArecord adds the specClusterDataArecord to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataArecord(specClusterDataArecord *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataArecord(specClusterDataArecord)
	return o
}

// SetSpecClusterDataArecord adds the specClusterDataArecord to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataArecord(specClusterDataArecord *string) {
	o.SpecClusterDataArecord = specClusterDataArecord
}

// WithSpecClusterDataClusterBlueprint adds the specClusterDataClusterBlueprint to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataClusterBlueprint(specClusterDataClusterBlueprint *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataClusterBlueprint(specClusterDataClusterBlueprint)
	return o
}

// SetSpecClusterDataClusterBlueprint adds the specClusterDataClusterBlueprint to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataClusterBlueprint(specClusterDataClusterBlueprint *string) {
	o.SpecClusterDataClusterBlueprint = specClusterDataClusterBlueprint
}

// WithSpecClusterDataClusterStatusAuxiliaryTaskCount adds the specClusterDataClusterStatusAuxiliaryTaskCount to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataClusterStatusAuxiliaryTaskCount(specClusterDataClusterStatusAuxiliaryTaskCount *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataClusterStatusAuxiliaryTaskCount(specClusterDataClusterStatusAuxiliaryTaskCount)
	return o
}

// SetSpecClusterDataClusterStatusAuxiliaryTaskCount adds the specClusterDataClusterStatusAuxiliaryTaskCount to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataClusterStatusAuxiliaryTaskCount(specClusterDataClusterStatusAuxiliaryTaskCount *string) {
	o.SpecClusterDataClusterStatusAuxiliaryTaskCount = specClusterDataClusterStatusAuxiliaryTaskCount
}

// WithSpecClusterDataClusterStatusCustomTaskCount adds the specClusterDataClusterStatusCustomTaskCount to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataClusterStatusCustomTaskCount(specClusterDataClusterStatusCustomTaskCount *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataClusterStatusCustomTaskCount(specClusterDataClusterStatusCustomTaskCount)
	return o
}

// SetSpecClusterDataClusterStatusCustomTaskCount adds the specClusterDataClusterStatusCustomTaskCount to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataClusterStatusCustomTaskCount(specClusterDataClusterStatusCustomTaskCount *string) {
	o.SpecClusterDataClusterStatusCustomTaskCount = specClusterDataClusterStatusCustomTaskCount
}

// WithSpecClusterDataClusterStatusPublishedBlueprint adds the specClusterDataClusterStatusPublishedBlueprint to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataClusterStatusPublishedBlueprint(specClusterDataClusterStatusPublishedBlueprint *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataClusterStatusPublishedBlueprint(specClusterDataClusterStatusPublishedBlueprint)
	return o
}

// SetSpecClusterDataClusterStatusPublishedBlueprint adds the specClusterDataClusterStatusPublishedBlueprint to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataClusterStatusPublishedBlueprint(specClusterDataClusterStatusPublishedBlueprint *string) {
	o.SpecClusterDataClusterStatusPublishedBlueprint = specClusterDataClusterStatusPublishedBlueprint
}

// WithSpecClusterDataClusterStatusSystemTaskCount adds the specClusterDataClusterStatusSystemTaskCount to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataClusterStatusSystemTaskCount(specClusterDataClusterStatusSystemTaskCount *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataClusterStatusSystemTaskCount(specClusterDataClusterStatusSystemTaskCount)
	return o
}

// SetSpecClusterDataClusterStatusSystemTaskCount adds the specClusterDataClusterStatusSystemTaskCount to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataClusterStatusSystemTaskCount(specClusterDataClusterStatusSystemTaskCount *string) {
	o.SpecClusterDataClusterStatusSystemTaskCount = specClusterDataClusterStatusSystemTaskCount
}

// WithSpecClusterDataClusterStatusToken adds the specClusterDataClusterStatusToken to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataClusterStatusToken(specClusterDataClusterStatusToken *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataClusterStatusToken(specClusterDataClusterStatusToken)
	return o
}

// SetSpecClusterDataClusterStatusToken adds the specClusterDataClusterStatusToken to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataClusterStatusToken(specClusterDataClusterStatusToken *string) {
	o.SpecClusterDataClusterStatusToken = specClusterDataClusterStatusToken
}

// WithSpecClusterDataCname adds the specClusterDataCname to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataCname(specClusterDataCname *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataCname(specClusterDataCname)
	return o
}

// SetSpecClusterDataCname adds the specClusterDataCname to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataCname(specClusterDataCname *string) {
	o.SpecClusterDataCname = specClusterDataCname
}

// WithSpecClusterDataDisplayName adds the specClusterDataDisplayName to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataDisplayName(specClusterDataDisplayName *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataDisplayName(specClusterDataDisplayName)
	return o
}

// SetSpecClusterDataDisplayName adds the specClusterDataDisplayName to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataDisplayName(specClusterDataDisplayName *string) {
	o.SpecClusterDataDisplayName = specClusterDataDisplayName
}

// WithSpecClusterDataHealth adds the specClusterDataHealth to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataHealth(specClusterDataHealth *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataHealth(specClusterDataHealth)
	return o
}

// SetSpecClusterDataHealth adds the specClusterDataHealth to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataHealth(specClusterDataHealth *string) {
	o.SpecClusterDataHealth = specClusterDataHealth
}

// WithSpecClusterDataManufacturer adds the specClusterDataManufacturer to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataManufacturer(specClusterDataManufacturer *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataManufacturer(specClusterDataManufacturer)
	return o
}

// SetSpecClusterDataManufacturer adds the specClusterDataManufacturer to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataManufacturer(specClusterDataManufacturer *string) {
	o.SpecClusterDataManufacturer = specClusterDataManufacturer
}

// WithSpecClusterDataPassphrase adds the specClusterDataPassphrase to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataPassphrase(specClusterDataPassphrase *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataPassphrase(specClusterDataPassphrase)
	return o
}

// SetSpecClusterDataPassphrase adds the specClusterDataPassphrase to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataPassphrase(specClusterDataPassphrase *string) {
	o.SpecClusterDataPassphrase = specClusterDataPassphrase
}

// WithSpecClusterDataProvider adds the specClusterDataProvider to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterDataProvider(specClusterDataProvider *string) *ClusterGetClusterParams {
	o.SetSpecClusterDataProvider(specClusterDataProvider)
	return o
}

// SetSpecClusterDataProvider adds the specClusterDataProvider to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterDataProvider(specClusterDataProvider *string) {
	o.SpecClusterDataProvider = specClusterDataProvider
}

// WithSpecClusterType adds the specClusterType to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecClusterType(specClusterType *string) *ClusterGetClusterParams {
	o.SetSpecClusterType(specClusterType)
	return o
}

// SetSpecClusterType adds the specClusterType to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecClusterType(specClusterType *string) {
	o.SpecClusterType = specClusterType
}

// WithSpecMetroCity adds the specMetroCity to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroCity(specMetroCity *string) *ClusterGetClusterParams {
	o.SetSpecMetroCity(specMetroCity)
	return o
}

// SetSpecMetroCity adds the specMetroCity to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroCity(specMetroCity *string) {
	o.SpecMetroCity = specMetroCity
}

// WithSpecMetroCountry adds the specMetroCountry to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroCountry(specMetroCountry *string) *ClusterGetClusterParams {
	o.SetSpecMetroCountry(specMetroCountry)
	return o
}

// SetSpecMetroCountry adds the specMetroCountry to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroCountry(specMetroCountry *string) {
	o.SpecMetroCountry = specMetroCountry
}

// WithSpecMetroCountryCode adds the specMetroCountryCode to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroCountryCode(specMetroCountryCode *string) *ClusterGetClusterParams {
	o.SetSpecMetroCountryCode(specMetroCountryCode)
	return o
}

// SetSpecMetroCountryCode adds the specMetroCountryCode to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroCountryCode(specMetroCountryCode *string) {
	o.SpecMetroCountryCode = specMetroCountryCode
}

// WithSpecMetroID adds the specMetroID to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroID(specMetroID *string) *ClusterGetClusterParams {
	o.SetSpecMetroID(specMetroID)
	return o
}

// SetSpecMetroID adds the specMetroId to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroID(specMetroID *string) {
	o.SpecMetroID = specMetroID
}

// WithSpecMetroLatitude adds the specMetroLatitude to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroLatitude(specMetroLatitude *string) *ClusterGetClusterParams {
	o.SetSpecMetroLatitude(specMetroLatitude)
	return o
}

// SetSpecMetroLatitude adds the specMetroLatitude to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroLatitude(specMetroLatitude *string) {
	o.SpecMetroLatitude = specMetroLatitude
}

// WithSpecMetroLocale adds the specMetroLocale to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroLocale(specMetroLocale *string) *ClusterGetClusterParams {
	o.SetSpecMetroLocale(specMetroLocale)
	return o
}

// SetSpecMetroLocale adds the specMetroLocale to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroLocale(specMetroLocale *string) {
	o.SpecMetroLocale = specMetroLocale
}

// WithSpecMetroLongitude adds the specMetroLongitude to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroLongitude(specMetroLongitude *string) *ClusterGetClusterParams {
	o.SetSpecMetroLongitude(specMetroLongitude)
	return o
}

// SetSpecMetroLongitude adds the specMetroLongitude to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroLongitude(specMetroLongitude *string) {
	o.SpecMetroLongitude = specMetroLongitude
}

// WithSpecMetroName adds the specMetroName to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroName(specMetroName *string) *ClusterGetClusterParams {
	o.SetSpecMetroName(specMetroName)
	return o
}

// SetSpecMetroName adds the specMetroName to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroName(specMetroName *string) {
	o.SpecMetroName = specMetroName
}

// WithSpecMetroState adds the specMetroState to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroState(specMetroState *string) *ClusterGetClusterParams {
	o.SetSpecMetroState(specMetroState)
	return o
}

// SetSpecMetroState adds the specMetroState to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroState(specMetroState *string) {
	o.SpecMetroState = specMetroState
}

// WithSpecMetroStateCode adds the specMetroStateCode to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecMetroStateCode(specMetroStateCode *string) *ClusterGetClusterParams {
	o.SetSpecMetroStateCode(specMetroStateCode)
	return o
}

// SetSpecMetroStateCode adds the specMetroStateCode to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecMetroStateCode(specMetroStateCode *string) {
	o.SpecMetroStateCode = specMetroStateCode
}

// WithSpecOverrideSelector adds the specOverrideSelector to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecOverrideSelector(specOverrideSelector *string) *ClusterGetClusterParams {
	o.SetSpecOverrideSelector(specOverrideSelector)
	return o
}

// SetSpecOverrideSelector adds the specOverrideSelector to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecOverrideSelector(specOverrideSelector *string) {
	o.SpecOverrideSelector = specOverrideSelector
}

// WithSpecParamsEnvironmentProvider adds the specParamsEnvironmentProvider to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecParamsEnvironmentProvider(specParamsEnvironmentProvider *string) *ClusterGetClusterParams {
	o.SetSpecParamsEnvironmentProvider(specParamsEnvironmentProvider)
	return o
}

// SetSpecParamsEnvironmentProvider adds the specParamsEnvironmentProvider to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecParamsEnvironmentProvider(specParamsEnvironmentProvider *string) {
	o.SpecParamsEnvironmentProvider = specParamsEnvironmentProvider
}

// WithSpecParamsKubernetesProvider adds the specParamsKubernetesProvider to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecParamsKubernetesProvider(specParamsKubernetesProvider *string) *ClusterGetClusterParams {
	o.SetSpecParamsKubernetesProvider(specParamsKubernetesProvider)
	return o
}

// SetSpecParamsKubernetesProvider adds the specParamsKubernetesProvider to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecParamsKubernetesProvider(specParamsKubernetesProvider *string) {
	o.SpecParamsKubernetesProvider = specParamsKubernetesProvider
}

// WithSpecParamsProvisionEnvironment adds the specParamsProvisionEnvironment to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecParamsProvisionEnvironment(specParamsProvisionEnvironment *string) *ClusterGetClusterParams {
	o.SetSpecParamsProvisionEnvironment(specParamsProvisionEnvironment)
	return o
}

// SetSpecParamsProvisionEnvironment adds the specParamsProvisionEnvironment to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecParamsProvisionEnvironment(specParamsProvisionEnvironment *string) {
	o.SpecParamsProvisionEnvironment = specParamsProvisionEnvironment
}

// WithSpecParamsProvisionPackageType adds the specParamsProvisionPackageType to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecParamsProvisionPackageType(specParamsProvisionPackageType *string) *ClusterGetClusterParams {
	o.SetSpecParamsProvisionPackageType(specParamsProvisionPackageType)
	return o
}

// SetSpecParamsProvisionPackageType adds the specParamsProvisionPackageType to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecParamsProvisionPackageType(specParamsProvisionPackageType *string) {
	o.SpecParamsProvisionPackageType = specParamsProvisionPackageType
}

// WithSpecParamsProvisionType adds the specParamsProvisionType to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecParamsProvisionType(specParamsProvisionType *string) *ClusterGetClusterParams {
	o.SetSpecParamsProvisionType(specParamsProvisionType)
	return o
}

// SetSpecParamsProvisionType adds the specParamsProvisionType to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecParamsProvisionType(specParamsProvisionType *string) {
	o.SpecParamsProvisionType = specParamsProvisionType
}

// WithSpecParamsState adds the specParamsState to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecParamsState(specParamsState *string) *ClusterGetClusterParams {
	o.SetSpecParamsState(specParamsState)
	return o
}

// SetSpecParamsState adds the specParamsState to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecParamsState(specParamsState *string) {
	o.SpecParamsState = specParamsState
}

// WithSpecProxyConfigAllowInsecureBootstrap adds the specProxyConfigAllowInsecureBootstrap to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecProxyConfigAllowInsecureBootstrap(specProxyConfigAllowInsecureBootstrap *bool) *ClusterGetClusterParams {
	o.SetSpecProxyConfigAllowInsecureBootstrap(specProxyConfigAllowInsecureBootstrap)
	return o
}

// SetSpecProxyConfigAllowInsecureBootstrap adds the specProxyConfigAllowInsecureBootstrap to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecProxyConfigAllowInsecureBootstrap(specProxyConfigAllowInsecureBootstrap *bool) {
	o.SpecProxyConfigAllowInsecureBootstrap = specProxyConfigAllowInsecureBootstrap
}

// WithSpecProxyConfigBootstrapCA adds the specProxyConfigBootstrapCA to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecProxyConfigBootstrapCA(specProxyConfigBootstrapCA *string) *ClusterGetClusterParams {
	o.SetSpecProxyConfigBootstrapCA(specProxyConfigBootstrapCA)
	return o
}

// SetSpecProxyConfigBootstrapCA adds the specProxyConfigBootstrapCA to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecProxyConfigBootstrapCA(specProxyConfigBootstrapCA *string) {
	o.SpecProxyConfigBootstrapCA = specProxyConfigBootstrapCA
}

// WithSpecProxyConfigEnabled adds the specProxyConfigEnabled to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecProxyConfigEnabled(specProxyConfigEnabled *bool) *ClusterGetClusterParams {
	o.SetSpecProxyConfigEnabled(specProxyConfigEnabled)
	return o
}

// SetSpecProxyConfigEnabled adds the specProxyConfigEnabled to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecProxyConfigEnabled(specProxyConfigEnabled *bool) {
	o.SpecProxyConfigEnabled = specProxyConfigEnabled
}

// WithSpecProxyConfigHTTPProxy adds the specProxyConfigHTTPProxy to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecProxyConfigHTTPProxy(specProxyConfigHTTPProxy *string) *ClusterGetClusterParams {
	o.SetSpecProxyConfigHTTPProxy(specProxyConfigHTTPProxy)
	return o
}

// SetSpecProxyConfigHTTPProxy adds the specProxyConfigHttpProxy to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecProxyConfigHTTPProxy(specProxyConfigHTTPProxy *string) {
	o.SpecProxyConfigHTTPProxy = specProxyConfigHTTPProxy
}

// WithSpecProxyConfigHTTPSProxy adds the specProxyConfigHTTPSProxy to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecProxyConfigHTTPSProxy(specProxyConfigHTTPSProxy *string) *ClusterGetClusterParams {
	o.SetSpecProxyConfigHTTPSProxy(specProxyConfigHTTPSProxy)
	return o
}

// SetSpecProxyConfigHTTPSProxy adds the specProxyConfigHttpsProxy to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecProxyConfigHTTPSProxy(specProxyConfigHTTPSProxy *string) {
	o.SpecProxyConfigHTTPSProxy = specProxyConfigHTTPSProxy
}

// WithSpecProxyConfigNoProxy adds the specProxyConfigNoProxy to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecProxyConfigNoProxy(specProxyConfigNoProxy *string) *ClusterGetClusterParams {
	o.SetSpecProxyConfigNoProxy(specProxyConfigNoProxy)
	return o
}

// SetSpecProxyConfigNoProxy adds the specProxyConfigNoProxy to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecProxyConfigNoProxy(specProxyConfigNoProxy *string) {
	o.SpecProxyConfigNoProxy = specProxyConfigNoProxy
}

// WithSpecProxyConfigProxyAuth adds the specProxyConfigProxyAuth to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecProxyConfigProxyAuth(specProxyConfigProxyAuth *string) *ClusterGetClusterParams {
	o.SetSpecProxyConfigProxyAuth(specProxyConfigProxyAuth)
	return o
}

// SetSpecProxyConfigProxyAuth adds the specProxyConfigProxyAuth to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecProxyConfigProxyAuth(specProxyConfigProxyAuth *string) {
	o.SpecProxyConfigProxyAuth = specProxyConfigProxyAuth
}

// WithSpecShareMode adds the specShareMode to the cluster get cluster params
func (o *ClusterGetClusterParams) WithSpecShareMode(specShareMode *string) *ClusterGetClusterParams {
	o.SetSpecShareMode(specShareMode)
	return o
}

// SetSpecShareMode adds the specShareMode to the cluster get cluster params
func (o *ClusterGetClusterParams) SetSpecShareMode(specShareMode *string) {
	o.SpecShareMode = specShareMode
}

// WithStatusConditionStatus adds the statusConditionStatus to the cluster get cluster params
func (o *ClusterGetClusterParams) WithStatusConditionStatus(statusConditionStatus *string) *ClusterGetClusterParams {
	o.SetStatusConditionStatus(statusConditionStatus)
	return o
}

// SetStatusConditionStatus adds the statusConditionStatus to the cluster get cluster params
func (o *ClusterGetClusterParams) SetStatusConditionStatus(statusConditionStatus *string) {
	o.StatusConditionStatus = statusConditionStatus
}

// WithStatusConditionType adds the statusConditionType to the cluster get cluster params
func (o *ClusterGetClusterParams) WithStatusConditionType(statusConditionType *string) *ClusterGetClusterParams {
	o.SetStatusConditionType(statusConditionType)
	return o
}

// SetStatusConditionType adds the statusConditionType to the cluster get cluster params
func (o *ClusterGetClusterParams) SetStatusConditionType(statusConditionType *string) {
	o.StatusConditionType = statusConditionType
}

// WithStatusLastUpdated adds the statusLastUpdated to the cluster get cluster params
func (o *ClusterGetClusterParams) WithStatusLastUpdated(statusLastUpdated *strfmt.DateTime) *ClusterGetClusterParams {
	o.SetStatusLastUpdated(statusLastUpdated)
	return o
}

// SetStatusLastUpdated adds the statusLastUpdated to the cluster get cluster params
func (o *ClusterGetClusterParams) SetStatusLastUpdated(statusLastUpdated *strfmt.DateTime) {
	o.StatusLastUpdated = statusLastUpdated
}

// WithStatusReason adds the statusReason to the cluster get cluster params
func (o *ClusterGetClusterParams) WithStatusReason(statusReason *string) *ClusterGetClusterParams {
	o.SetStatusReason(statusReason)
	return o
}

// SetStatusReason adds the statusReason to the cluster get cluster params
func (o *ClusterGetClusterParams) SetStatusReason(statusReason *string) {
	o.StatusReason = statusReason
}

// WriteToRequest writes these params to a swagger request
func (o *ClusterGetClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.Kind != nil {

		// query param kind
		var qrKind string

		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {

			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}
	}

	if o.MetadataDescription != nil {

		// query param metadata.description
		var qrMetadataDescription string

		if o.MetadataDescription != nil {
			qrMetadataDescription = *o.MetadataDescription
		}
		qMetadataDescription := qrMetadataDescription
		if qMetadataDescription != "" {

			if err := r.SetQueryParam("metadata.description", qMetadataDescription); err != nil {
				return err
			}
		}
	}

	if o.MetadataID != nil {

		// query param metadata.id
		var qrMetadataID string

		if o.MetadataID != nil {
			qrMetadataID = *o.MetadataID
		}
		qMetadataID := qrMetadataID
		if qMetadataID != "" {

			if err := r.SetQueryParam("metadata.id", qMetadataID); err != nil {
				return err
			}
		}
	}

	if o.MetadataModifiedAt != nil {

		// query param metadata.modifiedAt
		var qrMetadataModifiedAt strfmt.DateTime

		if o.MetadataModifiedAt != nil {
			qrMetadataModifiedAt = *o.MetadataModifiedAt
		}
		qMetadataModifiedAt := qrMetadataModifiedAt.String()
		if qMetadataModifiedAt != "" {

			if err := r.SetQueryParam("metadata.modifiedAt", qMetadataModifiedAt); err != nil {
				return err
			}
		}
	}

	// path param metadata.name
	if err := r.SetPathParam("metadata.name", o.MetadataName); err != nil {
		return err
	}

	if o.MetadataOrganization != nil {

		// query param metadata.organization
		var qrMetadataOrganization string

		if o.MetadataOrganization != nil {
			qrMetadataOrganization = *o.MetadataOrganization
		}
		qMetadataOrganization := qrMetadataOrganization
		if qMetadataOrganization != "" {

			if err := r.SetQueryParam("metadata.organization", qMetadataOrganization); err != nil {
				return err
			}
		}
	}

	if o.MetadataPartner != nil {

		// query param metadata.partner
		var qrMetadataPartner string

		if o.MetadataPartner != nil {
			qrMetadataPartner = *o.MetadataPartner
		}
		qMetadataPartner := qrMetadataPartner
		if qMetadataPartner != "" {

			if err := r.SetQueryParam("metadata.partner", qMetadataPartner); err != nil {
				return err
			}
		}
	}

	// path param metadata.project
	if err := r.SetPathParam("metadata.project", o.MetadataProject); err != nil {
		return err
	}

	if o.SpecClusterDataArecord != nil {

		// query param spec.clusterData.arecord
		var qrSpecClusterDataArecord string

		if o.SpecClusterDataArecord != nil {
			qrSpecClusterDataArecord = *o.SpecClusterDataArecord
		}
		qSpecClusterDataArecord := qrSpecClusterDataArecord
		if qSpecClusterDataArecord != "" {

			if err := r.SetQueryParam("spec.clusterData.arecord", qSpecClusterDataArecord); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataClusterBlueprint != nil {

		// query param spec.clusterData.clusterBlueprint
		var qrSpecClusterDataClusterBlueprint string

		if o.SpecClusterDataClusterBlueprint != nil {
			qrSpecClusterDataClusterBlueprint = *o.SpecClusterDataClusterBlueprint
		}
		qSpecClusterDataClusterBlueprint := qrSpecClusterDataClusterBlueprint
		if qSpecClusterDataClusterBlueprint != "" {

			if err := r.SetQueryParam("spec.clusterData.clusterBlueprint", qSpecClusterDataClusterBlueprint); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataClusterStatusAuxiliaryTaskCount != nil {

		// query param spec.clusterData.clusterStatus.auxiliaryTaskCount
		var qrSpecClusterDataClusterStatusAuxiliaryTaskCount string

		if o.SpecClusterDataClusterStatusAuxiliaryTaskCount != nil {
			qrSpecClusterDataClusterStatusAuxiliaryTaskCount = *o.SpecClusterDataClusterStatusAuxiliaryTaskCount
		}
		qSpecClusterDataClusterStatusAuxiliaryTaskCount := qrSpecClusterDataClusterStatusAuxiliaryTaskCount
		if qSpecClusterDataClusterStatusAuxiliaryTaskCount != "" {

			if err := r.SetQueryParam("spec.clusterData.clusterStatus.auxiliaryTaskCount", qSpecClusterDataClusterStatusAuxiliaryTaskCount); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataClusterStatusCustomTaskCount != nil {

		// query param spec.clusterData.clusterStatus.customTaskCount
		var qrSpecClusterDataClusterStatusCustomTaskCount string

		if o.SpecClusterDataClusterStatusCustomTaskCount != nil {
			qrSpecClusterDataClusterStatusCustomTaskCount = *o.SpecClusterDataClusterStatusCustomTaskCount
		}
		qSpecClusterDataClusterStatusCustomTaskCount := qrSpecClusterDataClusterStatusCustomTaskCount
		if qSpecClusterDataClusterStatusCustomTaskCount != "" {

			if err := r.SetQueryParam("spec.clusterData.clusterStatus.customTaskCount", qSpecClusterDataClusterStatusCustomTaskCount); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataClusterStatusPublishedBlueprint != nil {

		// query param spec.clusterData.clusterStatus.publishedBlueprint
		var qrSpecClusterDataClusterStatusPublishedBlueprint string

		if o.SpecClusterDataClusterStatusPublishedBlueprint != nil {
			qrSpecClusterDataClusterStatusPublishedBlueprint = *o.SpecClusterDataClusterStatusPublishedBlueprint
		}
		qSpecClusterDataClusterStatusPublishedBlueprint := qrSpecClusterDataClusterStatusPublishedBlueprint
		if qSpecClusterDataClusterStatusPublishedBlueprint != "" {

			if err := r.SetQueryParam("spec.clusterData.clusterStatus.publishedBlueprint", qSpecClusterDataClusterStatusPublishedBlueprint); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataClusterStatusSystemTaskCount != nil {

		// query param spec.clusterData.clusterStatus.systemTaskCount
		var qrSpecClusterDataClusterStatusSystemTaskCount string

		if o.SpecClusterDataClusterStatusSystemTaskCount != nil {
			qrSpecClusterDataClusterStatusSystemTaskCount = *o.SpecClusterDataClusterStatusSystemTaskCount
		}
		qSpecClusterDataClusterStatusSystemTaskCount := qrSpecClusterDataClusterStatusSystemTaskCount
		if qSpecClusterDataClusterStatusSystemTaskCount != "" {

			if err := r.SetQueryParam("spec.clusterData.clusterStatus.systemTaskCount", qSpecClusterDataClusterStatusSystemTaskCount); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataClusterStatusToken != nil {

		// query param spec.clusterData.clusterStatus.token
		var qrSpecClusterDataClusterStatusToken string

		if o.SpecClusterDataClusterStatusToken != nil {
			qrSpecClusterDataClusterStatusToken = *o.SpecClusterDataClusterStatusToken
		}
		qSpecClusterDataClusterStatusToken := qrSpecClusterDataClusterStatusToken
		if qSpecClusterDataClusterStatusToken != "" {

			if err := r.SetQueryParam("spec.clusterData.clusterStatus.token", qSpecClusterDataClusterStatusToken); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataCname != nil {

		// query param spec.clusterData.cname
		var qrSpecClusterDataCname string

		if o.SpecClusterDataCname != nil {
			qrSpecClusterDataCname = *o.SpecClusterDataCname
		}
		qSpecClusterDataCname := qrSpecClusterDataCname
		if qSpecClusterDataCname != "" {

			if err := r.SetQueryParam("spec.clusterData.cname", qSpecClusterDataCname); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataDisplayName != nil {

		// query param spec.clusterData.displayName
		var qrSpecClusterDataDisplayName string

		if o.SpecClusterDataDisplayName != nil {
			qrSpecClusterDataDisplayName = *o.SpecClusterDataDisplayName
		}
		qSpecClusterDataDisplayName := qrSpecClusterDataDisplayName
		if qSpecClusterDataDisplayName != "" {

			if err := r.SetQueryParam("spec.clusterData.displayName", qSpecClusterDataDisplayName); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataHealth != nil {

		// query param spec.clusterData.health
		var qrSpecClusterDataHealth string

		if o.SpecClusterDataHealth != nil {
			qrSpecClusterDataHealth = *o.SpecClusterDataHealth
		}
		qSpecClusterDataHealth := qrSpecClusterDataHealth
		if qSpecClusterDataHealth != "" {

			if err := r.SetQueryParam("spec.clusterData.health", qSpecClusterDataHealth); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataManufacturer != nil {

		// query param spec.clusterData.manufacturer
		var qrSpecClusterDataManufacturer string

		if o.SpecClusterDataManufacturer != nil {
			qrSpecClusterDataManufacturer = *o.SpecClusterDataManufacturer
		}
		qSpecClusterDataManufacturer := qrSpecClusterDataManufacturer
		if qSpecClusterDataManufacturer != "" {

			if err := r.SetQueryParam("spec.clusterData.manufacturer", qSpecClusterDataManufacturer); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataPassphrase != nil {

		// query param spec.clusterData.passphrase
		var qrSpecClusterDataPassphrase string

		if o.SpecClusterDataPassphrase != nil {
			qrSpecClusterDataPassphrase = *o.SpecClusterDataPassphrase
		}
		qSpecClusterDataPassphrase := qrSpecClusterDataPassphrase
		if qSpecClusterDataPassphrase != "" {

			if err := r.SetQueryParam("spec.clusterData.passphrase", qSpecClusterDataPassphrase); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterDataProvider != nil {

		// query param spec.clusterData.provider
		var qrSpecClusterDataProvider string

		if o.SpecClusterDataProvider != nil {
			qrSpecClusterDataProvider = *o.SpecClusterDataProvider
		}
		qSpecClusterDataProvider := qrSpecClusterDataProvider
		if qSpecClusterDataProvider != "" {

			if err := r.SetQueryParam("spec.clusterData.provider", qSpecClusterDataProvider); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterType != nil {

		// query param spec.clusterType
		var qrSpecClusterType string

		if o.SpecClusterType != nil {
			qrSpecClusterType = *o.SpecClusterType
		}
		qSpecClusterType := qrSpecClusterType
		if qSpecClusterType != "" {

			if err := r.SetQueryParam("spec.clusterType", qSpecClusterType); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroCity != nil {

		// query param spec.metro.city
		var qrSpecMetroCity string

		if o.SpecMetroCity != nil {
			qrSpecMetroCity = *o.SpecMetroCity
		}
		qSpecMetroCity := qrSpecMetroCity
		if qSpecMetroCity != "" {

			if err := r.SetQueryParam("spec.metro.city", qSpecMetroCity); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroCountry != nil {

		// query param spec.metro.country
		var qrSpecMetroCountry string

		if o.SpecMetroCountry != nil {
			qrSpecMetroCountry = *o.SpecMetroCountry
		}
		qSpecMetroCountry := qrSpecMetroCountry
		if qSpecMetroCountry != "" {

			if err := r.SetQueryParam("spec.metro.country", qSpecMetroCountry); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroCountryCode != nil {

		// query param spec.metro.countryCode
		var qrSpecMetroCountryCode string

		if o.SpecMetroCountryCode != nil {
			qrSpecMetroCountryCode = *o.SpecMetroCountryCode
		}
		qSpecMetroCountryCode := qrSpecMetroCountryCode
		if qSpecMetroCountryCode != "" {

			if err := r.SetQueryParam("spec.metro.countryCode", qSpecMetroCountryCode); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroID != nil {

		// query param spec.metro.id
		var qrSpecMetroID string

		if o.SpecMetroID != nil {
			qrSpecMetroID = *o.SpecMetroID
		}
		qSpecMetroID := qrSpecMetroID
		if qSpecMetroID != "" {

			if err := r.SetQueryParam("spec.metro.id", qSpecMetroID); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroLatitude != nil {

		// query param spec.metro.latitude
		var qrSpecMetroLatitude string

		if o.SpecMetroLatitude != nil {
			qrSpecMetroLatitude = *o.SpecMetroLatitude
		}
		qSpecMetroLatitude := qrSpecMetroLatitude
		if qSpecMetroLatitude != "" {

			if err := r.SetQueryParam("spec.metro.latitude", qSpecMetroLatitude); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroLocale != nil {

		// query param spec.metro.locale
		var qrSpecMetroLocale string

		if o.SpecMetroLocale != nil {
			qrSpecMetroLocale = *o.SpecMetroLocale
		}
		qSpecMetroLocale := qrSpecMetroLocale
		if qSpecMetroLocale != "" {

			if err := r.SetQueryParam("spec.metro.locale", qSpecMetroLocale); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroLongitude != nil {

		// query param spec.metro.longitude
		var qrSpecMetroLongitude string

		if o.SpecMetroLongitude != nil {
			qrSpecMetroLongitude = *o.SpecMetroLongitude
		}
		qSpecMetroLongitude := qrSpecMetroLongitude
		if qSpecMetroLongitude != "" {

			if err := r.SetQueryParam("spec.metro.longitude", qSpecMetroLongitude); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroName != nil {

		// query param spec.metro.name
		var qrSpecMetroName string

		if o.SpecMetroName != nil {
			qrSpecMetroName = *o.SpecMetroName
		}
		qSpecMetroName := qrSpecMetroName
		if qSpecMetroName != "" {

			if err := r.SetQueryParam("spec.metro.name", qSpecMetroName); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroState != nil {

		// query param spec.metro.state
		var qrSpecMetroState string

		if o.SpecMetroState != nil {
			qrSpecMetroState = *o.SpecMetroState
		}
		qSpecMetroState := qrSpecMetroState
		if qSpecMetroState != "" {

			if err := r.SetQueryParam("spec.metro.state", qSpecMetroState); err != nil {
				return err
			}
		}
	}

	if o.SpecMetroStateCode != nil {

		// query param spec.metro.stateCode
		var qrSpecMetroStateCode string

		if o.SpecMetroStateCode != nil {
			qrSpecMetroStateCode = *o.SpecMetroStateCode
		}
		qSpecMetroStateCode := qrSpecMetroStateCode
		if qSpecMetroStateCode != "" {

			if err := r.SetQueryParam("spec.metro.stateCode", qSpecMetroStateCode); err != nil {
				return err
			}
		}
	}

	if o.SpecOverrideSelector != nil {

		// query param spec.overrideSelector
		var qrSpecOverrideSelector string

		if o.SpecOverrideSelector != nil {
			qrSpecOverrideSelector = *o.SpecOverrideSelector
		}
		qSpecOverrideSelector := qrSpecOverrideSelector
		if qSpecOverrideSelector != "" {

			if err := r.SetQueryParam("spec.overrideSelector", qSpecOverrideSelector); err != nil {
				return err
			}
		}
	}

	if o.SpecParamsEnvironmentProvider != nil {

		// query param spec.params.environmentProvider
		var qrSpecParamsEnvironmentProvider string

		if o.SpecParamsEnvironmentProvider != nil {
			qrSpecParamsEnvironmentProvider = *o.SpecParamsEnvironmentProvider
		}
		qSpecParamsEnvironmentProvider := qrSpecParamsEnvironmentProvider
		if qSpecParamsEnvironmentProvider != "" {

			if err := r.SetQueryParam("spec.params.environmentProvider", qSpecParamsEnvironmentProvider); err != nil {
				return err
			}
		}
	}

	if o.SpecParamsKubernetesProvider != nil {

		// query param spec.params.kubernetesProvider
		var qrSpecParamsKubernetesProvider string

		if o.SpecParamsKubernetesProvider != nil {
			qrSpecParamsKubernetesProvider = *o.SpecParamsKubernetesProvider
		}
		qSpecParamsKubernetesProvider := qrSpecParamsKubernetesProvider
		if qSpecParamsKubernetesProvider != "" {

			if err := r.SetQueryParam("spec.params.kubernetesProvider", qSpecParamsKubernetesProvider); err != nil {
				return err
			}
		}
	}

	if o.SpecParamsProvisionEnvironment != nil {

		// query param spec.params.provisionEnvironment
		var qrSpecParamsProvisionEnvironment string

		if o.SpecParamsProvisionEnvironment != nil {
			qrSpecParamsProvisionEnvironment = *o.SpecParamsProvisionEnvironment
		}
		qSpecParamsProvisionEnvironment := qrSpecParamsProvisionEnvironment
		if qSpecParamsProvisionEnvironment != "" {

			if err := r.SetQueryParam("spec.params.provisionEnvironment", qSpecParamsProvisionEnvironment); err != nil {
				return err
			}
		}
	}

	if o.SpecParamsProvisionPackageType != nil {

		// query param spec.params.provisionPackageType
		var qrSpecParamsProvisionPackageType string

		if o.SpecParamsProvisionPackageType != nil {
			qrSpecParamsProvisionPackageType = *o.SpecParamsProvisionPackageType
		}
		qSpecParamsProvisionPackageType := qrSpecParamsProvisionPackageType
		if qSpecParamsProvisionPackageType != "" {

			if err := r.SetQueryParam("spec.params.provisionPackageType", qSpecParamsProvisionPackageType); err != nil {
				return err
			}
		}
	}

	if o.SpecParamsProvisionType != nil {

		// query param spec.params.provisionType
		var qrSpecParamsProvisionType string

		if o.SpecParamsProvisionType != nil {
			qrSpecParamsProvisionType = *o.SpecParamsProvisionType
		}
		qSpecParamsProvisionType := qrSpecParamsProvisionType
		if qSpecParamsProvisionType != "" {

			if err := r.SetQueryParam("spec.params.provisionType", qSpecParamsProvisionType); err != nil {
				return err
			}
		}
	}

	if o.SpecParamsState != nil {

		// query param spec.params.state
		var qrSpecParamsState string

		if o.SpecParamsState != nil {
			qrSpecParamsState = *o.SpecParamsState
		}
		qSpecParamsState := qrSpecParamsState
		if qSpecParamsState != "" {

			if err := r.SetQueryParam("spec.params.state", qSpecParamsState); err != nil {
				return err
			}
		}
	}

	if o.SpecProxyConfigAllowInsecureBootstrap != nil {

		// query param spec.proxyConfig.allowInsecureBootstrap
		var qrSpecProxyConfigAllowInsecureBootstrap bool

		if o.SpecProxyConfigAllowInsecureBootstrap != nil {
			qrSpecProxyConfigAllowInsecureBootstrap = *o.SpecProxyConfigAllowInsecureBootstrap
		}
		qSpecProxyConfigAllowInsecureBootstrap := swag.FormatBool(qrSpecProxyConfigAllowInsecureBootstrap)
		if qSpecProxyConfigAllowInsecureBootstrap != "" {

			if err := r.SetQueryParam("spec.proxyConfig.allowInsecureBootstrap", qSpecProxyConfigAllowInsecureBootstrap); err != nil {
				return err
			}
		}
	}

	if o.SpecProxyConfigBootstrapCA != nil {

		// query param spec.proxyConfig.bootstrapCA
		var qrSpecProxyConfigBootstrapCA string

		if o.SpecProxyConfigBootstrapCA != nil {
			qrSpecProxyConfigBootstrapCA = *o.SpecProxyConfigBootstrapCA
		}
		qSpecProxyConfigBootstrapCA := qrSpecProxyConfigBootstrapCA
		if qSpecProxyConfigBootstrapCA != "" {

			if err := r.SetQueryParam("spec.proxyConfig.bootstrapCA", qSpecProxyConfigBootstrapCA); err != nil {
				return err
			}
		}
	}

	if o.SpecProxyConfigEnabled != nil {

		// query param spec.proxyConfig.enabled
		var qrSpecProxyConfigEnabled bool

		if o.SpecProxyConfigEnabled != nil {
			qrSpecProxyConfigEnabled = *o.SpecProxyConfigEnabled
		}
		qSpecProxyConfigEnabled := swag.FormatBool(qrSpecProxyConfigEnabled)
		if qSpecProxyConfigEnabled != "" {

			if err := r.SetQueryParam("spec.proxyConfig.enabled", qSpecProxyConfigEnabled); err != nil {
				return err
			}
		}
	}

	if o.SpecProxyConfigHTTPProxy != nil {

		// query param spec.proxyConfig.httpProxy
		var qrSpecProxyConfigHTTPProxy string

		if o.SpecProxyConfigHTTPProxy != nil {
			qrSpecProxyConfigHTTPProxy = *o.SpecProxyConfigHTTPProxy
		}
		qSpecProxyConfigHTTPProxy := qrSpecProxyConfigHTTPProxy
		if qSpecProxyConfigHTTPProxy != "" {

			if err := r.SetQueryParam("spec.proxyConfig.httpProxy", qSpecProxyConfigHTTPProxy); err != nil {
				return err
			}
		}
	}

	if o.SpecProxyConfigHTTPSProxy != nil {

		// query param spec.proxyConfig.httpsProxy
		var qrSpecProxyConfigHTTPSProxy string

		if o.SpecProxyConfigHTTPSProxy != nil {
			qrSpecProxyConfigHTTPSProxy = *o.SpecProxyConfigHTTPSProxy
		}
		qSpecProxyConfigHTTPSProxy := qrSpecProxyConfigHTTPSProxy
		if qSpecProxyConfigHTTPSProxy != "" {

			if err := r.SetQueryParam("spec.proxyConfig.httpsProxy", qSpecProxyConfigHTTPSProxy); err != nil {
				return err
			}
		}
	}

	if o.SpecProxyConfigNoProxy != nil {

		// query param spec.proxyConfig.noProxy
		var qrSpecProxyConfigNoProxy string

		if o.SpecProxyConfigNoProxy != nil {
			qrSpecProxyConfigNoProxy = *o.SpecProxyConfigNoProxy
		}
		qSpecProxyConfigNoProxy := qrSpecProxyConfigNoProxy
		if qSpecProxyConfigNoProxy != "" {

			if err := r.SetQueryParam("spec.proxyConfig.noProxy", qSpecProxyConfigNoProxy); err != nil {
				return err
			}
		}
	}

	if o.SpecProxyConfigProxyAuth != nil {

		// query param spec.proxyConfig.proxyAuth
		var qrSpecProxyConfigProxyAuth string

		if o.SpecProxyConfigProxyAuth != nil {
			qrSpecProxyConfigProxyAuth = *o.SpecProxyConfigProxyAuth
		}
		qSpecProxyConfigProxyAuth := qrSpecProxyConfigProxyAuth
		if qSpecProxyConfigProxyAuth != "" {

			if err := r.SetQueryParam("spec.proxyConfig.proxyAuth", qSpecProxyConfigProxyAuth); err != nil {
				return err
			}
		}
	}

	if o.SpecShareMode != nil {

		// query param spec.shareMode
		var qrSpecShareMode string

		if o.SpecShareMode != nil {
			qrSpecShareMode = *o.SpecShareMode
		}
		qSpecShareMode := qrSpecShareMode
		if qSpecShareMode != "" {

			if err := r.SetQueryParam("spec.shareMode", qSpecShareMode); err != nil {
				return err
			}
		}
	}

	if o.StatusConditionStatus != nil {

		// query param status.conditionStatus
		var qrStatusConditionStatus string

		if o.StatusConditionStatus != nil {
			qrStatusConditionStatus = *o.StatusConditionStatus
		}
		qStatusConditionStatus := qrStatusConditionStatus
		if qStatusConditionStatus != "" {

			if err := r.SetQueryParam("status.conditionStatus", qStatusConditionStatus); err != nil {
				return err
			}
		}
	}

	if o.StatusConditionType != nil {

		// query param status.conditionType
		var qrStatusConditionType string

		if o.StatusConditionType != nil {
			qrStatusConditionType = *o.StatusConditionType
		}
		qStatusConditionType := qrStatusConditionType
		if qStatusConditionType != "" {

			if err := r.SetQueryParam("status.conditionType", qStatusConditionType); err != nil {
				return err
			}
		}
	}

	if o.StatusLastUpdated != nil {

		// query param status.lastUpdated
		var qrStatusLastUpdated strfmt.DateTime

		if o.StatusLastUpdated != nil {
			qrStatusLastUpdated = *o.StatusLastUpdated
		}
		qStatusLastUpdated := qrStatusLastUpdated.String()
		if qStatusLastUpdated != "" {

			if err := r.SetQueryParam("status.lastUpdated", qStatusLastUpdated); err != nil {
				return err
			}
		}
	}

	if o.StatusReason != nil {

		// query param status.reason
		var qrStatusReason string

		if o.StatusReason != nil {
			qrStatusReason = *o.StatusReason
		}
		qStatusReason := qrStatusReason
		if qStatusReason != "" {

			if err := r.SetQueryParam("status.reason", qStatusReason); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
