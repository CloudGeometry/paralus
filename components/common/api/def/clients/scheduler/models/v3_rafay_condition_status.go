// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V3RafayConditionStatus RafayConditionStatus is the status of the status condition
//
// swagger:model v3RafayConditionStatus
type V3RafayConditionStatus string

func NewV3RafayConditionStatus(value V3RafayConditionStatus) *V3RafayConditionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V3RafayConditionStatus.
func (m V3RafayConditionStatus) Pointer() *V3RafayConditionStatus {
	return &m
}

const (

	// V3RafayConditionStatusNotSet captures enum value "NotSet"
	V3RafayConditionStatusNotSet V3RafayConditionStatus = "NotSet"

	// V3RafayConditionStatusPending captures enum value "Pending"
	V3RafayConditionStatusPending V3RafayConditionStatus = "Pending"

	// V3RafayConditionStatusInProgress captures enum value "InProgress"
	V3RafayConditionStatusInProgress V3RafayConditionStatus = "InProgress"

	// V3RafayConditionStatusSuccess captures enum value "Success"
	V3RafayConditionStatusSuccess V3RafayConditionStatus = "Success"

	// V3RafayConditionStatusFailed captures enum value "Failed"
	V3RafayConditionStatusFailed V3RafayConditionStatus = "Failed"

	// V3RafayConditionStatusRetry captures enum value "Retry"
	V3RafayConditionStatusRetry V3RafayConditionStatus = "Retry"

	// V3RafayConditionStatusSkipped captures enum value "Skipped"
	V3RafayConditionStatusSkipped V3RafayConditionStatus = "Skipped"

	// V3RafayConditionStatusStopped captures enum value "Stopped"
	V3RafayConditionStatusStopped V3RafayConditionStatus = "Stopped"

	// V3RafayConditionStatusExpired captures enum value "Expired"
	V3RafayConditionStatusExpired V3RafayConditionStatus = "Expired"

	// V3RafayConditionStatusStopping captures enum value "Stopping"
	V3RafayConditionStatusStopping V3RafayConditionStatus = "Stopping"

	// V3RafayConditionStatusSubmitted captures enum value "Submitted"
	V3RafayConditionStatusSubmitted V3RafayConditionStatus = "Submitted"
)

// for schema
var v3RafayConditionStatusEnum []interface{}

func init() {
	var res []V3RafayConditionStatus
	if err := json.Unmarshal([]byte(`["NotSet","Pending","InProgress","Success","Failed","Retry","Skipped","Stopped","Expired","Stopping","Submitted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3RafayConditionStatusEnum = append(v3RafayConditionStatusEnum, v)
	}
}

func (m V3RafayConditionStatus) validateV3RafayConditionStatusEnum(path, location string, value V3RafayConditionStatus) error {
	if err := validate.EnumCase(path, location, value, v3RafayConditionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v3 rafay condition status
func (m V3RafayConditionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV3RafayConditionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v3 rafay condition status based on context it is used
func (m V3RafayConditionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
