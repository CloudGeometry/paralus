// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V3ClusterNodeState v3 cluster node state
//
// swagger:model v3ClusterNodeState
type V3ClusterNodeState string

func NewV3ClusterNodeState(value V3ClusterNodeState) *V3ClusterNodeState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V3ClusterNodeState.
func (m V3ClusterNodeState) Pointer() *V3ClusterNodeState {
	return &m
}

const (

	// V3ClusterNodeStateClusterNodeCreated captures enum value "ClusterNodeCreated"
	V3ClusterNodeStateClusterNodeCreated V3ClusterNodeState = "ClusterNodeCreated"

	// V3ClusterNodeStateClusterNodeNotReady captures enum value "ClusterNodeNotReady"
	V3ClusterNodeStateClusterNodeNotReady V3ClusterNodeState = "ClusterNodeNotReady"

	// V3ClusterNodeStateClusterNodeReady captures enum value "ClusterNodeReady"
	V3ClusterNodeStateClusterNodeReady V3ClusterNodeState = "ClusterNodeReady"
)

// for schema
var v3ClusterNodeStateEnum []interface{}

func init() {
	var res []V3ClusterNodeState
	if err := json.Unmarshal([]byte(`["ClusterNodeCreated","ClusterNodeNotReady","ClusterNodeReady"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3ClusterNodeStateEnum = append(v3ClusterNodeStateEnum, v)
	}
}

func (m V3ClusterNodeState) validateV3ClusterNodeStateEnum(path, location string, value V3ClusterNodeState) error {
	if err := validate.EnumCase(path, location, value, v3ClusterNodeStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v3 cluster node state
func (m V3ClusterNodeState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV3ClusterNodeStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v3 cluster node state based on context it is used
func (m V3ClusterNodeState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
