// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Taint The node this Taint is attached to has the "effect" on
// any pod that does not tolerate the Taint.
//
// swagger:model v1Taint
type V1Taint struct {

	// Required. The effect of the taint on pods
	// that do not tolerate the taint.
	// Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
	Effect string `json:"effect,omitempty"`

	// Required. The taint key to be applied to a node.
	Key string `json:"key,omitempty"`

	// TimeAdded represents the time at which the taint was added.
	// It is only written for NoExecute taints.
	// +optional
	TimeAdded *V1Time `json:"timeAdded,omitempty"`

	// The taint value corresponding to the taint key.
	// +optional
	Value string `json:"value,omitempty"`
}

// Validate validates this v1 taint
func (m *V1Taint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeAdded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Taint) validateTimeAdded(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeAdded) { // not required
		return nil
	}

	if m.TimeAdded != nil {
		if err := m.TimeAdded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeAdded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeAdded")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 taint based on the context it is used
func (m *V1Taint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeAdded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Taint) contextValidateTimeAdded(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeAdded != nil {
		if err := m.TimeAdded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeAdded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeAdded")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Taint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Taint) UnmarshalBinary(b []byte) error {
	var res V1Taint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
