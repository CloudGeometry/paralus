// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V3Health v3 health
//
// swagger:model v3Health
type V3Health string

func NewV3Health(value V3Health) *V3Health {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V3Health.
func (m V3Health) Pointer() *V3Health {
	return &m
}

const (

	// V3HealthEDGEIGNORE captures enum value "EDGE_IGNORE"
	V3HealthEDGEIGNORE V3Health = "EDGE_IGNORE"

	// V3HealthEDGEHEALTHY captures enum value "EDGE_HEALTHY"
	V3HealthEDGEHEALTHY V3Health = "EDGE_HEALTHY"

	// V3HealthEDGEUNHEALTHY captures enum value "EDGE_UNHEALTHY"
	V3HealthEDGEUNHEALTHY V3Health = "EDGE_UNHEALTHY"

	// V3HealthEDGEDISCONNECTED captures enum value "EDGE_DISCONNECTED"
	V3HealthEDGEDISCONNECTED V3Health = "EDGE_DISCONNECTED"
)

// for schema
var v3HealthEnum []interface{}

func init() {
	var res []V3Health
	if err := json.Unmarshal([]byte(`["EDGE_IGNORE","EDGE_HEALTHY","EDGE_UNHEALTHY","EDGE_DISCONNECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3HealthEnum = append(v3HealthEnum, v)
	}
}

func (m V3Health) validateV3HealthEnum(path, location string, value V3Health) error {
	if err := validate.EnumCase(path, location, value, v3HealthEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v3 health
func (m V3Health) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV3HealthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v3 health based on context it is used
func (m V3Health) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
