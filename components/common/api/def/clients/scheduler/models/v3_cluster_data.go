// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3ClusterData v3 cluster data
//
// swagger:model v3ClusterData
type V3ClusterData struct {

	// DNS A Record
	//
	// Entry for DNS A Record
	// Read Only: true
	Arecord string `json:"arecord,omitempty"`

	// ClusterBlueprint
	//
	// Cluster Blueprint
	// Read Only: true
	ClusterBlueprint string `json:"clusterBlueprint,omitempty"`

	// ClusterStatus
	//
	// Cluster Status
	// Read Only: true
	ClusterStatus *V3ClusterStatus `json:"clusterStatus,omitempty"`

	// CNAME
	//
	// cname of the cluster
	// Read Only: true
	Cname string `json:"cname,omitempty"`

	// Display Name
	//
	// Display Name
	// Read Only: true
	DisplayName string `json:"displayName,omitempty"`

	// Health
	//
	// Health
	// Read Only: true
	Health *V3Health `json:"health,omitempty"`

	// Manufacturer
	//
	// Manufacturer
	// Read Only: true
	Manufacturer string `json:"manufacturer,omitempty"`

	// Cluster Information
	//
	// Override selector of the cluster
	Nodes []*V3ClusterNode `json:"nodes"`

	// Passphrase
	//
	// passphrase of the cluster
	// Read Only: true
	Passphrase string `json:"passphrase,omitempty"`

	// Cluster Information
	//
	// Override selector of the cluster
	Projects []*V3ProjectCluster `json:"projects"`

	// Provider
	//
	// Provider
	// Read Only: true
	Provider string `json:"provider,omitempty"`
}

// Validate validates this v3 cluster data
func (m *V3ClusterData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ClusterData) validateClusterStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterStatus) { // not required
		return nil
	}

	if m.ClusterStatus != nil {
		if err := m.ClusterStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterData) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterData) validateNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3ClusterData) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v3 cluster data based on the context it is used
func (m *V3ClusterData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArecord(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterBlueprint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCname(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplayName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManufacturer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePassphrase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ClusterData) contextValidateArecord(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "arecord", "body", string(m.Arecord)); err != nil {
		return err
	}

	return nil
}

func (m *V3ClusterData) contextValidateClusterBlueprint(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "clusterBlueprint", "body", string(m.ClusterBlueprint)); err != nil {
		return err
	}

	return nil
}

func (m *V3ClusterData) contextValidateClusterStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterStatus != nil {
		if err := m.ClusterStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterData) contextValidateCname(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cname", "body", string(m.Cname)); err != nil {
		return err
	}

	return nil
}

func (m *V3ClusterData) contextValidateDisplayName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "displayName", "body", string(m.DisplayName)); err != nil {
		return err
	}

	return nil
}

func (m *V3ClusterData) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {
		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterData) contextValidateManufacturer(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "manufacturer", "body", string(m.Manufacturer)); err != nil {
		return err
	}

	return nil
}

func (m *V3ClusterData) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3ClusterData) contextValidatePassphrase(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "passphrase", "body", string(m.Passphrase)); err != nil {
		return err
	}

	return nil
}

func (m *V3ClusterData) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Projects); i++ {

		if m.Projects[i] != nil {
			if err := m.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3ClusterData) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "provider", "body", string(m.Provider)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ClusterData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ClusterData) UnmarshalBinary(b []byte) error {
	var res V3ClusterData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
