// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V3ClusterSpec v3 cluster spec
//
// swagger:model v3ClusterSpec
type V3ClusterSpec struct {

	// Cluster Information
	//
	// Override selector of the cluster
	// Read Only: true
	ClusterData *V3ClusterData `json:"clusterData,omitempty"`

	// Cluster Type
	//
	// Type of the cluster being created
	ClusterType *string `json:"clusterType,omitempty"`

	// Location
	//
	// Location of the cluster
	Metro *V3Metro `json:"metro,omitempty"`

	// Override Selector
	//
	// Override selector of the cluster
	OverrideSelector string `json:"overrideSelector,omitempty"`

	// Provision Params
	//
	// Cluster provisioning params
	Params *V3ProvisionParams `json:"params,omitempty"`

	// ProxyConfig
	//
	// Override selector of the cluster
	ProxyConfig *V3ProxyConfig `json:"proxyConfig,omitempty"`

	// Override Selector
	//
	// Override selector of the cluster
	ShareMode *V3ClusterShareMode `json:"shareMode,omitempty"`
}

// Validate validates this v3 cluster spec
func (m *V3ClusterSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetro(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ClusterSpec) validateClusterData(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterData) { // not required
		return nil
	}

	if m.ClusterData != nil {
		if err := m.ClusterData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterData")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) validateMetro(formats strfmt.Registry) error {
	if swag.IsZero(m.Metro) { // not required
		return nil
	}

	if m.Metro != nil {
		if err := m.Metro.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metro")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metro")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) validateProxyConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyConfig) { // not required
		return nil
	}

	if m.ProxyConfig != nil {
		if err := m.ProxyConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) validateShareMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ShareMode) { // not required
		return nil
	}

	if m.ShareMode != nil {
		if err := m.ShareMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shareMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shareMode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v3 cluster spec based on the context it is used
func (m *V3ClusterSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetro(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShareMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ClusterSpec) contextValidateClusterData(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterData != nil {
		if err := m.ClusterData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterData")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) contextValidateMetro(ctx context.Context, formats strfmt.Registry) error {

	if m.Metro != nil {
		if err := m.Metro.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metro")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metro")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {
		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) contextValidateProxyConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyConfig != nil {
		if err := m.ProxyConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxyConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxyConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V3ClusterSpec) contextValidateShareMode(ctx context.Context, formats strfmt.Registry) error {

	if m.ShareMode != nil {
		if err := m.ShareMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shareMode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shareMode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ClusterSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ClusterSpec) UnmarshalBinary(b []byte) error {
	var res V3ClusterSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
