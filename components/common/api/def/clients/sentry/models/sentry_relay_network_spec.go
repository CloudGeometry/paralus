// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SentryRelayNetworkSpec sentry relay network spec
//
// swagger:model sentryRelayNetworkSpec
type SentryRelayNetworkSpec struct {

	// clustercacert
	Clustercacert string `json:"clustercacert,omitempty"`

	// clustercert
	Clustercert string `json:"clustercert,omitempty"`

	// clusterhost
	Clusterhost string `json:"clusterhost,omitempty"`

	// clusterkey
	Clusterkey string `json:"clusterkey,omitempty"`

	// clusterpassword
	Clusterpassword string `json:"clusterpassword,omitempty"`

	// clusterselfsigned
	Clusterselfsigned bool `json:"clusterselfsigned,omitempty"`

	// placement
	Placement *TypesconfigPlacementSpec `json:"placement,omitempty"`

	// usercacert
	Usercacert string `json:"usercacert,omitempty"`

	// usercert
	Usercert string `json:"usercert,omitempty"`

	// userhost
	Userhost string `json:"userhost,omitempty"`

	// userkey
	Userkey string `json:"userkey,omitempty"`

	// userpassword
	Userpassword string `json:"userpassword,omitempty"`

	// userselfsigned
	Userselfsigned bool `json:"userselfsigned,omitempty"`
}

// Validate validates this sentry relay network spec
func (m *SentryRelayNetworkSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlacement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SentryRelayNetworkSpec) validatePlacement(formats strfmt.Registry) error {
	if swag.IsZero(m.Placement) { // not required
		return nil
	}

	if m.Placement != nil {
		if err := m.Placement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placement")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sentry relay network spec based on the context it is used
func (m *SentryRelayNetworkSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlacement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SentryRelayNetworkSpec) contextValidatePlacement(ctx context.Context, formats strfmt.Registry) error {

	if m.Placement != nil {
		if err := m.Placement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("placement")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SentryRelayNetworkSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SentryRelayNetworkSpec) UnmarshalBinary(b []byte) error {
	var res SentryRelayNetworkSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
