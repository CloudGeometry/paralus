// Code generated by go-swagger; DO NOT EDIT.

package bootstrap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBootstrapDownloadRelayNetworkParams creates a new BootstrapDownloadRelayNetworkParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewBootstrapDownloadRelayNetworkParams() *BootstrapDownloadRelayNetworkParams {
	return &BootstrapDownloadRelayNetworkParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewBootstrapDownloadRelayNetworkParamsWithTimeout creates a new BootstrapDownloadRelayNetworkParams object
// with the ability to set a timeout on a request.
func NewBootstrapDownloadRelayNetworkParamsWithTimeout(timeout time.Duration) *BootstrapDownloadRelayNetworkParams {
	return &BootstrapDownloadRelayNetworkParams{
		timeout: timeout,
	}
}

// NewBootstrapDownloadRelayNetworkParamsWithContext creates a new BootstrapDownloadRelayNetworkParams object
// with the ability to set a context for a request.
func NewBootstrapDownloadRelayNetworkParamsWithContext(ctx context.Context) *BootstrapDownloadRelayNetworkParams {
	return &BootstrapDownloadRelayNetworkParams{
		Context: ctx,
	}
}

// NewBootstrapDownloadRelayNetworkParamsWithHTTPClient creates a new BootstrapDownloadRelayNetworkParams object
// with the ability to set a custom HTTPClient for a request.
func NewBootstrapDownloadRelayNetworkParamsWithHTTPClient(client *http.Client) *BootstrapDownloadRelayNetworkParams {
	return &BootstrapDownloadRelayNetworkParams{
		HTTPClient: client,
	}
}

/* BootstrapDownloadRelayNetworkParams contains all the parameters to send to the API endpoint
   for the bootstrap download relay network operation.

   Typically these are written to a http.Request.
*/
type BootstrapDownloadRelayNetworkParams struct {

	/* APIVersion.

	   API Version. API Version of the resource

	   Default: "infra.k8smgmt.io/v3"
	*/
	APIVersion *string

	/* Kind.

	   Kind. Kind of the resource

	   Default: "RelayNetwork"
	*/
	Kind *string

	/* MetadataDescription.

	   Description. description of the resource
	*/
	MetadataDescription *string

	// MetadataID.
	MetadataID *string

	// MetadataModifiedAt.
	//
	// Format: date-time
	MetadataModifiedAt *strfmt.DateTime

	/* MetadataName.

	   name of the resource
	*/
	MetadataName string

	/* MetadataOrganization.

	   Organization. Organization to which the resource belongs
	*/
	MetadataOrganization *string

	/* MetadataPartner.

	   Partner. Partner to which the resource belongs
	*/
	MetadataPartner *string

	/* MetadataProject.

	   Project. Project of the resource
	*/
	MetadataProject *string

	// SpecClustercacert.
	SpecClustercacert *string

	// SpecClustercert.
	SpecClustercert *string

	// SpecClusterhost.
	SpecClusterhost *string

	// SpecClusterkey.
	SpecClusterkey *string

	// SpecClusterpassword.
	SpecClusterpassword *string

	// SpecClusterselfsigned.
	SpecClusterselfsigned *bool

	// SpecPlacementClusterSelector.
	SpecPlacementClusterSelector *string

	// SpecPlacementDriftAction.
	//
	// Default: "DriftReconcillationActionNotSet"
	SpecPlacementDriftAction *string

	// SpecPlacementNodeGroupingKeys.
	SpecPlacementNodeGroupingKeys []string

	/* SpecPlacementPlacementType.

	   placementType is the type of placement.

	   Default: "ClusterSelector"
	*/
	SpecPlacementPlacementType *string

	// SpecUsercacert.
	SpecUsercacert *string

	// SpecUsercert.
	SpecUsercert *string

	// SpecUserhost.
	SpecUserhost *string

	// SpecUserkey.
	SpecUserkey *string

	// SpecUserpassword.
	SpecUserpassword *string

	// SpecUserselfsigned.
	SpecUserselfsigned *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the bootstrap download relay network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BootstrapDownloadRelayNetworkParams) WithDefaults() *BootstrapDownloadRelayNetworkParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the bootstrap download relay network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BootstrapDownloadRelayNetworkParams) SetDefaults() {
	var (
		aPIVersionDefault = string("infra.k8smgmt.io/v3")

		kindDefault = string("RelayNetwork")

		specPlacementDriftActionDefault = string("DriftReconcillationActionNotSet")

		specPlacementPlacementTypeDefault = string("ClusterSelector")
	)

	val := BootstrapDownloadRelayNetworkParams{
		APIVersion:                 &aPIVersionDefault,
		Kind:                       &kindDefault,
		SpecPlacementDriftAction:   &specPlacementDriftActionDefault,
		SpecPlacementPlacementType: &specPlacementPlacementTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithTimeout(timeout time.Duration) *BootstrapDownloadRelayNetworkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithContext(ctx context.Context) *BootstrapDownloadRelayNetworkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithHTTPClient(client *http.Client) *BootstrapDownloadRelayNetworkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithAPIVersion(aPIVersion *string) *BootstrapDownloadRelayNetworkParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithKind adds the kind to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithKind(kind *string) *BootstrapDownloadRelayNetworkParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithMetadataDescription adds the metadataDescription to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithMetadataDescription(metadataDescription *string) *BootstrapDownloadRelayNetworkParams {
	o.SetMetadataDescription(metadataDescription)
	return o
}

// SetMetadataDescription adds the metadataDescription to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetMetadataDescription(metadataDescription *string) {
	o.MetadataDescription = metadataDescription
}

// WithMetadataID adds the metadataID to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithMetadataID(metadataID *string) *BootstrapDownloadRelayNetworkParams {
	o.SetMetadataID(metadataID)
	return o
}

// SetMetadataID adds the metadataId to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetMetadataID(metadataID *string) {
	o.MetadataID = metadataID
}

// WithMetadataModifiedAt adds the metadataModifiedAt to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithMetadataModifiedAt(metadataModifiedAt *strfmt.DateTime) *BootstrapDownloadRelayNetworkParams {
	o.SetMetadataModifiedAt(metadataModifiedAt)
	return o
}

// SetMetadataModifiedAt adds the metadataModifiedAt to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetMetadataModifiedAt(metadataModifiedAt *strfmt.DateTime) {
	o.MetadataModifiedAt = metadataModifiedAt
}

// WithMetadataName adds the metadataName to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithMetadataName(metadataName string) *BootstrapDownloadRelayNetworkParams {
	o.SetMetadataName(metadataName)
	return o
}

// SetMetadataName adds the metadataName to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetMetadataName(metadataName string) {
	o.MetadataName = metadataName
}

// WithMetadataOrganization adds the metadataOrganization to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithMetadataOrganization(metadataOrganization *string) *BootstrapDownloadRelayNetworkParams {
	o.SetMetadataOrganization(metadataOrganization)
	return o
}

// SetMetadataOrganization adds the metadataOrganization to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetMetadataOrganization(metadataOrganization *string) {
	o.MetadataOrganization = metadataOrganization
}

// WithMetadataPartner adds the metadataPartner to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithMetadataPartner(metadataPartner *string) *BootstrapDownloadRelayNetworkParams {
	o.SetMetadataPartner(metadataPartner)
	return o
}

// SetMetadataPartner adds the metadataPartner to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetMetadataPartner(metadataPartner *string) {
	o.MetadataPartner = metadataPartner
}

// WithMetadataProject adds the metadataProject to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithMetadataProject(metadataProject *string) *BootstrapDownloadRelayNetworkParams {
	o.SetMetadataProject(metadataProject)
	return o
}

// SetMetadataProject adds the metadataProject to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetMetadataProject(metadataProject *string) {
	o.MetadataProject = metadataProject
}

// WithSpecClustercacert adds the specClustercacert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecClustercacert(specClustercacert *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecClustercacert(specClustercacert)
	return o
}

// SetSpecClustercacert adds the specClustercacert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecClustercacert(specClustercacert *string) {
	o.SpecClustercacert = specClustercacert
}

// WithSpecClustercert adds the specClustercert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecClustercert(specClustercert *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecClustercert(specClustercert)
	return o
}

// SetSpecClustercert adds the specClustercert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecClustercert(specClustercert *string) {
	o.SpecClustercert = specClustercert
}

// WithSpecClusterhost adds the specClusterhost to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecClusterhost(specClusterhost *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecClusterhost(specClusterhost)
	return o
}

// SetSpecClusterhost adds the specClusterhost to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecClusterhost(specClusterhost *string) {
	o.SpecClusterhost = specClusterhost
}

// WithSpecClusterkey adds the specClusterkey to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecClusterkey(specClusterkey *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecClusterkey(specClusterkey)
	return o
}

// SetSpecClusterkey adds the specClusterkey to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecClusterkey(specClusterkey *string) {
	o.SpecClusterkey = specClusterkey
}

// WithSpecClusterpassword adds the specClusterpassword to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecClusterpassword(specClusterpassword *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecClusterpassword(specClusterpassword)
	return o
}

// SetSpecClusterpassword adds the specClusterpassword to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecClusterpassword(specClusterpassword *string) {
	o.SpecClusterpassword = specClusterpassword
}

// WithSpecClusterselfsigned adds the specClusterselfsigned to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecClusterselfsigned(specClusterselfsigned *bool) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecClusterselfsigned(specClusterselfsigned)
	return o
}

// SetSpecClusterselfsigned adds the specClusterselfsigned to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecClusterselfsigned(specClusterselfsigned *bool) {
	o.SpecClusterselfsigned = specClusterselfsigned
}

// WithSpecPlacementClusterSelector adds the specPlacementClusterSelector to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecPlacementClusterSelector(specPlacementClusterSelector *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecPlacementClusterSelector(specPlacementClusterSelector)
	return o
}

// SetSpecPlacementClusterSelector adds the specPlacementClusterSelector to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecPlacementClusterSelector(specPlacementClusterSelector *string) {
	o.SpecPlacementClusterSelector = specPlacementClusterSelector
}

// WithSpecPlacementDriftAction adds the specPlacementDriftAction to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecPlacementDriftAction(specPlacementDriftAction *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecPlacementDriftAction(specPlacementDriftAction)
	return o
}

// SetSpecPlacementDriftAction adds the specPlacementDriftAction to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecPlacementDriftAction(specPlacementDriftAction *string) {
	o.SpecPlacementDriftAction = specPlacementDriftAction
}

// WithSpecPlacementNodeGroupingKeys adds the specPlacementNodeGroupingKeys to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecPlacementNodeGroupingKeys(specPlacementNodeGroupingKeys []string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecPlacementNodeGroupingKeys(specPlacementNodeGroupingKeys)
	return o
}

// SetSpecPlacementNodeGroupingKeys adds the specPlacementNodeGroupingKeys to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecPlacementNodeGroupingKeys(specPlacementNodeGroupingKeys []string) {
	o.SpecPlacementNodeGroupingKeys = specPlacementNodeGroupingKeys
}

// WithSpecPlacementPlacementType adds the specPlacementPlacementType to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecPlacementPlacementType(specPlacementPlacementType *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecPlacementPlacementType(specPlacementPlacementType)
	return o
}

// SetSpecPlacementPlacementType adds the specPlacementPlacementType to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecPlacementPlacementType(specPlacementPlacementType *string) {
	o.SpecPlacementPlacementType = specPlacementPlacementType
}

// WithSpecUsercacert adds the specUsercacert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecUsercacert(specUsercacert *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecUsercacert(specUsercacert)
	return o
}

// SetSpecUsercacert adds the specUsercacert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecUsercacert(specUsercacert *string) {
	o.SpecUsercacert = specUsercacert
}

// WithSpecUsercert adds the specUsercert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecUsercert(specUsercert *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecUsercert(specUsercert)
	return o
}

// SetSpecUsercert adds the specUsercert to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecUsercert(specUsercert *string) {
	o.SpecUsercert = specUsercert
}

// WithSpecUserhost adds the specUserhost to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecUserhost(specUserhost *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecUserhost(specUserhost)
	return o
}

// SetSpecUserhost adds the specUserhost to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecUserhost(specUserhost *string) {
	o.SpecUserhost = specUserhost
}

// WithSpecUserkey adds the specUserkey to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecUserkey(specUserkey *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecUserkey(specUserkey)
	return o
}

// SetSpecUserkey adds the specUserkey to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecUserkey(specUserkey *string) {
	o.SpecUserkey = specUserkey
}

// WithSpecUserpassword adds the specUserpassword to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecUserpassword(specUserpassword *string) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecUserpassword(specUserpassword)
	return o
}

// SetSpecUserpassword adds the specUserpassword to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecUserpassword(specUserpassword *string) {
	o.SpecUserpassword = specUserpassword
}

// WithSpecUserselfsigned adds the specUserselfsigned to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) WithSpecUserselfsigned(specUserselfsigned *bool) *BootstrapDownloadRelayNetworkParams {
	o.SetSpecUserselfsigned(specUserselfsigned)
	return o
}

// SetSpecUserselfsigned adds the specUserselfsigned to the bootstrap download relay network params
func (o *BootstrapDownloadRelayNetworkParams) SetSpecUserselfsigned(specUserselfsigned *bool) {
	o.SpecUserselfsigned = specUserselfsigned
}

// WriteToRequest writes these params to a swagger request
func (o *BootstrapDownloadRelayNetworkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// query param apiVersion
		var qrAPIVersion string

		if o.APIVersion != nil {
			qrAPIVersion = *o.APIVersion
		}
		qAPIVersion := qrAPIVersion
		if qAPIVersion != "" {

			if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
				return err
			}
		}
	}

	if o.Kind != nil {

		// query param kind
		var qrKind string

		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {

			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}
	}

	if o.MetadataDescription != nil {

		// query param metadata.description
		var qrMetadataDescription string

		if o.MetadataDescription != nil {
			qrMetadataDescription = *o.MetadataDescription
		}
		qMetadataDescription := qrMetadataDescription
		if qMetadataDescription != "" {

			if err := r.SetQueryParam("metadata.description", qMetadataDescription); err != nil {
				return err
			}
		}
	}

	if o.MetadataID != nil {

		// query param metadata.id
		var qrMetadataID string

		if o.MetadataID != nil {
			qrMetadataID = *o.MetadataID
		}
		qMetadataID := qrMetadataID
		if qMetadataID != "" {

			if err := r.SetQueryParam("metadata.id", qMetadataID); err != nil {
				return err
			}
		}
	}

	if o.MetadataModifiedAt != nil {

		// query param metadata.modifiedAt
		var qrMetadataModifiedAt strfmt.DateTime

		if o.MetadataModifiedAt != nil {
			qrMetadataModifiedAt = *o.MetadataModifiedAt
		}
		qMetadataModifiedAt := qrMetadataModifiedAt.String()
		if qMetadataModifiedAt != "" {

			if err := r.SetQueryParam("metadata.modifiedAt", qMetadataModifiedAt); err != nil {
				return err
			}
		}
	}

	// path param metadata.name
	if err := r.SetPathParam("metadata.name", o.MetadataName); err != nil {
		return err
	}

	if o.MetadataOrganization != nil {

		// query param metadata.organization
		var qrMetadataOrganization string

		if o.MetadataOrganization != nil {
			qrMetadataOrganization = *o.MetadataOrganization
		}
		qMetadataOrganization := qrMetadataOrganization
		if qMetadataOrganization != "" {

			if err := r.SetQueryParam("metadata.organization", qMetadataOrganization); err != nil {
				return err
			}
		}
	}

	if o.MetadataPartner != nil {

		// query param metadata.partner
		var qrMetadataPartner string

		if o.MetadataPartner != nil {
			qrMetadataPartner = *o.MetadataPartner
		}
		qMetadataPartner := qrMetadataPartner
		if qMetadataPartner != "" {

			if err := r.SetQueryParam("metadata.partner", qMetadataPartner); err != nil {
				return err
			}
		}
	}

	if o.MetadataProject != nil {

		// query param metadata.project
		var qrMetadataProject string

		if o.MetadataProject != nil {
			qrMetadataProject = *o.MetadataProject
		}
		qMetadataProject := qrMetadataProject
		if qMetadataProject != "" {

			if err := r.SetQueryParam("metadata.project", qMetadataProject); err != nil {
				return err
			}
		}
	}

	if o.SpecClustercacert != nil {

		// query param spec.clustercacert
		var qrSpecClustercacert string

		if o.SpecClustercacert != nil {
			qrSpecClustercacert = *o.SpecClustercacert
		}
		qSpecClustercacert := qrSpecClustercacert
		if qSpecClustercacert != "" {

			if err := r.SetQueryParam("spec.clustercacert", qSpecClustercacert); err != nil {
				return err
			}
		}
	}

	if o.SpecClustercert != nil {

		// query param spec.clustercert
		var qrSpecClustercert string

		if o.SpecClustercert != nil {
			qrSpecClustercert = *o.SpecClustercert
		}
		qSpecClustercert := qrSpecClustercert
		if qSpecClustercert != "" {

			if err := r.SetQueryParam("spec.clustercert", qSpecClustercert); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterhost != nil {

		// query param spec.clusterhost
		var qrSpecClusterhost string

		if o.SpecClusterhost != nil {
			qrSpecClusterhost = *o.SpecClusterhost
		}
		qSpecClusterhost := qrSpecClusterhost
		if qSpecClusterhost != "" {

			if err := r.SetQueryParam("spec.clusterhost", qSpecClusterhost); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterkey != nil {

		// query param spec.clusterkey
		var qrSpecClusterkey string

		if o.SpecClusterkey != nil {
			qrSpecClusterkey = *o.SpecClusterkey
		}
		qSpecClusterkey := qrSpecClusterkey
		if qSpecClusterkey != "" {

			if err := r.SetQueryParam("spec.clusterkey", qSpecClusterkey); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterpassword != nil {

		// query param spec.clusterpassword
		var qrSpecClusterpassword string

		if o.SpecClusterpassword != nil {
			qrSpecClusterpassword = *o.SpecClusterpassword
		}
		qSpecClusterpassword := qrSpecClusterpassword
		if qSpecClusterpassword != "" {

			if err := r.SetQueryParam("spec.clusterpassword", qSpecClusterpassword); err != nil {
				return err
			}
		}
	}

	if o.SpecClusterselfsigned != nil {

		// query param spec.clusterselfsigned
		var qrSpecClusterselfsigned bool

		if o.SpecClusterselfsigned != nil {
			qrSpecClusterselfsigned = *o.SpecClusterselfsigned
		}
		qSpecClusterselfsigned := swag.FormatBool(qrSpecClusterselfsigned)
		if qSpecClusterselfsigned != "" {

			if err := r.SetQueryParam("spec.clusterselfsigned", qSpecClusterselfsigned); err != nil {
				return err
			}
		}
	}

	if o.SpecPlacementClusterSelector != nil {

		// query param spec.placement.clusterSelector
		var qrSpecPlacementClusterSelector string

		if o.SpecPlacementClusterSelector != nil {
			qrSpecPlacementClusterSelector = *o.SpecPlacementClusterSelector
		}
		qSpecPlacementClusterSelector := qrSpecPlacementClusterSelector
		if qSpecPlacementClusterSelector != "" {

			if err := r.SetQueryParam("spec.placement.clusterSelector", qSpecPlacementClusterSelector); err != nil {
				return err
			}
		}
	}

	if o.SpecPlacementDriftAction != nil {

		// query param spec.placement.driftAction
		var qrSpecPlacementDriftAction string

		if o.SpecPlacementDriftAction != nil {
			qrSpecPlacementDriftAction = *o.SpecPlacementDriftAction
		}
		qSpecPlacementDriftAction := qrSpecPlacementDriftAction
		if qSpecPlacementDriftAction != "" {

			if err := r.SetQueryParam("spec.placement.driftAction", qSpecPlacementDriftAction); err != nil {
				return err
			}
		}
	}

	if o.SpecPlacementNodeGroupingKeys != nil {

		// binding items for spec.placement.nodeGroupingKeys
		joinedSpecPlacementNodeGroupingKeys := o.bindParamSpecPlacementNodeGroupingKeys(reg)

		// query array param spec.placement.nodeGroupingKeys
		if err := r.SetQueryParam("spec.placement.nodeGroupingKeys", joinedSpecPlacementNodeGroupingKeys...); err != nil {
			return err
		}
	}

	if o.SpecPlacementPlacementType != nil {

		// query param spec.placement.placementType
		var qrSpecPlacementPlacementType string

		if o.SpecPlacementPlacementType != nil {
			qrSpecPlacementPlacementType = *o.SpecPlacementPlacementType
		}
		qSpecPlacementPlacementType := qrSpecPlacementPlacementType
		if qSpecPlacementPlacementType != "" {

			if err := r.SetQueryParam("spec.placement.placementType", qSpecPlacementPlacementType); err != nil {
				return err
			}
		}
	}

	if o.SpecUsercacert != nil {

		// query param spec.usercacert
		var qrSpecUsercacert string

		if o.SpecUsercacert != nil {
			qrSpecUsercacert = *o.SpecUsercacert
		}
		qSpecUsercacert := qrSpecUsercacert
		if qSpecUsercacert != "" {

			if err := r.SetQueryParam("spec.usercacert", qSpecUsercacert); err != nil {
				return err
			}
		}
	}

	if o.SpecUsercert != nil {

		// query param spec.usercert
		var qrSpecUsercert string

		if o.SpecUsercert != nil {
			qrSpecUsercert = *o.SpecUsercert
		}
		qSpecUsercert := qrSpecUsercert
		if qSpecUsercert != "" {

			if err := r.SetQueryParam("spec.usercert", qSpecUsercert); err != nil {
				return err
			}
		}
	}

	if o.SpecUserhost != nil {

		// query param spec.userhost
		var qrSpecUserhost string

		if o.SpecUserhost != nil {
			qrSpecUserhost = *o.SpecUserhost
		}
		qSpecUserhost := qrSpecUserhost
		if qSpecUserhost != "" {

			if err := r.SetQueryParam("spec.userhost", qSpecUserhost); err != nil {
				return err
			}
		}
	}

	if o.SpecUserkey != nil {

		// query param spec.userkey
		var qrSpecUserkey string

		if o.SpecUserkey != nil {
			qrSpecUserkey = *o.SpecUserkey
		}
		qSpecUserkey := qrSpecUserkey
		if qSpecUserkey != "" {

			if err := r.SetQueryParam("spec.userkey", qSpecUserkey); err != nil {
				return err
			}
		}
	}

	if o.SpecUserpassword != nil {

		// query param spec.userpassword
		var qrSpecUserpassword string

		if o.SpecUserpassword != nil {
			qrSpecUserpassword = *o.SpecUserpassword
		}
		qSpecUserpassword := qrSpecUserpassword
		if qSpecUserpassword != "" {

			if err := r.SetQueryParam("spec.userpassword", qSpecUserpassword); err != nil {
				return err
			}
		}
	}

	if o.SpecUserselfsigned != nil {

		// query param spec.userselfsigned
		var qrSpecUserselfsigned bool

		if o.SpecUserselfsigned != nil {
			qrSpecUserselfsigned = *o.SpecUserselfsigned
		}
		qSpecUserselfsigned := swag.FormatBool(qrSpecUserselfsigned)
		if qSpecUserselfsigned != "" {

			if err := r.SetQueryParam("spec.userselfsigned", qSpecUserselfsigned); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamBootstrapDownloadRelayNetwork binds the parameter spec.placement.nodeGroupingKeys
func (o *BootstrapDownloadRelayNetworkParams) bindParamSpecPlacementNodeGroupingKeys(formats strfmt.Registry) []string {
	specPlacementNodeGroupingKeysIR := o.SpecPlacementNodeGroupingKeys

	var specPlacementNodeGroupingKeysIC []string
	for _, specPlacementNodeGroupingKeysIIR := range specPlacementNodeGroupingKeysIR { // explode []string

		specPlacementNodeGroupingKeysIIV := specPlacementNodeGroupingKeysIIR // string as string
		specPlacementNodeGroupingKeysIC = append(specPlacementNodeGroupingKeysIC, specPlacementNodeGroupingKeysIIV)
	}

	// items.CollectionFormat: "multi"
	specPlacementNodeGroupingKeysIS := swag.JoinByFormat(specPlacementNodeGroupingKeysIC, "multi")

	return specPlacementNodeGroupingKeysIS
}
