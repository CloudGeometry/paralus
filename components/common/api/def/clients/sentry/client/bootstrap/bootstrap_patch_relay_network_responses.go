// Code generated by go-swagger; DO NOT EDIT.

package bootstrap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/RafaySystems/rcloud-base/components/common/api/def/clients/sentry/models"
)

// BootstrapPatchRelayNetworkReader is a Reader for the BootstrapPatchRelayNetwork structure.
type BootstrapPatchRelayNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BootstrapPatchRelayNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBootstrapPatchRelayNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewBootstrapPatchRelayNetworkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBootstrapPatchRelayNetworkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBootstrapPatchRelayNetworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewBootstrapPatchRelayNetworkDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBootstrapPatchRelayNetworkOK creates a BootstrapPatchRelayNetworkOK with default headers values
func NewBootstrapPatchRelayNetworkOK() *BootstrapPatchRelayNetworkOK {
	return &BootstrapPatchRelayNetworkOK{}
}

/* BootstrapPatchRelayNetworkOK describes a response with status code 200, with default header values.

A successful response.
*/
type BootstrapPatchRelayNetworkOK struct {
	Payload *models.SentryRelayNetwork
}

func (o *BootstrapPatchRelayNetworkOK) Error() string {
	return fmt.Sprintf("[PUT /v2/sentry/relaynetwork/{metadata.name}][%d] bootstrapPatchRelayNetworkOK  %+v", 200, o.Payload)
}
func (o *BootstrapPatchRelayNetworkOK) GetPayload() *models.SentryRelayNetwork {
	return o.Payload
}

func (o *BootstrapPatchRelayNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SentryRelayNetwork)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBootstrapPatchRelayNetworkForbidden creates a BootstrapPatchRelayNetworkForbidden with default headers values
func NewBootstrapPatchRelayNetworkForbidden() *BootstrapPatchRelayNetworkForbidden {
	return &BootstrapPatchRelayNetworkForbidden{}
}

/* BootstrapPatchRelayNetworkForbidden describes a response with status code 403, with default header values.

Returned when the user does not have permission to access the resource.
*/
type BootstrapPatchRelayNetworkForbidden struct {
	Payload interface{}
}

func (o *BootstrapPatchRelayNetworkForbidden) Error() string {
	return fmt.Sprintf("[PUT /v2/sentry/relaynetwork/{metadata.name}][%d] bootstrapPatchRelayNetworkForbidden  %+v", 403, o.Payload)
}
func (o *BootstrapPatchRelayNetworkForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *BootstrapPatchRelayNetworkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBootstrapPatchRelayNetworkNotFound creates a BootstrapPatchRelayNetworkNotFound with default headers values
func NewBootstrapPatchRelayNetworkNotFound() *BootstrapPatchRelayNetworkNotFound {
	return &BootstrapPatchRelayNetworkNotFound{}
}

/* BootstrapPatchRelayNetworkNotFound describes a response with status code 404, with default header values.

Returned when the resource does not exist.
*/
type BootstrapPatchRelayNetworkNotFound struct {
	Payload interface{}
}

func (o *BootstrapPatchRelayNetworkNotFound) Error() string {
	return fmt.Sprintf("[PUT /v2/sentry/relaynetwork/{metadata.name}][%d] bootstrapPatchRelayNetworkNotFound  %+v", 404, o.Payload)
}
func (o *BootstrapPatchRelayNetworkNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *BootstrapPatchRelayNetworkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBootstrapPatchRelayNetworkInternalServerError creates a BootstrapPatchRelayNetworkInternalServerError with default headers values
func NewBootstrapPatchRelayNetworkInternalServerError() *BootstrapPatchRelayNetworkInternalServerError {
	return &BootstrapPatchRelayNetworkInternalServerError{}
}

/* BootstrapPatchRelayNetworkInternalServerError describes a response with status code 500, with default header values.

Returned for internal server error
*/
type BootstrapPatchRelayNetworkInternalServerError struct {
	Payload interface{}
}

func (o *BootstrapPatchRelayNetworkInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v2/sentry/relaynetwork/{metadata.name}][%d] bootstrapPatchRelayNetworkInternalServerError  %+v", 500, o.Payload)
}
func (o *BootstrapPatchRelayNetworkInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *BootstrapPatchRelayNetworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBootstrapPatchRelayNetworkDefault creates a BootstrapPatchRelayNetworkDefault with default headers values
func NewBootstrapPatchRelayNetworkDefault(code int) *BootstrapPatchRelayNetworkDefault {
	return &BootstrapPatchRelayNetworkDefault{
		_statusCode: code,
	}
}

/* BootstrapPatchRelayNetworkDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type BootstrapPatchRelayNetworkDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// Code gets the status code for the bootstrap patch relay network default response
func (o *BootstrapPatchRelayNetworkDefault) Code() int {
	return o._statusCode
}

func (o *BootstrapPatchRelayNetworkDefault) Error() string {
	return fmt.Sprintf("[PUT /v2/sentry/relaynetwork/{metadata.name}][%d] Bootstrap_PatchRelayNetwork default  %+v", o._statusCode, o.Payload)
}
func (o *BootstrapPatchRelayNetworkDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *BootstrapPatchRelayNetworkDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
