// Code generated by go-swagger; DO NOT EDIT.

package bootstrap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/RafaySystems/rcloud-base/components/common/api/def/clients/sentry/models"
)

// NewBootstrapPatchRelayNetworkParams creates a new BootstrapPatchRelayNetworkParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewBootstrapPatchRelayNetworkParams() *BootstrapPatchRelayNetworkParams {
	return &BootstrapPatchRelayNetworkParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewBootstrapPatchRelayNetworkParamsWithTimeout creates a new BootstrapPatchRelayNetworkParams object
// with the ability to set a timeout on a request.
func NewBootstrapPatchRelayNetworkParamsWithTimeout(timeout time.Duration) *BootstrapPatchRelayNetworkParams {
	return &BootstrapPatchRelayNetworkParams{
		timeout: timeout,
	}
}

// NewBootstrapPatchRelayNetworkParamsWithContext creates a new BootstrapPatchRelayNetworkParams object
// with the ability to set a context for a request.
func NewBootstrapPatchRelayNetworkParamsWithContext(ctx context.Context) *BootstrapPatchRelayNetworkParams {
	return &BootstrapPatchRelayNetworkParams{
		Context: ctx,
	}
}

// NewBootstrapPatchRelayNetworkParamsWithHTTPClient creates a new BootstrapPatchRelayNetworkParams object
// with the ability to set a custom HTTPClient for a request.
func NewBootstrapPatchRelayNetworkParamsWithHTTPClient(client *http.Client) *BootstrapPatchRelayNetworkParams {
	return &BootstrapPatchRelayNetworkParams{
		HTTPClient: client,
	}
}

/* BootstrapPatchRelayNetworkParams contains all the parameters to send to the API endpoint
   for the bootstrap patch relay network operation.

   Typically these are written to a http.Request.
*/
type BootstrapPatchRelayNetworkParams struct {

	// Body.
	Body *models.SentryRelayNetwork

	/* MetadataName.

	   name of the resource
	*/
	MetadataName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the bootstrap patch relay network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BootstrapPatchRelayNetworkParams) WithDefaults() *BootstrapPatchRelayNetworkParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the bootstrap patch relay network params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BootstrapPatchRelayNetworkParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) WithTimeout(timeout time.Duration) *BootstrapPatchRelayNetworkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) WithContext(ctx context.Context) *BootstrapPatchRelayNetworkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) WithHTTPClient(client *http.Client) *BootstrapPatchRelayNetworkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) WithBody(body *models.SentryRelayNetwork) *BootstrapPatchRelayNetworkParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) SetBody(body *models.SentryRelayNetwork) {
	o.Body = body
}

// WithMetadataName adds the metadataName to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) WithMetadataName(metadataName string) *BootstrapPatchRelayNetworkParams {
	o.SetMetadataName(metadataName)
	return o
}

// SetMetadataName adds the metadataName to the bootstrap patch relay network params
func (o *BootstrapPatchRelayNetworkParams) SetMetadataName(metadataName string) {
	o.MetadataName = metadataName
}

// WriteToRequest writes these params to a swagger request
func (o *BootstrapPatchRelayNetworkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param metadata.name
	if err := r.SetPathParam("metadata.name", o.MetadataName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
