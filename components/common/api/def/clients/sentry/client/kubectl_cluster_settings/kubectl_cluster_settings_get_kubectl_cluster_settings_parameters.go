// Code generated by go-swagger; DO NOT EDIT.

package kubectl_cluster_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewKubectlClusterSettingsGetKubectlClusterSettingsParams creates a new KubectlClusterSettingsGetKubectlClusterSettingsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewKubectlClusterSettingsGetKubectlClusterSettingsParams() *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	return &KubectlClusterSettingsGetKubectlClusterSettingsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewKubectlClusterSettingsGetKubectlClusterSettingsParamsWithTimeout creates a new KubectlClusterSettingsGetKubectlClusterSettingsParams object
// with the ability to set a timeout on a request.
func NewKubectlClusterSettingsGetKubectlClusterSettingsParamsWithTimeout(timeout time.Duration) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	return &KubectlClusterSettingsGetKubectlClusterSettingsParams{
		timeout: timeout,
	}
}

// NewKubectlClusterSettingsGetKubectlClusterSettingsParamsWithContext creates a new KubectlClusterSettingsGetKubectlClusterSettingsParams object
// with the ability to set a context for a request.
func NewKubectlClusterSettingsGetKubectlClusterSettingsParamsWithContext(ctx context.Context) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	return &KubectlClusterSettingsGetKubectlClusterSettingsParams{
		Context: ctx,
	}
}

// NewKubectlClusterSettingsGetKubectlClusterSettingsParamsWithHTTPClient creates a new KubectlClusterSettingsGetKubectlClusterSettingsParams object
// with the ability to set a custom HTTPClient for a request.
func NewKubectlClusterSettingsGetKubectlClusterSettingsParamsWithHTTPClient(client *http.Client) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	return &KubectlClusterSettingsGetKubectlClusterSettingsParams{
		HTTPClient: client,
	}
}

/* KubectlClusterSettingsGetKubectlClusterSettingsParams contains all the parameters to send to the API endpoint
   for the kubectl cluster settings get kubectl cluster settings operation.

   Typically these are written to a http.Request.
*/
type KubectlClusterSettingsGetKubectlClusterSettingsParams struct {

	// OptsID.
	OptsID *string

	// OptsBlueprintRef.
	OptsBlueprintRef *string

	// OptsClusterID.
	OptsClusterID *string

	// OptsCount.
	//
	// Format: int64
	OptsCount *string

	// OptsDeleted.
	OptsDeleted *bool

	/* OptsDisplayName.

	   displayName only used for update queries to set displayName (READONLY).
	*/
	OptsDisplayName *string

	// OptsExtended.
	OptsExtended *bool

	/* OptsGlobalScope.

	   globalScope sets partnerID,organizationID,projectID = 0.
	*/
	OptsGlobalScope *bool

	// OptsGroups.
	OptsGroups []string

	/* OptsIgnoreScopeDefault.

	     ignoreScopeDefault ignores default values for partnerID, organizationID and
	projectID.
	*/
	OptsIgnoreScopeDefault *bool

	// OptsIsSSOUser.
	OptsIsSSOUser *bool

	// OptsLimit.
	//
	// Format: int64
	OptsLimit *string

	/* OptsName.

	     name is unique ID of a resource along with (partnerID, organizationID,
	projectID).
	*/
	OptsName *string

	// OptsOffset.
	//
	// Format: int64
	OptsOffset *string

	// OptsOrder.
	OptsOrder *string

	// OptsOrderBy.
	OptsOrderBy *string

	// OptsOrganizationID.
	OptsOrganizationID *string

	// OptsPartnerID.
	OptsPartnerID *string

	// OptsProjectID.
	OptsProjectID *string

	// OptsPublishedVersion.
	OptsPublishedVersion *string

	/* OptsSelector.

	   selector is used to filter the labels of a resource.
	*/
	OptsSelector *string

	/* OptsURLScope.

	   urlScope is supposed to be passed in the URL as kind/HashID(value)
	*/
	OptsURLScope string

	// OptsUsername.
	OptsUsername *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the kubectl cluster settings get kubectl cluster settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithDefaults() *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the kubectl cluster settings get kubectl cluster settings params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithTimeout(timeout time.Duration) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithContext(ctx context.Context) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithHTTPClient(client *http.Client) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOptsID adds the optsID to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsID(optsID *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsID(optsID)
	return o
}

// SetOptsID adds the optsId to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsID(optsID *string) {
	o.OptsID = optsID
}

// WithOptsBlueprintRef adds the optsBlueprintRef to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsBlueprintRef(optsBlueprintRef *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsBlueprintRef(optsBlueprintRef)
	return o
}

// SetOptsBlueprintRef adds the optsBlueprintRef to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsBlueprintRef(optsBlueprintRef *string) {
	o.OptsBlueprintRef = optsBlueprintRef
}

// WithOptsClusterID adds the optsClusterID to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsClusterID(optsClusterID *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsClusterID(optsClusterID)
	return o
}

// SetOptsClusterID adds the optsClusterId to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsClusterID(optsClusterID *string) {
	o.OptsClusterID = optsClusterID
}

// WithOptsCount adds the optsCount to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsCount(optsCount *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsCount(optsCount)
	return o
}

// SetOptsCount adds the optsCount to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsCount(optsCount *string) {
	o.OptsCount = optsCount
}

// WithOptsDeleted adds the optsDeleted to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsDeleted(optsDeleted *bool) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsDeleted(optsDeleted)
	return o
}

// SetOptsDeleted adds the optsDeleted to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsDeleted(optsDeleted *bool) {
	o.OptsDeleted = optsDeleted
}

// WithOptsDisplayName adds the optsDisplayName to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsDisplayName(optsDisplayName *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsDisplayName(optsDisplayName)
	return o
}

// SetOptsDisplayName adds the optsDisplayName to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsDisplayName(optsDisplayName *string) {
	o.OptsDisplayName = optsDisplayName
}

// WithOptsExtended adds the optsExtended to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsExtended(optsExtended *bool) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsExtended(optsExtended)
	return o
}

// SetOptsExtended adds the optsExtended to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsExtended(optsExtended *bool) {
	o.OptsExtended = optsExtended
}

// WithOptsGlobalScope adds the optsGlobalScope to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsGlobalScope(optsGlobalScope *bool) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsGlobalScope(optsGlobalScope)
	return o
}

// SetOptsGlobalScope adds the optsGlobalScope to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsGlobalScope(optsGlobalScope *bool) {
	o.OptsGlobalScope = optsGlobalScope
}

// WithOptsGroups adds the optsGroups to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsGroups(optsGroups []string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsGroups(optsGroups)
	return o
}

// SetOptsGroups adds the optsGroups to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsGroups(optsGroups []string) {
	o.OptsGroups = optsGroups
}

// WithOptsIgnoreScopeDefault adds the optsIgnoreScopeDefault to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsIgnoreScopeDefault(optsIgnoreScopeDefault *bool) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsIgnoreScopeDefault(optsIgnoreScopeDefault)
	return o
}

// SetOptsIgnoreScopeDefault adds the optsIgnoreScopeDefault to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsIgnoreScopeDefault(optsIgnoreScopeDefault *bool) {
	o.OptsIgnoreScopeDefault = optsIgnoreScopeDefault
}

// WithOptsIsSSOUser adds the optsIsSSOUser to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsIsSSOUser(optsIsSSOUser *bool) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsIsSSOUser(optsIsSSOUser)
	return o
}

// SetOptsIsSSOUser adds the optsIsSSOUser to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsIsSSOUser(optsIsSSOUser *bool) {
	o.OptsIsSSOUser = optsIsSSOUser
}

// WithOptsLimit adds the optsLimit to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsLimit(optsLimit *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsLimit(optsLimit)
	return o
}

// SetOptsLimit adds the optsLimit to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsLimit(optsLimit *string) {
	o.OptsLimit = optsLimit
}

// WithOptsName adds the optsName to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsName(optsName *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsName(optsName)
	return o
}

// SetOptsName adds the optsName to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsName(optsName *string) {
	o.OptsName = optsName
}

// WithOptsOffset adds the optsOffset to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsOffset(optsOffset *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsOffset(optsOffset)
	return o
}

// SetOptsOffset adds the optsOffset to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsOffset(optsOffset *string) {
	o.OptsOffset = optsOffset
}

// WithOptsOrder adds the optsOrder to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsOrder(optsOrder *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsOrder(optsOrder)
	return o
}

// SetOptsOrder adds the optsOrder to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsOrder(optsOrder *string) {
	o.OptsOrder = optsOrder
}

// WithOptsOrderBy adds the optsOrderBy to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsOrderBy(optsOrderBy *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsOrderBy(optsOrderBy)
	return o
}

// SetOptsOrderBy adds the optsOrderBy to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsOrderBy(optsOrderBy *string) {
	o.OptsOrderBy = optsOrderBy
}

// WithOptsOrganizationID adds the optsOrganizationID to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsOrganizationID(optsOrganizationID *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsOrganizationID(optsOrganizationID)
	return o
}

// SetOptsOrganizationID adds the optsOrganizationId to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsOrganizationID(optsOrganizationID *string) {
	o.OptsOrganizationID = optsOrganizationID
}

// WithOptsPartnerID adds the optsPartnerID to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsPartnerID(optsPartnerID *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsPartnerID(optsPartnerID)
	return o
}

// SetOptsPartnerID adds the optsPartnerId to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsPartnerID(optsPartnerID *string) {
	o.OptsPartnerID = optsPartnerID
}

// WithOptsProjectID adds the optsProjectID to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsProjectID(optsProjectID *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsProjectID(optsProjectID)
	return o
}

// SetOptsProjectID adds the optsProjectId to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsProjectID(optsProjectID *string) {
	o.OptsProjectID = optsProjectID
}

// WithOptsPublishedVersion adds the optsPublishedVersion to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsPublishedVersion(optsPublishedVersion *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsPublishedVersion(optsPublishedVersion)
	return o
}

// SetOptsPublishedVersion adds the optsPublishedVersion to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsPublishedVersion(optsPublishedVersion *string) {
	o.OptsPublishedVersion = optsPublishedVersion
}

// WithOptsSelector adds the optsSelector to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsSelector(optsSelector *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsSelector(optsSelector)
	return o
}

// SetOptsSelector adds the optsSelector to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsSelector(optsSelector *string) {
	o.OptsSelector = optsSelector
}

// WithOptsURLScope adds the optsURLScope to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsURLScope(optsURLScope string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsURLScope(optsURLScope)
	return o
}

// SetOptsURLScope adds the optsUrlScope to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsURLScope(optsURLScope string) {
	o.OptsURLScope = optsURLScope
}

// WithOptsUsername adds the optsUsername to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WithOptsUsername(optsUsername *string) *KubectlClusterSettingsGetKubectlClusterSettingsParams {
	o.SetOptsUsername(optsUsername)
	return o
}

// SetOptsUsername adds the optsUsername to the kubectl cluster settings get kubectl cluster settings params
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) SetOptsUsername(optsUsername *string) {
	o.OptsUsername = optsUsername
}

// WriteToRequest writes these params to a swagger request
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OptsID != nil {

		// query param opts.ID
		var qrOptsID string

		if o.OptsID != nil {
			qrOptsID = *o.OptsID
		}
		qOptsID := qrOptsID
		if qOptsID != "" {

			if err := r.SetQueryParam("opts.ID", qOptsID); err != nil {
				return err
			}
		}
	}

	if o.OptsBlueprintRef != nil {

		// query param opts.blueprintRef
		var qrOptsBlueprintRef string

		if o.OptsBlueprintRef != nil {
			qrOptsBlueprintRef = *o.OptsBlueprintRef
		}
		qOptsBlueprintRef := qrOptsBlueprintRef
		if qOptsBlueprintRef != "" {

			if err := r.SetQueryParam("opts.blueprintRef", qOptsBlueprintRef); err != nil {
				return err
			}
		}
	}

	if o.OptsClusterID != nil {

		// query param opts.clusterID
		var qrOptsClusterID string

		if o.OptsClusterID != nil {
			qrOptsClusterID = *o.OptsClusterID
		}
		qOptsClusterID := qrOptsClusterID
		if qOptsClusterID != "" {

			if err := r.SetQueryParam("opts.clusterID", qOptsClusterID); err != nil {
				return err
			}
		}
	}

	if o.OptsCount != nil {

		// query param opts.count
		var qrOptsCount string

		if o.OptsCount != nil {
			qrOptsCount = *o.OptsCount
		}
		qOptsCount := qrOptsCount
		if qOptsCount != "" {

			if err := r.SetQueryParam("opts.count", qOptsCount); err != nil {
				return err
			}
		}
	}

	if o.OptsDeleted != nil {

		// query param opts.deleted
		var qrOptsDeleted bool

		if o.OptsDeleted != nil {
			qrOptsDeleted = *o.OptsDeleted
		}
		qOptsDeleted := swag.FormatBool(qrOptsDeleted)
		if qOptsDeleted != "" {

			if err := r.SetQueryParam("opts.deleted", qOptsDeleted); err != nil {
				return err
			}
		}
	}

	if o.OptsDisplayName != nil {

		// query param opts.displayName
		var qrOptsDisplayName string

		if o.OptsDisplayName != nil {
			qrOptsDisplayName = *o.OptsDisplayName
		}
		qOptsDisplayName := qrOptsDisplayName
		if qOptsDisplayName != "" {

			if err := r.SetQueryParam("opts.displayName", qOptsDisplayName); err != nil {
				return err
			}
		}
	}

	if o.OptsExtended != nil {

		// query param opts.extended
		var qrOptsExtended bool

		if o.OptsExtended != nil {
			qrOptsExtended = *o.OptsExtended
		}
		qOptsExtended := swag.FormatBool(qrOptsExtended)
		if qOptsExtended != "" {

			if err := r.SetQueryParam("opts.extended", qOptsExtended); err != nil {
				return err
			}
		}
	}

	if o.OptsGlobalScope != nil {

		// query param opts.globalScope
		var qrOptsGlobalScope bool

		if o.OptsGlobalScope != nil {
			qrOptsGlobalScope = *o.OptsGlobalScope
		}
		qOptsGlobalScope := swag.FormatBool(qrOptsGlobalScope)
		if qOptsGlobalScope != "" {

			if err := r.SetQueryParam("opts.globalScope", qOptsGlobalScope); err != nil {
				return err
			}
		}
	}

	if o.OptsGroups != nil {

		// binding items for opts.groups
		joinedOptsGroups := o.bindParamOptsGroups(reg)

		// query array param opts.groups
		if err := r.SetQueryParam("opts.groups", joinedOptsGroups...); err != nil {
			return err
		}
	}

	if o.OptsIgnoreScopeDefault != nil {

		// query param opts.ignoreScopeDefault
		var qrOptsIgnoreScopeDefault bool

		if o.OptsIgnoreScopeDefault != nil {
			qrOptsIgnoreScopeDefault = *o.OptsIgnoreScopeDefault
		}
		qOptsIgnoreScopeDefault := swag.FormatBool(qrOptsIgnoreScopeDefault)
		if qOptsIgnoreScopeDefault != "" {

			if err := r.SetQueryParam("opts.ignoreScopeDefault", qOptsIgnoreScopeDefault); err != nil {
				return err
			}
		}
	}

	if o.OptsIsSSOUser != nil {

		// query param opts.isSSOUser
		var qrOptsIsSSOUser bool

		if o.OptsIsSSOUser != nil {
			qrOptsIsSSOUser = *o.OptsIsSSOUser
		}
		qOptsIsSSOUser := swag.FormatBool(qrOptsIsSSOUser)
		if qOptsIsSSOUser != "" {

			if err := r.SetQueryParam("opts.isSSOUser", qOptsIsSSOUser); err != nil {
				return err
			}
		}
	}

	if o.OptsLimit != nil {

		// query param opts.limit
		var qrOptsLimit string

		if o.OptsLimit != nil {
			qrOptsLimit = *o.OptsLimit
		}
		qOptsLimit := qrOptsLimit
		if qOptsLimit != "" {

			if err := r.SetQueryParam("opts.limit", qOptsLimit); err != nil {
				return err
			}
		}
	}

	if o.OptsName != nil {

		// query param opts.name
		var qrOptsName string

		if o.OptsName != nil {
			qrOptsName = *o.OptsName
		}
		qOptsName := qrOptsName
		if qOptsName != "" {

			if err := r.SetQueryParam("opts.name", qOptsName); err != nil {
				return err
			}
		}
	}

	if o.OptsOffset != nil {

		// query param opts.offset
		var qrOptsOffset string

		if o.OptsOffset != nil {
			qrOptsOffset = *o.OptsOffset
		}
		qOptsOffset := qrOptsOffset
		if qOptsOffset != "" {

			if err := r.SetQueryParam("opts.offset", qOptsOffset); err != nil {
				return err
			}
		}
	}

	if o.OptsOrder != nil {

		// query param opts.order
		var qrOptsOrder string

		if o.OptsOrder != nil {
			qrOptsOrder = *o.OptsOrder
		}
		qOptsOrder := qrOptsOrder
		if qOptsOrder != "" {

			if err := r.SetQueryParam("opts.order", qOptsOrder); err != nil {
				return err
			}
		}
	}

	if o.OptsOrderBy != nil {

		// query param opts.orderBy
		var qrOptsOrderBy string

		if o.OptsOrderBy != nil {
			qrOptsOrderBy = *o.OptsOrderBy
		}
		qOptsOrderBy := qrOptsOrderBy
		if qOptsOrderBy != "" {

			if err := r.SetQueryParam("opts.orderBy", qOptsOrderBy); err != nil {
				return err
			}
		}
	}

	if o.OptsOrganizationID != nil {

		// query param opts.organizationID
		var qrOptsOrganizationID string

		if o.OptsOrganizationID != nil {
			qrOptsOrganizationID = *o.OptsOrganizationID
		}
		qOptsOrganizationID := qrOptsOrganizationID
		if qOptsOrganizationID != "" {

			if err := r.SetQueryParam("opts.organizationID", qOptsOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.OptsPartnerID != nil {

		// query param opts.partnerID
		var qrOptsPartnerID string

		if o.OptsPartnerID != nil {
			qrOptsPartnerID = *o.OptsPartnerID
		}
		qOptsPartnerID := qrOptsPartnerID
		if qOptsPartnerID != "" {

			if err := r.SetQueryParam("opts.partnerID", qOptsPartnerID); err != nil {
				return err
			}
		}
	}

	if o.OptsProjectID != nil {

		// query param opts.projectID
		var qrOptsProjectID string

		if o.OptsProjectID != nil {
			qrOptsProjectID = *o.OptsProjectID
		}
		qOptsProjectID := qrOptsProjectID
		if qOptsProjectID != "" {

			if err := r.SetQueryParam("opts.projectID", qOptsProjectID); err != nil {
				return err
			}
		}
	}

	if o.OptsPublishedVersion != nil {

		// query param opts.publishedVersion
		var qrOptsPublishedVersion string

		if o.OptsPublishedVersion != nil {
			qrOptsPublishedVersion = *o.OptsPublishedVersion
		}
		qOptsPublishedVersion := qrOptsPublishedVersion
		if qOptsPublishedVersion != "" {

			if err := r.SetQueryParam("opts.publishedVersion", qOptsPublishedVersion); err != nil {
				return err
			}
		}
	}

	if o.OptsSelector != nil {

		// query param opts.selector
		var qrOptsSelector string

		if o.OptsSelector != nil {
			qrOptsSelector = *o.OptsSelector
		}
		qOptsSelector := qrOptsSelector
		if qOptsSelector != "" {

			if err := r.SetQueryParam("opts.selector", qOptsSelector); err != nil {
				return err
			}
		}
	}

	// path param opts.urlScope
	if err := r.SetPathParam("opts.urlScope", o.OptsURLScope); err != nil {
		return err
	}

	if o.OptsUsername != nil {

		// query param opts.username
		var qrOptsUsername string

		if o.OptsUsername != nil {
			qrOptsUsername = *o.OptsUsername
		}
		qOptsUsername := qrOptsUsername
		if qOptsUsername != "" {

			if err := r.SetQueryParam("opts.username", qOptsUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamKubectlClusterSettingsGetKubectlClusterSettings binds the parameter opts.groups
func (o *KubectlClusterSettingsGetKubectlClusterSettingsParams) bindParamOptsGroups(formats strfmt.Registry) []string {
	optsGroupsIR := o.OptsGroups

	var optsGroupsIC []string
	for _, optsGroupsIIR := range optsGroupsIR { // explode []string

		optsGroupsIIV := optsGroupsIIR // string as string
		optsGroupsIC = append(optsGroupsIC, optsGroupsIIV)
	}

	// items.CollectionFormat: "multi"
	optsGroupsIS := swag.JoinByFormat(optsGroupsIC, "multi")

	return optsGroupsIS
}
