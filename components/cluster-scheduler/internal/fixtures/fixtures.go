// Code generated by vfsgen; DO NOT EDIT.

package fixtures

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Fixtures statically implements the virtual filesystem provided to vfsgen.
var Fixtures = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 1, 19, 10, 7, 49, 970979989, time.UTC),
		},
		"/download.yaml": &vfsgen۰CompressedFileInfo{
			name:             "download.yaml",
			modTime:          time.Date(2022, 2, 10, 11, 10, 33, 69528254, time.UTC),
			uncompressedSize: 12626,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x1a\x5d\x6f\x1b\x37\xf2\x7d\x7f\x05\xa1\x97\xb4\x87\xae\x1c\x37\x97\xa2\x58\xa0\x0f\x8a\xa4\xc4\x42\x6d\x59\x90\xe4\xb4\x87\xa2\x30\x28\x72\xb4\xe2\x99\x4b\x6e\x49\xae\xac\x3d\x23\xff\xfd\x40\xee\xf7\x6a\xa5\xd8\x69\xac\x4b\x0e\xd1\x83\xbd\x4b\x0e\xe7\x7b\x86\x33\x5c\xfa\xbe\xef\xe1\x98\xbd\x07\xa5\x99\x14\x01\xda\x9e\x7b\x77\x4c\xd0\x00\x4d\x71\x04\x3a\xc6\x04\xbc\x08\x0c\xa6\xd8\xe0\xc0\x43\x88\xe3\x15\x70\x6d\x9f\x10\x22\x52\x18\x25\xb9\x1f\x73\x2c\x20\x28\x5e\x39\x28\x3f\xc2\x02\x87\xa0\x3c\x84\x04\x8e\x20\x40\x0a\xaf\x71\xea\xeb\x54\x1b\x88\xbc\x83\x14\x17\xa0\xb6\x8c\xc0\x80\x10\x99\x08\xd3\x20\x9b\xa1\xc9\x10\xf8\x1a\xe7\x23\x8e\xbd\x0e\xec\x0f\x0f\x3e\x62\x6b\x84\x05\x45\xfd\x21\x4f\xb4\x01\xd5\xbf\xca\xb1\xf5\x2f\x9d\x04\xe8\x3b\xf8\x0b\x7d\xc7\x04\x85\xdd\x61\x98\x9e\xc3\xdc\xa7\xb0\x3d\xbb\x4b\x56\xa0\x04\x18\xd0\x33\x25\xb7\x8c\x82\xea\x7d\x8f\x7a\xd7\xb3\xf1\x74\x71\x31\x79\xbb\xec\x7d\x8f\x3e\x7c\x68\x48\xa5\x81\x24\x8a\x99\xb4\x2f\x63\x10\x7a\xc3\xd6\xa6\xcf\xe4\x59\x4d\xd6\x6c\x7a\x28\x85\x81\x9d\x19\x4a\xa1\x8d\xc2\x4c\x18\xdd\x21\x77\x26\x60\xac\xd8\x96\x71\x08\x81\xfa\x9a\x10\x0f\x21\x2c\x84\x34\xd8\x30\x29\x72\x83\x30\x41\x78\x42\xa1\xaf\x80\x03\xd6\xd0\x24\xcd\x56\x91\x4f\xb8\x4c\x68\x6e\x1d\x1a\xa0\x9e\x51\x09\xf4\x3e\xbe\x54\x03\x5f\x17\xab\xfc\x0d\x0b\x37\x3e\xde\x62\xc6\xf1\x8a\x71\x66\xd2\x27\xe0\x61\x22\xe4\xe0\x0b\x49\xc1\xa7\xb0\x05\x2e\x63\x50\x8d\xe5\x95\x9a\x2d\x3c\x05\x4d\x14\x8b\x8d\x53\xe8\x8b\x4a\x7e\x84\x39\x97\xf7\x1a\x61\x42\x40\x6b\x64\xa4\x1d\x40\xf5\x79\x41\xd1\x46\x6a\xe3\x70\x22\xb4\x06\x6c\x12\x05\xda\x8d\x9b\x0d\xa0\x9c\x73\xbb\x52\x25\x02\x61\x3b\x93\xa2\x44\x83\xfa\xc1\x3d\x85\x4a\x26\x71\xf6\xb8\xd6\xef\x8a\x17\x8a\xee\x99\xd9\xe4\x38\xed\xdc\x62\x7c\xc9\x44\xb2\x73\x9e\x0f\x3b\xd3\x47\xe8\xb7\xc1\x7c\x3a\x99\xbe\x0b\x90\xd9\x30\x8d\x98\x76\xd4\x22\xa9\x0d\x52\xc0\xf1\x0e\x28\x5a\x0c\x87\x0e\x95\xde\xc8\x84\x53\xb4\x02\x4b\x96\xe6\x48\xa5\xe0\x29\x5a\x4b\x85\x48\xe6\x91\x08\xd3\x88\x09\x66\x5d\xc3\x2a\xa1\x8f\xde\x29\x2c\x8c\x63\x03\x11\x9c\xb8\xb1\x17\x6e\x6d\xa7\xbe\x89\x02\x6c\xc0\xb7\x58\x6b\x5a\xae\x87\xb0\x82\xd8\xbf\x97\xea\x8e\x4b\x6c\xfd\xa1\xcb\xd1\x7a\x9e\xd3\xf6\x85\xd4\x66\xc4\xd4\x7b\xc9\x93\x08\x66\x3c\x09\x99\x08\x90\x45\x59\x4d\x4f\x66\xc3\xf6\xd0\x14\x8c\x45\xdf\x1e\x9e\x4d\x46\x7b\x43\x52\x19\x5d\x1f\x9c\x15\x5c\x8c\x35\xc1\x1c\x67\x4e\xd0\x31\x4d\x6d\x08\x61\x26\xac\x27\x55\xd3\x40\x87\x38\xce\xcc\xcc\x40\x07\x9e\x8f\x5e\xfc\xe3\x45\x31\x75\x23\x34\x5e\xc3\x22\xd5\xc4\xf0\x72\x8e\xc2\x1a\x27\xdc\x0c\x68\x73\x25\x12\x09\xe7\x5e\xee\x05\x56\x69\x26\x8d\x21\x40\xf3\x44\x0c\xf4\x40\xa4\x9e\x73\x15\x87\x24\x4b\x40\x41\x6e\x3a\xdf\x99\x4e\x57\xe3\xd6\xeb\x6b\xaf\x11\xb6\x50\xda\x8b\x15\x93\xca\x45\x91\x23\xa4\x00\xd3\x6b\xc1\xd3\xb9\x94\xe6\x2d\xe3\x90\x43\xa3\x35\xe6\x1a\x3c\x05\x7f\x25\x4c\x01\x1d\x29\x19\x77\x70\xa9\x2c\x53\x37\x1a\x54\x07\x9f\x1a\x9c\xaf\xe6\xf9\xa6\x13\x80\x10\x19\xc5\x33\x25\xd7\x96\x6e\xa1\x16\x9d\xc4\x31\x87\x08\x84\xc1\xfc\x5d\x2e\xeb\xde\x5a\x1b\x39\x75\x1d\xe8\x2c\x93\xe3\x2c\x93\x07\xf5\x04\x1d\xe4\x7a\x7e\x1c\x70\x95\xf1\x1f\x05\xce\x44\xa8\x40\x6b\x5f\x84\x4c\xec\x3e\x61\x89\x33\x9a\xb6\x09\xfc\x71\x8b\x43\x6c\xe0\x0e\x20\x2e\xcc\xfd\xe4\x55\x49\x4c\x6d\x84\x96\x9b\x99\xef\x82\xd3\xdb\xba\x28\x2b\x6d\x50\xec\x69\x20\x68\x7b\x9b\x51\x2b\x4c\xfa\x38\x31\x1b\xa9\xd8\x7f\xb2\x24\x71\xf7\xb3\x6e\x6c\x35\xf9\xee\x36\x97\x1c\x0e\xed\x2d\x41\xb1\x61\xab\x24\x37\x3d\x8e\x59\x65\xed\x8c\x0b\x9b\x2d\xb4\x4c\x14\x81\xc6\xe0\x16\xd4\xaa\x36\xe0\x23\x21\xc5\x3c\x07\xbc\x99\x5f\x1e\x87\x6d\x91\xc9\x63\xa7\x5f\xee\xbb\xfb\x44\x4b\x55\xe9\x26\xbe\x2c\xd7\xb9\x47\x0a\x1c\xf2\xc7\x10\x8c\xfb\xcf\x99\xce\x1e\x62\x6c\xc8\xc6\x3d\x65\xaa\x77\x8f\xf7\x6e\xf0\xef\x71\x73\xa6\x0d\x36\x49\x8b\xa9\x82\xfc\x1e\xd5\x4f\xa1\x65\xb0\xbe\xe3\x60\xbe\x08\xb9\x0b\x5e\x4e\x23\xf5\x17\x23\xf2\x53\xe5\x6d\x55\xba\x4f\x0b\xd6\x37\x4c\x50\x26\xc2\x83\x31\xdb\xc8\x29\x79\x00\xfb\x4a\x72\x58\xe5\x0b\xed\xf3\x1c\xd6\x76\x5d\x21\xee\x11\x1e\x3c\x84\xf6\xf3\x45\x77\x96\xd0\xc9\xea\xdf\x40\x8c\x4b\x14\x9d\xa5\xfb\x93\x0a\xf6\xe3\x28\x8a\xed\xe2\x78\xc5\xff\x0c\x29\x31\x56\x72\x97\x3a\x7d\x1e\xcc\x8a\x96\x08\x08\xc3\x48\x4b\x8f\x6d\xcf\x91\x77\x20\x14\x6c\x19\xdc\x77\x7b\x72\x27\xe2\x0e\xfb\xb4\xf0\xe6\x66\xc8\xaa\xe0\xa3\xf8\x4f\xe7\x87\x95\xd6\x0a\x2f\x3c\x6c\xb8\xcf\xee\x9f\x35\x93\x7d\xd9\x2e\xaa\xc9\x06\x68\xc2\x99\x08\x6b\x8a\x6f\x74\x3b\x4b\xdb\x3f\x14\xb5\x21\x22\x1c\x6b\xdd\x6a\x19\x5c\x9f\xe0\xa8\xa0\xbc\xd8\x40\xb1\xa4\xda\xf5\x10\xfd\xdc\x8a\xb3\x1c\xc1\xd0\xae\x3f\xd8\x58\x16\x15\x2b\x51\xcc\xfa\x32\xf7\xb6\x98\x27\x10\xa0\xf3\x97\xc5\xef\x53\x3c\xe8\x68\x70\x71\xc0\x14\x94\x0f\x1c\x88\x5d\x9c\xd9\xec\x88\xa7\x1c\x08\xc0\x5e\x6f\x3f\x2a\x88\x14\x6b\x16\x46\x38\x3e\x90\xa5\xcb\xfd\xe1\xbe\x4c\xd7\xb5\x0d\xa5\xb6\x55\x54\xe9\x3c\xdf\x65\x9e\x48\xfe\xe8\x5e\xb1\x47\xe7\x51\xc8\x61\x0b\xc2\x7c\xb6\x18\x7f\x4c\x70\x77\x19\xea\xd9\x22\xbb\x23\xa4\x3b\x1d\xe5\xcb\x0e\x6e\x1c\x33\xd8\x19\x10\xf6\x4d\xef\x27\xd6\x44\x1b\x19\x15\x05\xf2\x08\xd6\x4c\x30\x2b\x59\x87\x05\xaa\xe2\xb2\xbf\x5f\x9f\xe8\x18\x88\x05\x25\x52\x6c\x73\xca\xae\xa3\x77\x67\x05\x10\xa6\x01\x9a\x4a\x61\xb5\x19\x66\xda\xef\xaa\x70\x1c\x81\x6c\x59\xfb\xcc\xcf\x8e\xd9\x48\xf9\xb5\x39\x7e\xc9\xf2\x43\x95\x98\x27\x0a\xf3\xa0\x59\x8e\x23\x9b\xa2\x94\x99\x56\x68\x7d\xa4\x44\x3e\xc3\x44\x98\x70\xac\x6a\x4b\x3c\x84\x34\x91\xb6\x91\x2c\xf1\xd3\xcc\xb7\x75\x71\xa6\xe5\xe7\xaa\xd8\xfe\x98\x21\x01\xb5\x05\x9a\xf7\xf9\x99\xb4\x52\xe1\x10\xea\x23\x64\x03\x11\x0e\x8a\x03\x95\x18\xc4\x60\x36\x79\xff\x6a\xd1\x18\x46\x28\x56\x32\x06\x95\x9d\x0d\xa0\xf2\x57\x33\x63\x6d\xb4\x68\x77\xb5\x51\x99\xdb\x17\x3f\xa7\xb4\xc7\x00\xd6\x6d\xdb\x06\x96\xce\x97\x6b\x13\x85\x65\x3f\x0a\x88\xd0\xce\xaf\x0e\xcc\xfc\x58\x81\xd3\x8f\x9f\x88\x3b\x21\xef\x85\xbf\x66\xc0\xa9\xae\xe9\x26\xc7\xef\xd2\xd2\xf3\x51\xd8\xc3\xa5\x93\x55\x23\x8f\xd5\x98\x40\x0f\x1f\xbc\x8a\x1f\x5b\xc9\xc4\x06\xe8\xb4\xed\x97\xbd\x5e\xc3\xe9\xdc\x2b\x91\x82\xb2\xec\xf0\x13\xfd\xf1\xa7\x97\xf9\x02\xd0\xf7\x85\xf7\xd8\xc1\x67\x0b\xcd\xa2\xff\x39\x55\x60\x2e\x33\x7a\xad\xb0\xcc\x47\xf7\x82\xb2\xd6\x29\x76\x86\xa4\xe1\xad\x90\x34\x25\xfa\x6f\x01\xf9\x2d\x20\xbf\xd6\x80\x3c\x69\x34\x76\x84\x62\x67\x1c\x1e\x0e\xc2\x8e\x18\xfc\x16\x80\xdf\x02\xf0\xb4\x01\x58\xc5\x9a\xeb\x5b\xae\x70\xdc\x11\x5c\x59\x5f\x9d\x75\x36\x47\x0a\xe1\xe6\xa7\x25\x1c\xc7\xfd\xe6\xe7\xbc\xe2\x0b\xe2\x2a\x0d\xd0\x05\xf0\xa8\xeb\x13\xa6\x25\xde\xdf\x00\x8f\xfa\x7a\x73\x96\x7f\xd4\xf2\x0b\x8f\xf7\x99\x58\x2b\x7c\x1c\xae\x8b\xb1\x42\x9a\x8d\x31\xf1\xcc\xca\x12\xa0\xde\xc3\x03\x5b\x57\x5f\x7e\x17\x31\x90\xbe\x9b\xca\xf4\xf0\xe1\xc3\xc3\x03\x3a\x06\xd0\x1f\x0b\xbc\xe2\x40\x91\x85\xf4\x8f\xc0\x5d\x14\x34\x91\x6f\x41\x41\xd0\xf2\x5f\x2f\x67\x49\xff\x2f\x78\xd2\x47\x98\x12\xf2\xd4\x1c\x4d\xe5\x11\x76\x9c\xfb\x0d\x12\xb3\x39\x21\x43\xb3\x82\x66\x37\x4b\x2b\x29\x8d\xdd\x42\xe2\xe1\xe0\x84\x4c\xbd\xa9\xa8\x76\xb3\xe5\xbe\x6f\x4e\x84\xbb\x7b\x00\x25\xf4\x67\xe5\x10\x1d\x67\x71\xd0\xc9\x41\x17\xb7\x9f\x94\x89\x14\x70\x9c\xfa\x38\x04\x61\xfe\x0f\xf2\x51\x5e\x6c\x4c\x46\x01\x6a\x1a\xa8\x75\x11\x25\xb3\xcf\xa3\xef\xaa\x94\x68\x7b\xa8\xd4\xb7\x3b\x4b\xe2\x38\xd5\x07\x49\x0d\x2a\xd1\x8f\xd2\xab\xc1\xa1\x5e\x86\xb3\x4e\x67\xbf\xc2\x8b\x75\x55\xd1\x8d\x20\xe6\x32\x8d\xa0\xf3\x7a\x4f\xcd\xb8\x5f\xa3\x55\x8b\x2a\x45\xbb\xc3\x2a\xa9\x72\x52\xd8\x90\xcd\x65\x8d\x63\xc7\x73\x5b\x58\x05\x31\x67\x04\xeb\x00\x9d\x67\x09\xcf\x7d\x94\x1e\x01\xa6\x9c\x09\x58\x80\xdd\xda\xed\xe4\xcf\x2f\x5f\x7a\x08\x19\x88\x62\x8e\x0d\x54\xc2\xd4\x4b\x29\xde\x20\xd6\x49\xae\x59\x52\xe1\xb5\x2b\xac\xd3\x6a\x89\x90\x14\x06\x7b\xa3\x96\xcd\xfc\xfe\x41\x62\xcb\xb9\x45\x79\x8a\x3d\x09\x85\x2c\x87\xc7\x3b\x20\xee\x6a\x4a\xb3\xa0\xb2\x38\x17\xb9\x6a\x96\xa0\xa2\x56\xbd\x65\x2b\x5b\xa7\xab\xf1\xce\x16\x55\xba\x32\x56\x1b\xea\x0e\xd2\xa0\x75\x51\x48\xea\x0e\x48\x57\xeb\x2a\x6c\x2d\x81\x26\xa2\x13\xc0\x1d\x74\x77\x92\xc9\x48\x71\x26\x92\xdd\x63\x99\xc0\x8a\x6c\x9e\x87\x0d\x1c\xd1\x9f\xfe\x99\xcf\x1a\x50\x11\x13\xce\x99\xdf\x29\x4c\x60\x06\x8a\x49\x5a\x79\xc8\x4b\xaf\x28\xe7\x6b\x47\xff\xd3\x63\xa7\xfd\x79\xf9\xd9\x38\xfe\x9c\xee\x1d\x9f\x66\x97\xbb\x98\x29\x6f\xdb\x94\xfc\x16\x1d\x89\x06\xe3\x73\x16\x31\x53\x19\x83\x45\xae\x15\xe9\x29\x08\x99\x36\x2a\xcd\xda\x2a\x1f\x68\x08\x7d\x01\xe6\xcc\xbd\x9e\xad\x12\x9d\xae\xe4\x2e\x38\xef\xbf\x7a\xd5\x2b\xd7\x12\x19\x45\xd8\xe6\x8c\x3f\x7a\x7a\xd3\xfb\x01\xf5\x7c\x62\xff\x26\x8e\x04\xf2\x05\xfa\xe9\xf5\xeb\x57\x3f\xf5\xfe\x2c\x17\xe8\xe6\x95\xba\xba\x3a\xab\x1b\x4d\x8d\xca\x9c\x1c\x94\xa5\x1d\x2e\x75\x61\x1e\x1e\x50\x7f\x24\xef\x05\x97\x98\x8e\x6c\x46\x9c\x5b\xe0\x81\x85\x9d\x58\x10\x94\xed\xc5\x79\x6c\xa9\xd0\x16\xde\x3d\xdf\x8f\x24\x85\x5f\x08\x67\x20\x8c\x93\xc6\xe7\x32\xf4\x39\x6c\x81\xff\xf2\xaa\x26\x05\x88\x6d\xc5\x79\xc1\xce\xec\x7a\x74\x3b\x1d\x5c\x8d\xbd\x96\xcf\xbc\x55\x32\x6a\xba\x8d\xeb\x3f\xf2\xa3\xf7\xbd\xf1\x19\xb6\x35\x54\x91\x2f\xfa\x16\xf7\x41\x52\x8b\xd9\x60\xf8\x0c\xf4\xaa\xd3\xe5\x3a\xd1\xab\xc1\xef\xb7\xa3\xc9\xe0\x72\xf1\x71\x82\xa4\xa8\x0e\x7e\x85\xb4\x83\xee\x91\x32\xa1\xfe\x73\xe1\x1b\xe1\xdd\x88\x61\xde\xce\x1d\xd2\x7d\x82\x73\xfd\x7b\xbd\x89\x2b\x78\xb5\x7c\x5e\xdf\x2c\x6f\x67\xf3\xeb\xdf\xff\xf5\x99\xf8\x6d\x35\x58\x7b\x9c\x56\x5d\xc2\xdf\xe0\xf5\x76\x70\xb3\xbc\x18\x4f\x97\x93\xe1\x60\x39\xb9\x9e\x9e\x88\xf5\xb2\x78\x7f\x1a\xe7\x17\xcb\xe5\xec\xe4\x2a\xfe\x04\x0d\x5b\x3e\x17\x5f\x85\x2f\x4c\xaf\x4f\xca\x66\xde\x43\x3e\x8d\xc7\x37\xd7\xd7\xcb\xc5\x72\x3e\x98\xdd\x0e\x07\xb7\xc3\xf1\x7c\x79\x22\x66\x6b\xed\xdc\xd3\x18\x1e\x5c\x5e\x5e\xff\x76\x3b\x99\x2e\xc6\xc3\x9b\xf9\xf8\xb6\xe4\xff\x44\x7c\x77\xf7\x7b\x8f\x13\x21\xbb\x63\x78\x65\x77\xfb\x46\xe9\xe1\x3f\x2e\x87\x46\x76\x61\x96\xe0\xcf\xc0\x90\xb3\x16\xc8\xde\xf1\x56\x51\x3e\x82\x36\xad\x4a\x87\xc4\x89\xbb\x6b\x10\x35\xf1\x43\x24\x55\x1a\xa0\xf3\x1f\x7f\xbe\x62\xb5\x99\xac\xc2\xe8\xc0\xf0\xfa\x10\x86\xd7\xe7\x3f\x5e\x31\x37\xe2\xd5\x25\x3f\xb6\xe7\xb7\x05\x2e\x8d\x55\xa7\x7b\x68\xd5\x7f\x03\x00\x00\xff\xff\xb4\xee\xf7\x9e\x52\x31\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/download.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
