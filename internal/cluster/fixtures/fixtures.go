// Code generated by vfsgen; DO NOT EDIT.

package fixtures

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Fixtures statically implements the virtual filesystem provided to vfsgen.
var Fixtures = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 6, 13, 5, 16, 7, 619882126, time.UTC),
		},
		"/download.yaml": &vfsgen۰CompressedFileInfo{
			name:             "download.yaml",
			modTime:          time.Date(2022, 6, 13, 5, 16, 7, 581882062, time.UTC),
			uncompressedSize: 9972,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xdc\x59\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x20\xfc\x92\xdd\xc3\x4a\x69\xda\x6b\x51\x08\xd8\x07\xd5\x76\x13\xe3\x12\xdb\xb0\x9d\xdd\x3d\x1c\x0e\x01\x4d\x8e\x6d\x5e\x28\x52\x4b\x52\x8e\x75\x41\xbf\xfb\x81\x94\x64\xfd\xb1\xec\x26\xd9\xc6\xd7\xdd\x3c\xb4\x32\x39\x9c\xf9\xcd\x5f\x0e\x49\xcf\xf3\x3a\x38\x66\xbf\x80\xd2\x4c\x8a\x00\x6d\x2e\x3a\xf7\x4c\xd0\x00\x8d\x70\x04\x3a\xc6\x04\x3a\x11\x18\x4c\xb1\xc1\x41\x07\x21\x8e\x17\xc0\xb5\xfd\x42\x88\x48\x61\x94\xe4\x5e\xcc\xb1\x80\xa0\xf8\xc9\x41\x79\x11\x16\x78\x05\xaa\x83\x90\xc0\x11\x04\x28\xc6\x0a\xf3\x44\x7b\x3a\xd5\x06\xa2\xce\x41\x99\x33\x50\x1b\x46\x20\x24\x44\x26\xc2\xd4\x04\x67\x8c\x32\x06\x9e\xc6\xf9\x88\x03\xd8\xca\xff\xf1\xd1\x43\x6c\x89\xb0\xa0\xc8\xef\xf1\x44\x1b\x50\xfe\x4d\xce\xcf\xbf\x76\x5a\xa0\x1f\xe0\x77\xf4\x03\x13\x14\xb6\x87\x69\xba\x39\x6f\x9f\xc2\xe6\xfc\x3e\x59\x80\x12\x60\x40\x4f\x94\xdc\x30\x0a\xaa\xfb\x23\xea\x8e\x27\x83\xd1\xec\x6a\xf8\x79\xde\xfd\x11\x7d\xf9\x52\xd3\x4c\x03\x49\x14\x33\xa9\x2f\x63\x10\x7a\xcd\x96\xc6\x67\xf2\xbc\xa2\x6f\x36\xdd\x93\xc2\xc0\xd6\xf4\xa4\xd0\x46\x61\x26\x8c\x6e\xd1\xbd\x50\x32\x56\x6c\xc3\x38\xac\x80\x7a\x9a\x90\x0e\x42\x58\x08\x69\xb0\x61\x52\xe4\x8e\x61\x82\xf0\x84\x82\xaf\x80\x03\xd6\x50\x17\xce\x16\x91\x47\xb8\x4c\x68\xee\x25\x1a\xa0\xae\x51\x09\x74\xbf\xbe\x54\x03\x5f\x16\xab\xbc\x35\x5b\xad\x3d\xbc\xc1\x8c\xe3\x05\xe3\xcc\xa4\xcf\xe0\xc3\xc4\x8a\x83\x27\x24\x05\x8f\xc2\x06\xb8\x8c\x41\xd5\x96\x97\x86\xb6\xf4\x14\x34\x51\x2c\x36\xce\xa4\x67\xa5\xfe\x08\x73\x2e\x1f\x34\xc2\x84\x80\xd6\xc8\x48\x3b\x80\xaa\xf3\x82\xa2\xb5\xd4\xc6\xf1\x44\x68\x09\xd8\x24\x0a\xb4\x1b\x37\x6b\x40\x39\x72\xbb\x52\x25\x02\x61\x3b\x93\xa2\x44\x83\xfa\xc9\x7d\xad\x94\x4c\xe2\xec\x73\xa9\x2f\x8b\x1f\x14\x3d\x30\xb3\xce\x79\xda\xb9\xd9\xe0\x9a\x89\x64\xeb\x32\x00\xb6\xc6\x47\xe8\xd7\x70\x3a\x1a\x8e\x2e\x03\x64\xd6\x4c\x23\xa6\x9d\xb4\x48\x6a\x83\x14\x70\xbc\x05\x8a\x66\xbd\x9e\x63\xa5\xd7\x32\xe1\x14\x2d\xc0\x8a\xa5\x39\x53\x29\x78\x8a\x96\x52\x21\x92\x45\x25\xc2\x34\x62\x82\xd9\xe0\xb0\x46\xf0\xd1\xa5\xc2\xc2\x38\x18\x88\xe0\xc4\x8d\x9d\xb9\xb5\xad\xf6\x26\x0a\xb0\x01\xcf\x72\xad\x58\xb9\x9a\xca\x0a\x62\xef\x41\xaa\x7b\x2e\xb1\x8d\x87\xf6\x50\xeb\x76\x9c\xbd\xaf\xa4\x36\x7d\xa6\x7e\x91\x3c\x89\x60\xc2\x93\x15\x13\x01\xb2\x4c\xcb\xe9\xe1\xa4\xd7\x1c\x1a\x81\xb1\x02\x9a\xc3\x93\x61\x7f\x6f\x48\x2a\xa3\xab\x83\x93\x02\xc5\x40\x13\xcc\x71\x16\x06\x2d\xd3\xd4\xa6\x11\x66\xc2\xc6\x52\x39\x0d\xb4\x87\xe3\xcc\xd1\x0c\x74\xd0\xf1\xd0\xd9\xdf\xce\x8a\xa9\x5b\xa1\xf1\x12\x66\xa9\x26\x86\xef\xe6\x28\x2c\x71\xc2\x4d\x48\xeb\x2b\x91\x48\x38\xef\xe4\x71\x60\xcd\x66\xd2\x18\x02\x34\x4d\x44\xa8\x43\x91\x76\x5c\xb0\x38\x26\x59\x19\x0a\x72\xe7\x79\xce\x79\xba\x1c\xb7\x71\x5f\xf9\x19\x61\x4b\xa5\x3b\xb1\x62\x52\xb9\x3c\x72\x82\x14\x60\x3a\x16\x3c\x9d\x4a\x69\x3e\x33\x0e\x39\x35\x5a\x62\xae\xa1\xa3\xe0\xf7\x84\x29\xa0\x7d\x25\xe3\x16\x94\xca\x82\xba\xd5\xa0\x5a\x70\x6a\x70\xd1\x9a\xd7\x9c\x56\x02\x42\x64\x14\x4f\x94\x5c\x5a\xb9\x85\x59\x74\x12\xc7\x1c\x22\x10\x06\xf3\xcb\x5c\xd7\xbd\xb5\x36\x77\xaa\x36\xd0\x59\x45\xc7\x59\x45\x0f\xea\x85\x3a\xc8\x2d\xfd\x54\xf2\xb2\xfa\x3f\x71\x01\x13\x2b\x05\x5a\x7b\x62\xc5\xc4\xf6\x45\x8b\x9c\xf3\xb4\x2d\xe6\x4f\x5d\xbe\xc2\x06\xee\x01\xe2\xc2\xf1\x2f\x58\x97\xc4\xd4\xe6\xeb\x6e\x83\xf3\x5c\xaa\x76\x36\x2e\xe3\x76\xfe\x28\x76\x39\x10\xb4\xb9\xed\xa8\x05\x26\x3e\x4e\xcc\x5a\x2a\xf6\xdf\xac\x64\xdc\x7f\xd4\xb5\xad\x27\xdf\xef\xa6\x92\xc3\xe1\xbd\x26\x28\x36\x72\x95\xe4\x81\x80\x63\x56\xfa\x3e\xc3\x61\xab\x87\x96\x89\x22\x50\x1b\xdc\x80\x5a\x54\x06\x3c\x24\xa4\x98\xe6\x84\xb7\xd3\xeb\xe3\xb4\x0d\x31\x79\x26\xf9\x95\xbd\x78\x5f\xec\xce\x5c\xba\xce\x31\xab\x7e\xee\x93\x02\x87\xfc\x73\x05\xc6\xfd\xcf\x99\xce\x3e\x62\x6c\xc8\xda\x7d\x65\xe6\x77\x9f\x0f\x6e\xf0\x8f\xe2\x39\xd7\x06\x9b\xa4\x01\xab\x00\xb0\x27\xf7\x65\xd2\x0c\xd6\xf7\x1c\xcc\x77\xa2\x7b\x81\xe6\x54\x9a\x7f\x47\x6a\x3f\x57\xe7\x46\x2f\xfc\xbc\xd4\xfd\xc4\x04\x65\x62\x75\x24\x83\x1b\x55\x26\x4f\x68\x4f\x49\x0e\x8b\x7c\xb1\xfd\x9e\xc2\xd2\xae\x2d\x94\x3e\x82\xa3\x83\xd0\x7e\x05\x39\x54\x37\x74\xb2\xf8\x0f\x10\xe3\x4a\x47\x6b\x8b\xff\xcc\xc6\xfe\x38\x93\x62\x3b\xf9\xda\xd9\xe0\x55\x4a\x65\xac\xe4\x36\x75\x76\x3d\x58\x2d\xad\x18\x10\x86\x91\x86\x3d\x9b\x51\x24\xef\x41\x28\xd8\x30\x78\x68\x8f\xeb\x56\xc6\x2d\x7e\x6a\xf0\xcd\x9d\x91\x75\xcb\x47\xf9\x9f\x36\x26\x4b\xcb\x15\x11\x79\xcc\x81\xaf\x10\xad\x15\xd7\x7d\xff\x01\xab\xc9\x1a\x68\xc2\x99\x58\x55\x9c\x50\x3b\x21\xcd\xed\x99\xa3\xe8\x26\x11\xe1\x58\xeb\xc6\x31\xc3\x9d\x2d\x72\x39\x28\x6f\x4b\x50\x2c\xa9\x76\x27\x0f\x3f\xf7\xe9\x24\x67\xd1\xb3\x1c\x8e\x1c\x48\x8b\x3e\x97\x28\x66\x63\x9b\x77\x36\x98\x27\x10\xa0\x8b\x37\xc5\xdf\x4b\x22\xea\x2b\xe9\xc6\x01\x53\x50\x1e\x70\x20\x76\x79\xe6\xbd\xa3\x71\x73\x20\x29\xbb\xdd\xfd\x4c\x21\x52\x2c\xd9\x2a\xc2\xf1\x81\x2a\xbe\xdb\x41\x1e\x76\xe5\xbc\xb2\xe5\x54\x36\x93\xb2\xdc\xe7\xfb\xd0\x33\xc5\x1f\xdd\x4b\xf6\xe4\x3c\x89\x39\x6c\x40\x98\x6f\x96\xf7\x4f\x4b\xf8\x36\x67\xbd\x62\xae\xb7\x26\x79\x6b\xc0\x7c\xff\xe9\x5e\x56\x58\x17\x14\x37\x38\x6e\xb3\xb3\x2b\x60\x59\xd8\x1c\xe5\x5e\x3f\xf5\xe3\x38\xf6\xeb\x37\x2d\xc5\xe5\xce\x22\x0d\xd0\x15\xf0\xa8\xed\x76\xc9\x8a\xf7\xd7\xc0\x23\x5f\xaf\xcf\xf3\xfb\x06\x2f\xc3\xb1\x79\xeb\x31\xb1\x54\xf8\x38\x5d\x3b\xb4\x42\xa3\xb5\x31\xf6\xe8\xb9\x4d\x03\xd4\x7d\x7c\x64\xcb\xf2\x6a\x6e\x16\x03\xf1\xdd\x54\x66\x8b\x2f\x5f\x1e\x1f\xd1\x31\x02\x7f\x20\xf0\x82\x83\x3d\x1e\xd9\x83\xd2\x61\xba\xab\x42\x26\xf2\x2c\x29\x08\xba\xfb\xaf\x9b\x43\xd2\xff\x0f\x4c\xfa\x08\x28\x21\x4f\x8d\x68\x24\x8f\xc0\x71\x21\x18\x26\x66\x7d\x42\x40\x93\x42\x66\x3b\xa4\x85\x94\x46\x1b\x85\xe3\x5e\x78\x42\x50\x9f\x4a\xa9\xed\xb0\xdc\xd5\xd3\x50\xb8\xab\x61\xd8\x51\x7f\x53\x84\xe8\x38\xc4\xb0\x15\x41\x1b\xda\x17\x55\x23\x05\x1c\xa7\x1e\x5e\x81\x30\x7f\x91\x9a\x94\x77\x38\xc3\x7e\x80\xea\x4e\x6a\xbc\x16\x64\x3e\x7a\xc6\x83\xc2\x8e\x71\x17\xed\xac\xee\xb6\x6c\x8e\x53\x1d\xa0\xb3\x03\xd2\xc2\x52\xff\x2c\x1c\x0f\xc9\xac\x10\xa2\x6e\xc6\xb5\x5b\xf1\xf3\xd9\x9e\x83\x71\x1c\xeb\x72\x77\xef\x43\xcc\x65\x1a\x41\xeb\x5b\x4c\xc5\xcd\x7f\x56\xff\xea\x18\x88\x15\xa0\x5d\x57\x20\x55\x2e\xcc\x36\x53\xd7\x15\xcc\x0e\x75\x53\x61\x05\x31\x67\x04\xeb\x00\x5d\x64\xe5\xcf\xdd\x1a\xf6\x01\x53\xce\x04\xcc\x80\x48\x41\xed\xe4\xc7\x37\x6f\x3a\x08\x19\x88\x62\x8e\x0d\x94\xea\x14\xc6\xb4\x7f\xbc\x26\xac\x55\x1c\x42\x05\x58\x47\xb0\x5c\x32\xc1\x4c\x5a\x2e\x11\x92\x42\xb8\x37\x6a\x61\xe6\x17\xc5\x89\x62\x62\x35\xdb\x1d\x1e\x86\x2b\x21\x77\xc3\x83\x2d\x10\xf7\x8a\x50\x5d\x99\xf1\x9c\xe5\xa6\x99\x83\x8a\x74\x7d\xda\x76\x8e\xce\x56\x83\x6d\x6c\x75\x2f\xdd\xd5\xa4\xba\x87\x34\x68\xbc\xe9\x48\xdd\x42\x89\x90\x8c\x41\x61\xeb\x09\x34\x14\xad\x04\xee\x6c\xd1\x2a\x26\x13\xc5\x99\x48\xb6\x4f\x05\x81\x15\x59\xbf\x0e\x0c\x1c\xd1\x0f\x7f\xcf\x67\x0d\xa8\x88\x09\x17\xce\x97\x0a\x13\x98\x80\x62\x92\x96\x11\xf2\x26\xa7\x8b\xab\xe7\xad\xd1\xf1\x23\x56\xb6\x42\xd7\xfa\xcc\xd1\x5e\xa7\x9a\xbd\xc4\x31\xb3\x7b\x18\xd9\x21\xf6\x8a\xbe\x16\x8c\xc7\x59\xc4\x4c\xe9\x0e\x16\xe1\x15\x94\x8f\x40\x4c\x9e\x2f\x12\x9d\x2e\xe4\x36\xb8\xf0\xdf\xbd\xeb\xee\xe8\x88\x8c\x22\x6c\xab\xc4\xbf\xba\x7a\xdd\xfd\x09\x75\x3d\x62\xff\x4d\x1c\x3b\xe4\x09\xf4\xe1\xfd\xfb\x77\x1f\xba\xff\xde\x2d\xd0\xf5\xd7\xce\xaa\xf1\xca\x87\xa6\xfc\xe9\xa6\x10\x71\x08\x77\x33\x39\xaa\xc0\x1f\x1f\x91\xdf\x97\x0f\x82\x4b\x4c\xfb\xb6\x0a\x4e\x2d\x71\x68\x69\x87\x96\x04\x65\xfb\x70\x9e\x49\x6a\xa5\xad\x0a\x9e\x17\x49\x0a\x3f\x13\xce\x40\x18\xa7\x8d\xc7\xe5\xca\xe3\xb0\x01\xfe\xf3\xbb\x8a\x16\x20\x36\x25\xf2\x02\xce\x64\xdc\xbf\x1b\x85\x37\x83\x4e\x23\x42\x3e\x2b\x19\xd5\x83\x64\xc9\x80\xd3\xfc\x4c\xb3\x37\x3e\xc1\xb6\x7f\x2a\xaa\x83\x6f\x79\x1f\x14\x35\x9b\x84\xbd\x57\x90\x97\x3d\xf9\x37\x85\xde\x84\xbf\xdd\xf5\x87\xe1\xf5\xec\xeb\x02\x49\xd1\x19\xfc\x03\xd2\x16\xb9\x47\x5a\x84\xea\x9f\x4b\xd6\x08\x6f\xfb\x0c\xf3\x66\xa5\x90\xee\x9e\x03\xf3\x5a\xa8\x94\x58\x2d\xce\xf1\xed\xfc\x6e\x32\x1d\xff\xf6\xcf\x6f\x84\xb7\x71\xc0\xda\x43\x5a\x9e\x10\xfe\x00\xd6\xbb\xf0\x76\x7e\x35\x18\xcd\x87\xbd\x70\x3e\x1c\x8f\x4e\x04\x7d\xd7\xb8\x3f\x0f\xf9\xd5\x7c\x3e\x39\xb9\x89\x5f\x60\x61\x8b\x73\xf6\xa7\x88\x85\xd1\xf8\xa4\x30\xf3\xf3\xe3\xf3\x30\x7e\x1a\x8f\xe7\xb3\xf9\x34\x9c\xdc\xf5\xc2\xbb\xde\x60\x3a\x3f\x11\xd8\xca\x51\xee\x79\x80\xc3\xeb\xeb\xf1\xaf\x77\xc3\xd1\x6c\xd0\xbb\x9d\x0e\xee\x76\xf8\x4f\x84\xbb\xfd\xac\xf7\x34\x15\xb2\xe7\xde\x1b\xbb\xb3\xd7\x1a\x0d\xef\x69\x35\x34\xb2\x0b\xb3\x02\x7f\x0e\x86\x9c\x37\x48\x6a\xb7\x82\xd5\x66\x11\xb4\x69\xf4\x35\x24\x4e\xdc\x65\x6e\x54\xe7\x0f\x91\x54\x69\x80\x2e\xde\x7e\xbc\x61\x95\x99\xac\x9b\x68\xe1\xf0\xfe\x10\x87\xf7\x17\x6f\x6f\x98\x1b\xe9\x54\x35\x3f\xb6\xe7\x37\x15\xde\x39\xab\x2a\xf7\xe0\xaa\xff\x05\x00\x00\xff\xff\xfa\x68\xb8\x55\xf4\x26\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/download.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
