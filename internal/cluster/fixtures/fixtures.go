// Code generated by vfsgen; DO NOT EDIT.

package fixtures

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Fixtures statically implements the virtual filesystem provided to vfsgen.
var Fixtures = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 6, 14, 6, 21, 27, 118972497, time.UTC),
		},
		"/download.yaml": &vfsgen۰CompressedFileInfo{
			name:             "download.yaml",
			modTime:          time.Date(2022, 6, 14, 6, 21, 27, 71972425, time.UTC),
			uncompressedSize: 9962,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xdc\x59\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x20\xf4\x92\xdd\xc3\x4a\x69\xda\x6b\x51\x08\xd8\x07\xd5\x76\x1b\xe3\x12\xc7\xb0\x9d\xdd\x3d\x1c\x0e\x01\x4d\x8e\x6d\x5e\x28\x52\x4b\x52\x8e\x75\x41\xbf\xfb\x81\x94\x64\xfd\xb1\xec\x26\xd9\xd6\xd7\xdd\x3c\xb4\x32\x39\x9c\xf9\xcd\x5f\x0e\x49\xdf\xf7\x7b\x38\x61\xbf\x80\xd2\x4c\x8a\x10\x6d\x2e\x7a\xf7\x4c\xd0\x10\x8d\x71\x0c\x3a\xc1\x04\x7a\x31\x18\x4c\xb1\xc1\x61\x0f\x21\x8e\x17\xc0\xb5\xfd\x42\x88\x48\x61\x94\xe4\x7e\xc2\xb1\x80\xb0\xfc\xc9\x41\xf9\x31\x16\x78\x05\xaa\x87\x90\xc0\x31\x84\x28\xc1\x0a\xf3\x54\xfb\x3a\xd3\x06\xe2\xde\x41\x99\x33\x50\x1b\x46\x20\x22\x44\xa6\xc2\x34\x04\xe7\x8c\x72\x06\xbe\xc6\xc5\x88\x03\xd8\xc9\xff\xf1\xd1\x47\x6c\x89\xb0\xa0\x28\xe8\xf3\x54\x1b\x50\xc1\x75\xc1\x2f\xb8\x72\x5a\xa0\x1f\xe0\x77\xf4\x03\x13\x14\xb6\x87\x69\xbc\x82\x77\x40\x61\x73\x7e\x9f\x2e\x40\x09\x30\xa0\x27\x4a\x6e\x18\x05\xe5\xfd\x88\xbc\x9b\xc9\x70\x3c\xbb\x1c\x7d\x9c\x7b\x3f\xa2\xcf\x9f\x1b\x9a\x69\x20\xa9\x62\x26\x0b\x64\x02\x42\xaf\xd9\xd2\x04\x4c\x9e\xd7\xf4\xcd\xa7\xfb\x52\x18\xd8\x9a\xbe\x14\xda\x28\xcc\x84\xd1\x1d\xba\x97\x4a\x26\x8a\x6d\x18\x87\x15\x50\x5f\x13\xd2\x43\x08\x0b\x21\x0d\x36\x4c\x8a\xc2\x31\x4c\x10\x9e\x52\x08\x14\x70\xc0\x1a\x9a\xc2\xd9\x22\xf6\x09\x97\x29\x2d\xbc\x44\x43\xe4\x19\x95\x82\xf7\xe5\xa5\x1a\xf8\xb2\x5c\xe5\xaf\xd9\x6a\xed\xe3\x0d\x66\x1c\x2f\x18\x67\x26\x7b\x06\x1f\x26\x56\x1c\x7c\x21\x29\xf8\x14\x36\xc0\x65\x02\xaa\xb1\xbc\x32\xb4\xa5\xa7\xa0\x89\x62\x89\x71\x26\x3d\xab\xf4\x47\x98\x73\xf9\xa0\x11\x26\x04\xb4\x46\x46\xda\x01\x54\x9f\x17\x14\xad\xa5\x36\x8e\x27\x42\x4b\xc0\x26\x55\xa0\xdd\xb8\x59\x03\x2a\x90\xdb\x95\x2a\x15\x08\xdb\x99\x0c\xa5\x1a\xd4\x4f\xee\x6b\xa5\x64\x9a\xe4\x9f\x4b\xfd\xa9\xfc\x41\xd1\x03\x33\xeb\x82\xa7\x9d\x9b\x0d\xaf\x98\x48\xb7\x2e\x03\x60\x6b\x02\x84\x7e\x8d\xa6\xe3\xd1\xf8\x53\x88\xcc\x9a\x69\xc4\xb4\x93\x16\x4b\x6d\x90\x02\x8e\xb7\x40\xd1\xac\xdf\x77\xac\xf4\x5a\xa6\x9c\xa2\x05\x58\xb1\xb4\x60\x2a\x05\xcf\xd0\x52\x2a\x44\xf2\xa8\x44\x98\xc6\x4c\x30\x1b\x1c\xd6\x08\x01\xfa\xa4\xb0\x30\x0e\x06\x22\x38\x75\x63\x67\x6e\x6d\xa7\xbd\x89\x02\x6c\xc0\xb7\x5c\x6b\x56\xae\xa7\xb2\x82\xc4\x7f\x90\xea\x9e\x4b\x6c\xe3\xa1\x3b\xd4\xbc\x9e\xb3\xf7\xa5\xd4\x66\xc0\xd4\x2f\x92\xa7\x31\x4c\x78\xba\x62\x22\x44\x96\x69\x35\x3d\x9a\xf4\xdb\x43\x63\x30\x56\x40\x7b\x78\x32\x1a\xec\x0d\x49\x65\x74\x7d\x70\x52\xa2\x18\x6a\x82\x39\xce\xc3\xa0\x63\x9a\xda\x34\xc2\x4c\xd8\x58\xaa\xa6\x81\xf6\x71\x92\x3b\x9a\x81\x0e\x7b\x3e\x3a\xfb\xdb\x59\x39\x75\x2b\x34\x5e\xc2\x2c\xd3\xc4\xf0\xdd\x1c\x85\x25\x4e\xb9\x89\x68\x73\x25\x12\x29\xe7\xbd\x22\x0e\xac\xd9\x4c\x96\x40\x88\xa6\xa9\x88\x74\x24\xb2\x9e\x0b\x16\xc7\x24\x2f\x43\x61\xe1\x3c\xdf\x39\x4f\x57\xe3\x36\xee\x6b\x3f\x63\x6c\xa9\x74\x2f\x51\x4c\x2a\x97\x47\x4e\x90\x02\x4c\x6f\x04\xcf\xa6\x52\x9a\x8f\x8c\x43\x41\x8d\x96\x98\x6b\xe8\x29\xf8\x3d\x65\x0a\xe8\x40\xc9\xa4\x03\xa5\xb2\xa0\x6e\x35\xa8\x0e\x9c\x1a\x5c\xb4\x16\x35\xa7\x93\x80\x10\x19\x27\x13\x25\x97\x56\x6e\x69\x16\x9d\x26\x09\x87\x18\x84\xc1\xfc\x53\xa1\xeb\xde\x5a\x9b\x3b\x75\x1b\xe8\xbc\xa2\xe3\xbc\xa2\x87\xcd\x42\x1d\x16\x96\x7e\x2a\x79\x55\xfd\x9f\xb8\x80\x89\x95\x02\xad\x7d\xb1\x62\x62\xfb\xa2\x45\xce\x79\xda\x16\xf3\xa7\x2e\x5f\x61\x03\xf7\x00\x49\xe9\xf8\x17\xac\x4b\x13\x6a\xf3\x75\xb7\xc1\xf9\x2e\x55\x7b\x1b\x97\x71\x3b\x7f\x94\xbb\x1c\x08\xda\xde\x76\xd4\x02\x93\x00\xa7\x66\x2d\x15\xfb\x6f\x5e\x32\xee\xdf\xeb\xc6\xd6\x53\xec\x77\x53\xc9\xe1\xf0\x5e\x13\x96\x1b\xb9\x4a\x8b\x40\xc0\x09\xab\x7c\x9f\xe3\xb0\xd5\x43\xcb\x54\x11\x68\x0c\x6e\x40\x2d\x6a\x03\x3e\x12\x52\x4c\x0b\xc2\xdb\xe9\xd5\x71\xda\x96\x98\x22\x93\x82\xda\x5e\xbc\x2f\x76\x67\x2e\xdd\xe4\x98\x57\x3f\xf7\x49\x81\x43\xf1\xb9\x02\xe3\xfe\xe7\x4c\xe7\x1f\x09\x36\x64\xed\xbe\x72\xf3\xbb\xcf\x07\x37\xf8\x47\xf1\x9c\x6b\x83\x4d\xda\x82\x55\x02\xd8\x93\xfb\x32\x69\x06\xeb\x7b\x0e\xe6\x3b\xd1\xbd\x44\x73\x2a\xcd\xbf\x23\xb5\x9f\xab\x73\xab\x17\x7e\x5e\xea\x7e\x60\x82\x32\xb1\x3a\x92\xc1\xad\x2a\x53\x24\xb4\xaf\x24\x87\x45\xb1\xd8\x7e\x4f\x61\x69\xd7\x96\x4a\x1f\xc1\xd1\x43\x68\xbf\x82\x1c\xaa\x1b\x3a\x5d\xfc\x07\x88\x71\xa5\xa3\xb3\xc5\x7f\x66\x63\x7f\x9c\x49\xb9\x9d\x7c\xe9\x6c\xf0\x4d\x4a\x65\xa2\xe4\x36\x73\x76\x3d\x58\x2d\xad\x18\x10\x86\x91\x96\x3d\xdb\x51\x24\xef\x41\x28\xd8\x30\x78\xe8\x8e\xeb\x4e\xc6\x1d\x7e\x6a\xf1\x2d\x9c\x91\x77\xcb\x47\xf9\x9f\x36\x26\x2b\xcb\x95\x11\x79\xcc\x81\xdf\x20\x5a\x6b\xae\xfb\xfe\x03\x56\x93\x35\xd0\x94\x33\xb1\xaa\x39\xa1\x71\x42\x9a\xdb\x33\x47\xd9\x4d\x22\xc2\xb1\xd6\xad\x63\x86\x3b\x5b\x14\x72\x50\xd1\x96\xa0\x44\x52\xed\x4e\x1e\x41\xe1\xd3\x49\xc1\xa2\x6f\x39\x1c\x39\x90\x96\x7d\x2e\x51\xcc\xc6\x36\xef\x6d\x30\x4f\x21\x44\x17\xaf\xca\xbf\x97\x44\xd4\x17\xd2\x8d\x03\xa6\xa0\x7c\xe0\x40\xec\xf2\xdc\x7b\x47\xe3\xe6\x40\x52\x7a\xde\x7e\xa6\x10\x29\x96\x6c\x15\xe3\xe4\x40\x15\xdf\xed\x20\x0f\xbb\x72\x5e\xdb\x72\x6a\x9b\x49\x55\xee\x8b\x7d\xe8\x99\xe2\x8f\xee\x25\x7b\x72\x9e\xc4\x1c\x36\x20\xcc\x57\xcb\xfb\xa7\x25\x7c\x97\xb3\xbe\x61\xae\x77\x26\x79\x67\xc0\x7c\xff\xe9\x5e\x55\x58\x17\x14\xd7\x38\xe9\xb2\xb3\x2b\x60\x79\xd8\x1c\xe5\xde\x3c\xf5\xe3\x24\x09\x9a\x37\x2d\xe5\xe5\xce\x22\x0b\xd1\x25\xf0\xb8\xeb\x76\xc9\x8a\x0f\xd6\xc0\xe3\x40\xaf\xcf\x8b\xfb\x06\x3f\xc7\xb1\x79\xed\x33\xb1\x54\xf8\x38\x5d\x37\xb4\x52\xa3\xb5\x31\xf6\xe8\xb9\xcd\x42\xe4\x3d\x3e\xb2\x65\x75\x35\x37\x4b\x80\x04\x6e\x2a\xb7\xc5\xe7\xcf\x8f\x8f\xe8\x18\x41\x30\x14\x78\xc1\xc1\x1e\x8f\xec\x41\xe9\x30\xdd\x65\x29\x13\xf9\x96\x14\x04\xdd\xfd\xe7\x15\x90\xf4\xff\x03\x93\x3e\x02\x4a\xc8\x53\x23\x1a\xcb\x23\x70\x5c\x08\x46\xa9\x59\x9f\x10\xd0\xa4\x94\xd9\x0d\x69\x21\xa5\xd1\x46\xe1\xa4\x1f\x9d\x10\xd4\x87\x4a\x6a\x37\x2c\x77\xf5\x34\x12\xee\x6a\x18\x76\xd4\x5f\x15\x21\x3a\x0e\x31\xea\x44\xd0\x85\xf6\x45\xd5\x48\x01\xc7\x99\x8f\x57\x20\xcc\x5f\xa4\x26\x15\x1d\xce\x68\x10\xa2\xa6\x93\x5a\xaf\x05\xb9\x8f\x9e\xf1\xa0\xb0\x63\xec\xa1\x9d\xd5\xdd\x96\xcd\x71\xa6\x43\x74\x76\x40\x5a\x54\xe9\x9f\x87\xe3\x21\x99\x35\x42\xe4\xe5\x5c\xbd\x9a\x9f\xcf\xf6\x1c\x8c\x93\x44\x57\xbb\xfb\x00\x12\x2e\xb3\x18\x3a\xdf\x62\x6a\x6e\xfe\xb3\xfa\x57\x27\x40\xac\x00\xed\xba\x02\xa9\x0a\x61\xb6\x99\xba\xaa\x61\x76\xa8\xdb\x0a\x2b\x48\x38\x23\x58\x87\xe8\x22\x2f\x7f\xee\xd6\x70\x00\x98\x72\x26\x60\x06\x44\x0a\x6a\x27\xdf\xbf\x7a\xd5\x43\xc8\x40\x9c\x70\x6c\xa0\x52\xa7\x34\xa6\xfd\xe3\x0d\x61\x9d\xe2\x10\x2a\xc1\x3a\x82\xe5\x92\x09\x66\xb2\x6a\x89\x90\x14\xa2\xbd\x51\x0b\xb3\xb8\x28\x4e\x15\x13\xab\xd9\xee\xf0\x30\x5a\x09\xb9\x1b\x1e\x6e\x81\xb8\x57\x84\xfa\xca\x9c\xe7\xac\x30\xcd\x1c\x54\xac\x9b\xd3\xb6\x73\x74\xb6\x1a\x6e\x13\xab\x7b\xe5\xae\x36\xd5\x3d\x64\x61\xeb\x4d\x47\xea\x0e\x4a\x84\x64\x02\x0a\x5b\x4f\xa0\x91\xe8\x24\x70\x67\x8b\x4e\x31\xb9\x28\xce\x44\xba\x7d\x2a\x08\xac\xc8\xfa\xdb\xc0\xc0\x31\x7d\xf7\xf7\x62\xd6\x80\x8a\x99\x70\xe1\xfc\x49\x61\x02\x13\x50\x4c\xd2\x2a\x42\x5e\x15\x74\x49\xfd\xbc\x35\x3e\x7e\xc4\xca\x57\xe8\x46\x9f\x39\xde\xeb\x54\xf3\x97\x38\x66\x76\x0f\x23\x3b\xc4\x7e\xd9\xd7\x82\xf1\x39\x8b\x99\xa9\xdc\xc1\x62\xbc\x82\x10\x79\x8b\x54\x67\x0b\xb9\x0d\x2f\x82\x37\x6f\xbc\xdd\x2c\x91\x71\x8c\x6d\x6d\xf8\x97\xa7\xd7\xde\x4f\xc8\xf3\x89\xfd\x37\x75\x4c\x90\x2f\xd0\xbb\xb7\x6f\xdf\xbc\xf3\xfe\xbd\x5b\xa0\x9b\x6f\x9c\x75\x93\x55\xcf\x4b\xc5\x83\x4d\x29\xe2\x10\xda\x76\x4a\xd4\xe1\x3e\x3e\xa2\x60\x20\x1f\x04\x97\x98\x0e\x6c\xed\x9b\x5a\xe2\xc8\xd2\x8e\x2c\x09\xca\x77\xdf\x22\x7f\xd4\x4a\x5b\x15\x7c\x3f\x96\x14\x7e\x26\x9c\x81\x30\x4e\x1b\x9f\xcb\x95\xcf\x61\x03\xfc\xe7\x37\x35\x2d\x40\x6c\x2a\xe4\x25\x9c\xc9\xcd\xe0\x6e\x1c\x5d\x0f\x7b\xad\xb8\xf8\xa8\x64\xdc\x0c\x8d\x25\x03\x4e\x8b\x93\xcc\xde\xf8\x04\xdb\xae\xa9\xac\x09\x81\xe5\x7d\x50\xd4\x6c\x12\xf5\xbf\x81\xbc\xfc\xa1\xbf\x2d\xf4\x3a\xfa\xed\x6e\x30\x8a\xae\x66\x5f\x16\x48\xca\x7e\xe0\x1f\x90\x75\xc8\x3d\xd2\x18\xd4\xff\x5c\x8a\xc6\x78\x3b\x60\x98\xb7\xeb\x83\x74\xb7\x1b\x98\x37\x42\xa5\xc2\x6a\x71\xde\xdc\xce\xef\x26\xd3\x9b\xdf\xfe\xf9\x95\xf0\xb6\x8e\x55\x7b\x48\xab\x73\xc1\x1f\xc0\x7a\x17\xdd\xce\x2f\x87\xe3\xf9\xa8\x1f\xcd\x47\x37\xe3\x13\x41\xdf\xb5\xeb\xcf\x43\x7e\x39\x9f\x4f\x4e\x6e\xe2\x17\x58\xd8\xe2\x9c\xfd\x29\x62\x61\x7c\x73\x52\x98\xc5\xa9\xf1\x79\x18\x3f\xdc\xdc\xcc\x67\xf3\x69\x34\xb9\xeb\x47\x77\xfd\xe1\x74\x7e\x22\xb0\xb5\x03\xdc\xf3\x00\x47\x57\x57\x37\xbf\xde\x8d\xc6\xb3\x61\xff\x76\x3a\xbc\xdb\xe1\x3f\x11\xee\xee\x13\xde\xd3\x54\xc8\x1f\x79\xaf\xed\x7e\xde\x68\x2f\xfc\xa7\xd5\xd0\xd8\x2e\xcc\x0b\xfc\x39\x18\x72\xde\x22\x69\xdc\x05\xd6\x5b\x44\xd0\xa6\xd5\xcd\x90\x24\x75\x57\xb8\x71\x93\x3f\xc4\x52\x65\x21\xba\x78\xfd\xfe\x9a\xd5\x66\xf2\x1e\xa2\x83\xc3\xdb\x43\x1c\xde\x5e\xbc\xbe\x66\x6e\xa4\x57\xd7\xfc\xd8\x9e\xdf\x56\x78\xe7\xac\xba\xdc\x83\xab\xfe\x17\x00\x00\xff\xff\xce\xd5\x8f\x2f\xea\x26\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/download.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
