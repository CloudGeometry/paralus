// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/rpc/audit/relayaudit.proto

package eventv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayAuditClient is the client API for RelayAudit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayAuditClient interface {
	GetRelayAPIAudit(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error)
	GetRelayAPIAuditByProjects(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error)
	GetRelayAudit(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error)
	GetRelayAuditByProjects(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error)
}

type relayAuditClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayAuditClient(cc grpc.ClientConnInterface) RelayAuditClient {
	return &relayAuditClient{cc}
}

func (c *relayAuditClient) GetRelayAPIAudit(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error) {
	out := new(RelayAuditSearchResponse)
	err := c.cc.Invoke(ctx, "/rep.framework.event.v1.RelayAudit/getRelayAPIAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayAuditClient) GetRelayAPIAuditByProjects(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error) {
	out := new(RelayAuditSearchResponse)
	err := c.cc.Invoke(ctx, "/rep.framework.event.v1.RelayAudit/getRelayAPIAuditByProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayAuditClient) GetRelayAudit(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error) {
	out := new(RelayAuditSearchResponse)
	err := c.cc.Invoke(ctx, "/rep.framework.event.v1.RelayAudit/getRelayAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayAuditClient) GetRelayAuditByProjects(ctx context.Context, in *RelayAuditSearchRequest, opts ...grpc.CallOption) (*RelayAuditSearchResponse, error) {
	out := new(RelayAuditSearchResponse)
	err := c.cc.Invoke(ctx, "/rep.framework.event.v1.RelayAudit/getRelayAuditByProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayAuditServer is the server API for RelayAudit service.
// All implementations should embed UnimplementedRelayAuditServer
// for forward compatibility
type RelayAuditServer interface {
	GetRelayAPIAudit(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error)
	GetRelayAPIAuditByProjects(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error)
	GetRelayAudit(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error)
	GetRelayAuditByProjects(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error)
}

// UnimplementedRelayAuditServer should be embedded to have forward compatible implementations.
type UnimplementedRelayAuditServer struct {
}

func (UnimplementedRelayAuditServer) GetRelayAPIAudit(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayAPIAudit not implemented")
}
func (UnimplementedRelayAuditServer) GetRelayAPIAuditByProjects(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayAPIAuditByProjects not implemented")
}
func (UnimplementedRelayAuditServer) GetRelayAudit(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayAudit not implemented")
}
func (UnimplementedRelayAuditServer) GetRelayAuditByProjects(context.Context, *RelayAuditSearchRequest) (*RelayAuditSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayAuditByProjects not implemented")
}

// UnsafeRelayAuditServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayAuditServer will
// result in compilation errors.
type UnsafeRelayAuditServer interface {
	mustEmbedUnimplementedRelayAuditServer()
}

func RegisterRelayAuditServer(s grpc.ServiceRegistrar, srv RelayAuditServer) {
	s.RegisterService(&RelayAudit_ServiceDesc, srv)
}

func _RelayAudit_GetRelayAPIAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayAuditSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayAuditServer).GetRelayAPIAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rep.framework.event.v1.RelayAudit/getRelayAPIAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayAuditServer).GetRelayAPIAudit(ctx, req.(*RelayAuditSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayAudit_GetRelayAPIAuditByProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayAuditSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayAuditServer).GetRelayAPIAuditByProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rep.framework.event.v1.RelayAudit/getRelayAPIAuditByProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayAuditServer).GetRelayAPIAuditByProjects(ctx, req.(*RelayAuditSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayAudit_GetRelayAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayAuditSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayAuditServer).GetRelayAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rep.framework.event.v1.RelayAudit/getRelayAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayAuditServer).GetRelayAudit(ctx, req.(*RelayAuditSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayAudit_GetRelayAuditByProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayAuditSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayAuditServer).GetRelayAuditByProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rep.framework.event.v1.RelayAudit/getRelayAuditByProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayAuditServer).GetRelayAuditByProjects(ctx, req.(*RelayAuditSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayAudit_ServiceDesc is the grpc.ServiceDesc for RelayAudit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayAudit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rep.framework.event.v1.RelayAudit",
	HandlerType: (*RelayAuditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRelayAPIAudit",
			Handler:    _RelayAudit_GetRelayAPIAudit_Handler,
		},
		{
			MethodName: "getRelayAPIAuditByProjects",
			Handler:    _RelayAudit_GetRelayAPIAuditByProjects_Handler,
		},
		{
			MethodName: "getRelayAudit",
			Handler:    _RelayAudit_GetRelayAudit_Handler,
		},
		{
			MethodName: "getRelayAuditByProjects",
			Handler:    _RelayAudit_GetRelayAuditByProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/audit/relayaudit.proto",
}
