// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sentry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KubectlClusterSettingsClient is the client API for KubectlClusterSettings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubectlClusterSettingsClient interface {
	UpdateKubectlClusterSettings(ctx context.Context, in *UpdateKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*UpdateKubectlClusterSettingsResponse, error)
	GetKubectlClusterSettings(ctx context.Context, in *GetKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*GetKubectlClusterSettingsResponse, error)
}

type kubectlClusterSettingsClient struct {
	cc grpc.ClientConnInterface
}

func NewKubectlClusterSettingsClient(cc grpc.ClientConnInterface) KubectlClusterSettingsClient {
	return &kubectlClusterSettingsClient{cc}
}

func (c *kubectlClusterSettingsClient) UpdateKubectlClusterSettings(ctx context.Context, in *UpdateKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*UpdateKubectlClusterSettingsResponse, error) {
	out := new(UpdateKubectlClusterSettingsResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubectlClusterSettings/UpdateKubectlClusterSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubectlClusterSettingsClient) GetKubectlClusterSettings(ctx context.Context, in *GetKubectlClusterSettingsRequest, opts ...grpc.CallOption) (*GetKubectlClusterSettingsResponse, error) {
	out := new(GetKubectlClusterSettingsResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubectlClusterSettings/GetKubectlClusterSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubectlClusterSettingsServer is the server API for KubectlClusterSettings service.
// All implementations should embed UnimplementedKubectlClusterSettingsServer
// for forward compatibility
type KubectlClusterSettingsServer interface {
	UpdateKubectlClusterSettings(context.Context, *UpdateKubectlClusterSettingsRequest) (*UpdateKubectlClusterSettingsResponse, error)
	GetKubectlClusterSettings(context.Context, *GetKubectlClusterSettingsRequest) (*GetKubectlClusterSettingsResponse, error)
}

// UnimplementedKubectlClusterSettingsServer should be embedded to have forward compatible implementations.
type UnimplementedKubectlClusterSettingsServer struct {
}

func (UnimplementedKubectlClusterSettingsServer) UpdateKubectlClusterSettings(context.Context, *UpdateKubectlClusterSettingsRequest) (*UpdateKubectlClusterSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubectlClusterSettings not implemented")
}
func (UnimplementedKubectlClusterSettingsServer) GetKubectlClusterSettings(context.Context, *GetKubectlClusterSettingsRequest) (*GetKubectlClusterSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubectlClusterSettings not implemented")
}

// UnsafeKubectlClusterSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubectlClusterSettingsServer will
// result in compilation errors.
type UnsafeKubectlClusterSettingsServer interface {
	mustEmbedUnimplementedKubectlClusterSettingsServer()
}

func RegisterKubectlClusterSettingsServer(s grpc.ServiceRegistrar, srv KubectlClusterSettingsServer) {
	s.RegisterService(&KubectlClusterSettings_ServiceDesc, srv)
}

func _KubectlClusterSettings_UpdateKubectlClusterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubectlClusterSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubectlClusterSettingsServer).UpdateKubectlClusterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubectlClusterSettings/UpdateKubectlClusterSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubectlClusterSettingsServer).UpdateKubectlClusterSettings(ctx, req.(*UpdateKubectlClusterSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubectlClusterSettings_GetKubectlClusterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubectlClusterSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubectlClusterSettingsServer).GetKubectlClusterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubectlClusterSettings/GetKubectlClusterSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubectlClusterSettingsServer).GetKubectlClusterSettings(ctx, req.(*GetKubectlClusterSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubectlClusterSettings_ServiceDesc is the grpc.ServiceDesc for KubectlClusterSettings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubectlClusterSettings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rafay.dev.sentry.rpc.KubectlClusterSettings",
	HandlerType: (*KubectlClusterSettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateKubectlClusterSettings",
			Handler:    _KubectlClusterSettings_UpdateKubectlClusterSettings_Handler,
		},
		{
			MethodName: "GetKubectlClusterSettings",
			Handler:    _KubectlClusterSettings_GetKubectlClusterSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/sentry/kubectl_cluster.proto",
}
