// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/rpc/sentry/kubeconfig.proto

package sentry

import (
	context "context"
	v3 "github.com/RafaySystems/rcloud-base/proto/types/commonpb/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KubeConfigClient is the client API for KubeConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeConfigClient interface {
	GetForClusterWebSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error)
	GetForClusterSystemSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error)
	GetForUser(ctx context.Context, in *GetForUserRequest, opts ...grpc.CallOption) (*v3.HttpBody, error)
	RevokeKubeconfig(ctx context.Context, in *RevokeKubeconfigRequest, opts ...grpc.CallOption) (*RevokeKubeconfigResponse, error)
	GetOrganizationSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error)
	GetUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error)
	GetSSOUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error)
	UpdateOrganizationSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error)
	UpdateUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error)
	UpdateSSOUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error)
}

type kubeConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeConfigClient(cc grpc.ClientConnInterface) KubeConfigClient {
	return &kubeConfigClient{cc}
}

func (c *kubeConfigClient) GetForClusterWebSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/GetForClusterWebSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) GetForClusterSystemSession(ctx context.Context, in *GetForClusterRequest, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/GetForClusterSystemSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) GetForUser(ctx context.Context, in *GetForUserRequest, opts ...grpc.CallOption) (*v3.HttpBody, error) {
	out := new(v3.HttpBody)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/GetForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) RevokeKubeconfig(ctx context.Context, in *RevokeKubeconfigRequest, opts ...grpc.CallOption) (*RevokeKubeconfigResponse, error) {
	out := new(RevokeKubeconfigResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/RevokeKubeconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) GetOrganizationSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error) {
	out := new(GetKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/GetOrganizationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) GetUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error) {
	out := new(GetKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/GetUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) GetSSOUserSetting(ctx context.Context, in *GetKubeconfigSettingRequest, opts ...grpc.CallOption) (*GetKubeconfigSettingResponse, error) {
	out := new(GetKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/GetSSOUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) UpdateOrganizationSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error) {
	out := new(UpdateKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/UpdateOrganizationSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) UpdateUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error) {
	out := new(UpdateKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/UpdateUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeConfigClient) UpdateSSOUserSetting(ctx context.Context, in *UpdateKubeconfigSettingRequest, opts ...grpc.CallOption) (*UpdateKubeconfigSettingResponse, error) {
	out := new(UpdateKubeconfigSettingResponse)
	err := c.cc.Invoke(ctx, "/rafay.dev.sentry.rpc.KubeConfig/UpdateSSOUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeConfigServer is the server API for KubeConfig service.
// All implementations should embed UnimplementedKubeConfigServer
// for forward compatibility
type KubeConfigServer interface {
	GetForClusterWebSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error)
	GetForClusterSystemSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error)
	GetForUser(context.Context, *GetForUserRequest) (*v3.HttpBody, error)
	RevokeKubeconfig(context.Context, *RevokeKubeconfigRequest) (*RevokeKubeconfigResponse, error)
	GetOrganizationSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error)
	GetUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error)
	GetSSOUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error)
	UpdateOrganizationSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error)
	UpdateUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error)
	UpdateSSOUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error)
}

// UnimplementedKubeConfigServer should be embedded to have forward compatible implementations.
type UnimplementedKubeConfigServer struct {
}

func (UnimplementedKubeConfigServer) GetForClusterWebSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForClusterWebSession not implemented")
}
func (UnimplementedKubeConfigServer) GetForClusterSystemSession(context.Context, *GetForClusterRequest) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForClusterSystemSession not implemented")
}
func (UnimplementedKubeConfigServer) GetForUser(context.Context, *GetForUserRequest) (*v3.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForUser not implemented")
}
func (UnimplementedKubeConfigServer) RevokeKubeconfig(context.Context, *RevokeKubeconfigRequest) (*RevokeKubeconfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeKubeconfig not implemented")
}
func (UnimplementedKubeConfigServer) GetOrganizationSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationSetting not implemented")
}
func (UnimplementedKubeConfigServer) GetUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSetting not implemented")
}
func (UnimplementedKubeConfigServer) GetSSOUserSetting(context.Context, *GetKubeconfigSettingRequest) (*GetKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSOUserSetting not implemented")
}
func (UnimplementedKubeConfigServer) UpdateOrganizationSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationSetting not implemented")
}
func (UnimplementedKubeConfigServer) UpdateUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSetting not implemented")
}
func (UnimplementedKubeConfigServer) UpdateSSOUserSetting(context.Context, *UpdateKubeconfigSettingRequest) (*UpdateKubeconfigSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSSOUserSetting not implemented")
}

// UnsafeKubeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeConfigServer will
// result in compilation errors.
type UnsafeKubeConfigServer interface {
	mustEmbedUnimplementedKubeConfigServer()
}

func RegisterKubeConfigServer(s grpc.ServiceRegistrar, srv KubeConfigServer) {
	s.RegisterService(&KubeConfig_ServiceDesc, srv)
}

func _KubeConfig_GetForClusterWebSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).GetForClusterWebSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/GetForClusterWebSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).GetForClusterWebSession(ctx, req.(*GetForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_GetForClusterSystemSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).GetForClusterSystemSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/GetForClusterSystemSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).GetForClusterSystemSession(ctx, req.(*GetForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_GetForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).GetForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/GetForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).GetForUser(ctx, req.(*GetForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_RevokeKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).RevokeKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/RevokeKubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).RevokeKubeconfig(ctx, req.(*RevokeKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_GetOrganizationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).GetOrganizationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/GetOrganizationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).GetOrganizationSetting(ctx, req.(*GetKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_GetUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).GetUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/GetUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).GetUserSetting(ctx, req.(*GetKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_GetSSOUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).GetSSOUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/GetSSOUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).GetSSOUserSetting(ctx, req.(*GetKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_UpdateOrganizationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).UpdateOrganizationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/UpdateOrganizationSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).UpdateOrganizationSetting(ctx, req.(*UpdateKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_UpdateUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).UpdateUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/UpdateUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).UpdateUserSetting(ctx, req.(*UpdateKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeConfig_UpdateSSOUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeconfigSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeConfigServer).UpdateSSOUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafay.dev.sentry.rpc.KubeConfig/UpdateSSOUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeConfigServer).UpdateSSOUserSetting(ctx, req.(*UpdateKubeconfigSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeConfig_ServiceDesc is the grpc.ServiceDesc for KubeConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rafay.dev.sentry.rpc.KubeConfig",
	HandlerType: (*KubeConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForClusterWebSession",
			Handler:    _KubeConfig_GetForClusterWebSession_Handler,
		},
		{
			MethodName: "GetForClusterSystemSession",
			Handler:    _KubeConfig_GetForClusterSystemSession_Handler,
		},
		{
			MethodName: "GetForUser",
			Handler:    _KubeConfig_GetForUser_Handler,
		},
		{
			MethodName: "RevokeKubeconfig",
			Handler:    _KubeConfig_RevokeKubeconfig_Handler,
		},
		{
			MethodName: "GetOrganizationSetting",
			Handler:    _KubeConfig_GetOrganizationSetting_Handler,
		},
		{
			MethodName: "GetUserSetting",
			Handler:    _KubeConfig_GetUserSetting_Handler,
		},
		{
			MethodName: "GetSSOUserSetting",
			Handler:    _KubeConfig_GetSSOUserSetting_Handler,
		},
		{
			MethodName: "UpdateOrganizationSetting",
			Handler:    _KubeConfig_UpdateOrganizationSetting_Handler,
		},
		{
			MethodName: "UpdateUserSetting",
			Handler:    _KubeConfig_UpdateUserSetting_Handler,
		},
		{
			MethodName: "UpdateSSOUserSetting",
			Handler:    _KubeConfig_UpdateSSOUserSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/sentry/kubeconfig.proto",
}
